#include "DxLib.h"
extern "C"
{
 int  __stdcall dx_SetKeyInputStringColor( ULONGLONG  NmlStr, ULONGLONG  NmlCur, ULONGLONG  IMEStr, ULONGLONG  IMECur, ULONGLONG  IMELine, ULONGLONG  IMESelectStr, ULONGLONG  IMEModeStr, ULONGLONG  NmlStrE = 0, ULONGLONG  IMESelectStrE = 0, ULONGLONG  IMEModeStrE = 0, ULONGLONG  IMESelectWinE = 0xffffffffffffffff, ULONGLONG  IMESelectWinF = 0xffffffffffffffff, ULONGLONG  SelectStrBackColor = 0xffffffffffffffff, ULONGLONG  SelectStrColor = 0xffffffffffffffff, ULONGLONG  SelectStrEdgeColor = 0xffffffffffffffff);
int  __stdcall dx_Paint( int  x, int  y, unsigned int  FillColor, ULONGLONG  BoundaryColor = 0xffffffffffffffffUL);
int  __stdcall dx_MV1SetMaterialTypeParamAllS( int MHandle, float Param0, float Param1, float Param2, float Param3, float Param4, float Param5 ) ;
int  __stdcall dx_MV1SetMaterialTypeParamS( int MHandle, int MaterialIndex, float Param0, float Param1, float Param2, float Param3, float Param4, float Param5 ) ;
int  __stdcall dx_GraphFilterS( int GrHandle, int FilterType, int Param0, int Param1, int Param2, int Param3, int Param4, int Param5 ) ;
int  __stdcall dx_GraphFilterBltS( int SrcGrHandle, int DestGrHandle, int FilterType, int Param0, int Param1, int Param2, int Param3, int Param4, int Param5 ) ;
int  __stdcall dx_GraphFilterRectBltS( int SrcGrHandle, int DestGrHandle, int SrcX1, int SrcY1, int SrcX2, int SrcY2, int DestX, int DestY, int FilterType, int Param0, int Param1, int Param2, int Param3, int Param4, int Param5 ) ;
int  __stdcall dx_GraphBlendS( int GrHandle, int BlendGrHandle, int BlendRatio, int BlendType, int Param0, int Param1, int Param2, int Param3, int Param4, int Param5 ) ;
int  __stdcall dx_GraphBlendBltS( int SrcGrHandle, int BlendGrHandle, int DestGrHandle, int BlendRatio, int BlendType, int Param0, int Param1, int Param2, int Param3, int Param4, int Param5 ) ;
int  __stdcall dx_GraphBlendRectBltS( int SrcGrHandle, int BlendGrHandle, int DestGrHandle, int SrcX1, int SrcY1, int SrcX2, int SrcY2, int BlendX, int BlendY, int DestX, int DestY, int BlendRatio, int BlendType, int Param0, int Param1, int Param2, int Param3, int Param4, int Param5 ) ;
int  __stdcall dx_SetBlendGraphParamS( int BlendGraph, int BlendType, int Param0, int Param1, int Param2, int Param3, int Param4, int Param5 ) ;
VECTOR   __stdcall dx_MGetTranslateElem( MATRIX InM ) ;
VECTOR_D __stdcall dx_MGetTranslateElemD( MATRIX_D InM ) ;
VECTOR_D __stdcall dx_VConvFtoD( VECTOR In ) ;
VECTOR __stdcall dx_VConvDtoF( VECTOR_D In ) ;
VECTOR   __stdcall dx_VGet(  float x, float y, float z ) ;
VECTOR_D __stdcall dx_VGetD( double x, double y, double z ) ;
FLOAT2 __stdcall dx_F2Get( float u, float v ) ;
FLOAT4 __stdcall dx_F4Get( float x, float y, float z, float w ) ;
DOUBLE4 __stdcall dx_D4Get( double x, double y, double z, double w ) ;
VECTOR   __stdcall dx_VAdd(  VECTOR   In1, VECTOR   In2 ) ;
VECTOR_D __stdcall dx_VAddD( VECTOR_D In1, VECTOR_D In2 ) ;
VECTOR   __stdcall dx_VSub(  VECTOR   In1, VECTOR   In2 ) ;
VECTOR_D __stdcall dx_VSubD( VECTOR_D In1, VECTOR_D In2 ) ;
FLOAT2 __stdcall dx_F2Add( FLOAT2 In1, FLOAT2 In2 ) ;
FLOAT4 __stdcall dx_F4Add( FLOAT4 In1, FLOAT4 In2 ) ;
DOUBLE4 __stdcall dx_D4Add( DOUBLE4 In1, DOUBLE4 In2 ) ;
FLOAT2 __stdcall dx_F2Sub( FLOAT2 In1, FLOAT2 In2 ) ;
FLOAT4 __stdcall dx_F4Sub( FLOAT4 In1, FLOAT4 In2 ) ;
DOUBLE4 __stdcall dx_D4Sub( DOUBLE4 In1, DOUBLE4 In2 ) ;
float  __stdcall dx_VDot(  VECTOR   In1, VECTOR   In2 ) ;
double __stdcall dx_VDotD( VECTOR_D In1, VECTOR_D In2 ) ;
VECTOR   __stdcall dx_VCross(  VECTOR   In1, VECTOR   In2 ) ;
VECTOR_D __stdcall dx_VCrossD( VECTOR_D In1, VECTOR_D In2 ) ;
VECTOR   __stdcall dx_VScale(  VECTOR   In, float Scale ) ;
VECTOR_D __stdcall dx_VScaleD( VECTOR_D In, double Scale ) ;
FLOAT2 __stdcall dx_F2Scale( FLOAT2 In, float Scale ) ;
FLOAT4 __stdcall dx_F4Scale( FLOAT4 In, float Scale ) ;
DOUBLE4 __stdcall dx_D4Scale( DOUBLE4 In, double Scale ) ;
float  __stdcall dx_VSquareSize(  VECTOR   In ) ;
double __stdcall dx_VSquareSizeD( VECTOR_D In ) ;
VECTOR   __stdcall dx_VTransform(  VECTOR   InV, MATRIX   InM ) ;
VECTOR_D __stdcall dx_VTransformD( VECTOR_D InV, MATRIX_D InM ) ;
VECTOR   __stdcall dx_VTransformSR(  VECTOR   InV, MATRIX   InM ) ;
VECTOR_D __stdcall dx_VTransformSRD( VECTOR_D InV, MATRIX_D InM ) ;
FLOAT4 __stdcall dx_QTCross( FLOAT4 A, FLOAT4 B ) ;
DOUBLE4 __stdcall dx_QTCrossD( DOUBLE4 A, DOUBLE4 B ) ;
FLOAT4 __stdcall dx_QTConj( FLOAT4 A ) ;
DOUBLE4 __stdcall dx_QTConjD( DOUBLE4 A ) ;
int  __stdcall dx_DxLib_Init( void);
int  __stdcall dx_DxLib_End( void);
int  __stdcall dx_DxLib_GlobalStructInitialize( void);
int  __stdcall dx_DxLib_IsInit( void);
int  __stdcall dx_GetLastErrorCode( void);
int  __stdcall dx_GetLastErrorMessage( TCHAR *  StringBuffer, int  StringBufferBytes);
int  __stdcall dx_ProcessMessage( void);
int  __stdcall dx_SetAlwaysRunFlag( int  Flag);
int  __stdcall dx_WaitTimer( int  WaitTime);
int  __stdcall dx_WaitKey( void);
int  __stdcall dx_GetNowCount( int  UseRDTSCFlag = FALSE);
LONGLONG  __stdcall dx_GetNowHiPerformanceCount( int  UseRDTSCFlag = FALSE);
ULONGLONG  __stdcall dx_GetNowSysPerformanceCount( void);
ULONGLONG  __stdcall dx_GetSysPerformanceFrequency( void);
ULONGLONG  __stdcall dx_ConvSysPerformanceCountToSeconds( ULONGLONG  Count);
ULONGLONG  __stdcall dx_ConvSysPerformanceCountToMilliSeconds( ULONGLONG  Count);
ULONGLONG  __stdcall dx_ConvSysPerformanceCountToMicroSeconds( ULONGLONG  Count);
ULONGLONG  __stdcall dx_ConvSysPerformanceCountToNanoSeconds( ULONGLONG  Count);
ULONGLONG  __stdcall dx_ConvSecondsToSysPerformanceCount( ULONGLONG  Seconds);
ULONGLONG  __stdcall dx_ConvMilliSecondsToSysPerformanceCount( ULONGLONG  MilliSeconds);
ULONGLONG  __stdcall dx_ConvMicroSecondsToSysPerformanceCount( ULONGLONG  MicroSeconds);
ULONGLONG  __stdcall dx_ConvNanoSecondsToSysPerformanceCount( ULONGLONG  NanoSeconds);
int  __stdcall dx_GetDateTime( DATEDATA *  DateBuf);
int  __stdcall dx_GetRand( int  RandMax);
int  __stdcall dx_SRand( int  Seed);
int  __stdcall dx_GetBatteryLifePercent( void);
int  __stdcall dx_GetClipboardText( TCHAR *  DestBuffer);
int  __stdcall dx_SetClipboardText( const TCHAR * Text);
int  __stdcall dx_SetClipboardTextWithStrLen( const TCHAR * Text, size_t  TextLength);
int  __stdcall dx_GetPrivateProfileStringDx( const TCHAR * AppName, const TCHAR * KeyName, const TCHAR * Default, TCHAR *  ReturnedStringBuffer, size_t  ReturnedStringBufferBytes, const TCHAR * IniFilePath, int  IniFileCharCodeFormat = -1);
int  __stdcall dx_GetPrivateProfileStringDxWithStrLen( const TCHAR * AppName, size_t  AppNameLength, const TCHAR * KeyName, size_t  KeyNameLength, const TCHAR * Default, size_t  DefaultLength, TCHAR *  ReturnedStringBuffer, size_t  ReturnedStringBufferBytes, const TCHAR * IniFilePath, size_t  IniFilePathLength, int  IniFileCharCodeFormat = -1);
int  __stdcall dx_GetPrivateProfileIntDx( const TCHAR * AppName, const TCHAR * KeyName, int  Default, const TCHAR * IniFilePath, int  IniFileCharCodeFormat = -1);
int  __stdcall dx_GetPrivateProfileIntDxWithStrLen( const TCHAR * AppName, size_t  AppNameLength, const TCHAR * KeyName, size_t  KeyNameLength, int  Default, const TCHAR * IniFilePath, size_t  IniFilePathLength, int  IniFileCharCodeFormat = -1);
int  __stdcall dx_GetPrivateProfileStringDxForMem( const TCHAR * AppName, const TCHAR * KeyName, const TCHAR * Default, TCHAR *  ReturnedStringBuffer, size_t  ReturnedStringBufferBytes, const void * IniFileImage, size_t  IniFileImageBytes, int  IniFileCharCodeFormat = -1);
int  __stdcall dx_GetPrivateProfileStringDxForMemWithStrLen( const TCHAR * AppName, size_t  AppNameLength, const TCHAR * KeyName, size_t  KeyNameLength, const TCHAR * Default, size_t  DefaultLength, TCHAR *  ReturnedStringBuffer, size_t  ReturnedStringBufferBytes, const void * IniFileImage, size_t  IniFileImageBytes, int  IniFileCharCodeFormat = -1);
int  __stdcall dx_GetPrivateProfileIntDxForMem( const TCHAR * AppName, const TCHAR * KeyName, int  Default, const void * IniFileImage, size_t  IniFileImageBytes, int  IniFileCharCodeFormat = -1);
int  __stdcall dx_GetPrivateProfileIntDxForMemWithStrLen( const TCHAR * AppName, size_t  AppNameLength, const TCHAR * KeyName, size_t  KeyNameLength, int  Default, const void * IniFileImage, size_t  IniFileImageBytes, int  IniFileCharCodeFormat = -1);
int  __stdcall dx_LogFileAdd( const TCHAR * String);
int  __stdcall dx_LogFileAddWithStrLen( const TCHAR * String, size_t  StringLength);
int  __stdcall dx_LogFileTabAdd( void);
int  __stdcall dx_LogFileTabSub( void);
int  __stdcall dx_ErrorLogAdd( const TCHAR * String);
int  __stdcall dx_ErrorLogTabAdd( void);
int  __stdcall dx_ErrorLogTabSub( void);
int  __stdcall dx_SetUseTimeStampFlag( int  UseFlag);
int  __stdcall dx_SetOutApplicationLogValidFlag( int  Flag);
int  __stdcall dx_SetApplicationLogFileName( const TCHAR * FileName);
int  __stdcall dx_SetApplicationLogFileNameWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_SetApplicationLogSaveDirectory( const TCHAR * DirectoryPath);
int  __stdcall dx_SetApplicationLogSaveDirectoryWithStrLen( const TCHAR * DirectoryPath, size_t  DirectoryPathLength);
int  __stdcall dx_SetUseDateNameLogFile( int  Flag);
int  __stdcall dx_SetLogDrawOutFlag( int  DrawFlag);
int  __stdcall dx_GetLogDrawFlag( void);
int  __stdcall dx_SetLogFontSize( int  Size);
int  __stdcall dx_SetLogFontHandle( int  FontHandle);
int  __stdcall dx_SetLogDrawArea( int  x1, int  y1, int  x2, int  y2);
int  __stdcall dx_putsDx( const TCHAR * String, int  NewLine = TRUE);
int  __stdcall dx_putsDxWithStrLen( const TCHAR * String, size_t  StringLength, int  NewLine = TRUE);
int  __stdcall dx_clsDx( void);
int  __stdcall dx_SetUseASyncLoadFlag( int  Flag);
int  __stdcall dx_GetUseASyncLoadFlag( void);
int  __stdcall dx_CheckHandleASyncLoad( int  Handle);
int  __stdcall dx_GetHandleASyncLoadResult( int  Handle);
int  __stdcall dx_SetASyncLoadFinishDeleteFlag( int  Handle);
int  __stdcall dx_GetASyncLoadNum( void);
int  __stdcall dx_SetASyncLoadThreadNum( int  ThreadNum);
int  __stdcall dx_SetDeleteHandleFlag( int  Handle, int *  DeleteFlag);
int  __stdcall dx_SetMouseDispFlag( int  DispFlag);
int  __stdcall dx_GetMousePoint( int *  XBuf, int *  YBuf);
int  __stdcall dx_SetMousePoint( int  PointX, int  PointY);
int  __stdcall dx_GetMouseInput( void);
int  __stdcall dx_GetMouseWheelRotVol( int  CounterReset = TRUE);
int  __stdcall dx_GetMouseHWheelRotVol( int  CounterReset = TRUE);
float  __stdcall dx_GetMouseWheelRotVolF( int  CounterReset = TRUE);
float  __stdcall dx_GetMouseHWheelRotVolF( int  CounterReset = TRUE);
int  __stdcall dx_GetMouseInputLog( int *  Button, int *  ClickX, int *  ClickY, int  LogDelete = TRUE);
int  __stdcall dx_GetMouseInputLog2( int *  Button, int *  ClickX, int *  ClickY, int *  LogType, int  LogDelete = TRUE);
int  __stdcall dx_GetTouchInputNum( void);
int  __stdcall dx_GetTouchInput( int  InputNo, int *  PositionX, int *  PositionY, int *  ID, int *  Device);
int  __stdcall dx_GetTouchInputLogNum( void);
int  __stdcall dx_ClearTouchInputLog( void);
TOUCHINPUTDATA __stdcall dx_GetTouchInputLogOne( int PeekFlag = FALSE ) ;
int  __stdcall dx_GetTouchInputLog( TOUCHINPUTDATA *  TouchData, int  GetNum, int  PeekFlag = FALSE);
int  __stdcall dx_GetTouchInputDownLogNum( void);
int  __stdcall dx_ClearTouchInputDownLog( void);
TOUCHINPUTPOINT __stdcall dx_GetTouchInputDownLogOne( int PeekFlag = FALSE ) ;
int  __stdcall dx_GetTouchInputDownLog( TOUCHINPUTPOINT *  PointData, int  GetNum, int  PeekFlag = FALSE);
int  __stdcall dx_GetTouchInputUpLogNum( void);
int  __stdcall dx_ClearTouchInputUpLog( void);
TOUCHINPUTPOINT __stdcall dx_GetTouchInputUpLogOne( int PeekFlag = FALSE ) ;
int  __stdcall dx_GetTouchInputUpLog( TOUCHINPUTPOINT *  PointData, int  GetNum, int  PeekFlag = FALSE);
void *  __stdcall dx_DxAlloc( size_t  AllocSize, const char * File = NULL, int  Line = -1);
void *  __stdcall dx_DxAllocAligned( size_t  AllocSize, size_t  Alignment, const char * File = NULL, int  Line = -1);
void *  __stdcall dx_DxCalloc( size_t  AllocSize, const char * File = NULL, int  Line = -1);
void *  __stdcall dx_DxCallocAligned( size_t  AllocSize, size_t  Alignment, const char * File = NULL, int  Line = -1);
void *  __stdcall dx_DxRealloc( void *  Memory, size_t  AllocSize, const char * File = NULL, int  Line = -1);
void *  __stdcall dx_DxReallocAligned( void *  Memory, size_t  AllocSize, size_t  Alignment, const char * File = NULL, int  Line = -1);
void  __stdcall dx_DxFree( void *  Memory);
size_t  __stdcall dx_DxSetAllocSizeTrap( size_t  Size);
int  __stdcall dx_DxSetAllocPrintFlag( int  Flag);
size_t  __stdcall dx_DxGetAllocSize( void);
int  __stdcall dx_DxGetAllocNum( void);
void  __stdcall dx_DxDumpAlloc( void);
void  __stdcall dx_DxDrawAlloc( int  x, int  y, int  Width, int  Height);
int  __stdcall dx_DxErrorCheckAlloc( void);
int  __stdcall dx_DxSetAllocSizeOutFlag( int  Flag);
int  __stdcall dx_DxSetAllocMemoryErrorCheckFlag( int  Flag);
int  __stdcall dx_GetCharBytes( int  CharCodeFormat, const void * String);
int  __stdcall dx_ConvertStringCharCodeFormat( int  SrcCharCodeFormat, const void * SrcString, int  DestCharCodeFormat, void *  DestStringBuffer);
int  __stdcall dx_SetUseCharCodeFormat( int  CharCodeFormat);
int  __stdcall dx_GetUseCharCodeFormat( void);
int  __stdcall dx_Get_wchar_t_CharCodeFormat( void);
void  __stdcall dx_strcpyDx( TCHAR *  Dest, const TCHAR * Src);
void  __stdcall dx_strcpy_sDx( TCHAR *  Dest, size_t  DestBytes, const TCHAR * Src);
void  __stdcall dx_strpcpyDx( TCHAR *  Dest, const TCHAR * Src, int  Pos);
void  __stdcall dx_strpcpy_sDx( TCHAR *  Dest, size_t  DestBytes, const TCHAR * Src, int  Pos);
void  __stdcall dx_strpcpy2Dx( TCHAR *  Dest, const TCHAR * Src, int  Pos);
void  __stdcall dx_strpcpy2_sDx( TCHAR *  Dest, size_t  DestBytes, const TCHAR * Src, int  Pos);
void  __stdcall dx_strncpyDx( TCHAR *  Dest, const TCHAR * Src, int  Num);
void  __stdcall dx_strncpy_sDx( TCHAR *  Dest, size_t  DestBytes, const TCHAR * Src, int  Num);
void  __stdcall dx_strncpy2Dx( TCHAR *  Dest, const TCHAR * Src, int  Num);
void  __stdcall dx_strncpy2_sDx( TCHAR *  Dest, size_t  DestBytes, const TCHAR * Src, int  Num);
void  __stdcall dx_strrncpyDx( TCHAR *  Dest, const TCHAR * Src, int  Num);
void  __stdcall dx_strrncpy_sDx( TCHAR *  Dest, size_t  DestBytes, const TCHAR * Src, int  Num);
void  __stdcall dx_strrncpy2Dx( TCHAR *  Dest, const TCHAR * Src, int  Num);
void  __stdcall dx_strrncpy2_sDx( TCHAR *  Dest, size_t  DestBytes, const TCHAR * Src, int  Num);
void  __stdcall dx_strpncpyDx( TCHAR *  Dest, const TCHAR * Src, int  Pos, int  Num);
void  __stdcall dx_strpncpy_sDx( TCHAR *  Dest, size_t  DestBytes, const TCHAR * Src, int  Pos, int  Num);
void  __stdcall dx_strpncpy2Dx( TCHAR *  Dest, const TCHAR * Src, int  Pos, int  Num);
void  __stdcall dx_strpncpy2_sDx( TCHAR *  Dest, size_t  DestBytes, const TCHAR * Src, int  Pos, int  Num);
void  __stdcall dx_strcatDx( TCHAR *  Dest, const TCHAR * Src);
void  __stdcall dx_strcat_sDx( TCHAR *  Dest, size_t  DestBytes, const TCHAR * Src);
size_t  __stdcall dx_strlenDx( const TCHAR * Str);
size_t  __stdcall dx_strlen2Dx( const TCHAR * Str);
int  __stdcall dx_strcmpDx( const TCHAR * Str1, const TCHAR * Str2);
int  __stdcall dx_stricmpDx( const TCHAR * Str1, const TCHAR * Str2);
int  __stdcall dx_strncmpDx( const TCHAR * Str1, const TCHAR * Str2, int  Num);
int  __stdcall dx_strncmp2Dx( const TCHAR * Str1, const TCHAR * Str2, int  Num);
int  __stdcall dx_strpncmpDx( const TCHAR * Str1, const TCHAR * Str2, int  Pos, int  Num);
int  __stdcall dx_strpncmp2Dx( const TCHAR * Str1, const TCHAR * Str2, int  Pos, int  Num);
DWORD  __stdcall dx_strgetchrDx( const TCHAR * Str, int  Pos, int *  CharNums);
DWORD  __stdcall dx_strgetchr2Dx( const TCHAR * Str, int  Pos, int *  CharNums);
int  __stdcall dx_strputchrDx( TCHAR *  Str, int  Pos, DWORD  CharCode);
int  __stdcall dx_strputchr2Dx( TCHAR *  Str, int  Pos, DWORD  CharCode);
const TCHAR * __stdcall dx_strposDx( const TCHAR * Str, int  Pos);
const TCHAR * __stdcall dx_strpos2Dx( const TCHAR * Str, int  Pos);
const TCHAR * __stdcall dx_strstrDx( const TCHAR * Str1, const TCHAR * Str2);
int  __stdcall dx_strstr2Dx( const TCHAR * Str1, const TCHAR * Str2);
const TCHAR * __stdcall dx_strrstrDx( const TCHAR * Str1, const TCHAR * Str2);
int  __stdcall dx_strrstr2Dx( const TCHAR * Str1, const TCHAR * Str2);
const TCHAR * __stdcall dx_strchrDx( const TCHAR * Str, DWORD  CharCode);
int  __stdcall dx_strchr2Dx( const TCHAR * Str, DWORD  CharCode);
const TCHAR * __stdcall dx_strrchrDx( const TCHAR * Str, DWORD  CharCode);
int  __stdcall dx_strrchr2Dx( const TCHAR * Str, DWORD  CharCode);
TCHAR *  __stdcall dx_struprDx( TCHAR *  Str);
int __stdcall dx_vsprintfDx( TCHAR * Buffer , const TCHAR * FormatString , va_list Arg ) ;
int __stdcall dx_vsnprintfDx( TCHAR * Buffer , size_t BufferSize , const TCHAR * FormatString , va_list Arg ) ;
TCHAR *  __stdcall dx_itoaDx( int  Value, TCHAR *  Buffer, int  Radix);
TCHAR *  __stdcall dx_itoa_sDx( int  Value, TCHAR *  Buffer, size_t  BufferBytes, int  Radix);
int  __stdcall dx_atoiDx( const TCHAR * Str);
double __stdcall dx_atofDx( const TCHAR * Str ) ;
int __stdcall dx_vsscanfDx( const TCHAR * String , const TCHAR * FormatString , va_list Arg ) ;
int  __stdcall dx_ProcessNetMessage( int  RunReleaseProcess = FALSE);
int  __stdcall dx_GetHostIPbyName( const TCHAR * HostName, IPDATA *  IPDataBuf, int  IPDataBufLength, int *  IPDataGetNum);
int  __stdcall dx_GetHostIPbyNameWithStrLen( const TCHAR * HostName, size_t  HostNameLength, IPDATA *  IPDataBuf, int  IPDataBufLength, int *  IPDataGetNum);
int  __stdcall dx_GetHostIPbyName_IPv6( const TCHAR * HostName, IPDATA_IPv6 *  IPDataBuf, int  IPDataBufLength, int *  IPDataGetNum);
int  __stdcall dx_GetHostIPbyName_IPv6WithStrLen( const TCHAR * HostName, size_t  HostNameLength, IPDATA_IPv6 *  IPDataBuf, int  IPDataBufLength, int *  IPDataGetNum);
int  __stdcall dx_ConnectNetWork( IPDATA  IPData, int  Port = -1);
int  __stdcall dx_ConnectNetWork_IPv6( IPDATA_IPv6  IPData, int  Port = -1);
int  __stdcall dx_ConnectNetWork_ASync( IPDATA  IPData, int  Port = -1);
int  __stdcall dx_ConnectNetWork_IPv6_ASync( IPDATA_IPv6  IPData, int  Port = -1);
int  __stdcall dx_PreparationListenNetWork( int  Port = -1);
int  __stdcall dx_PreparationListenNetWork_IPv6( int  Port = -1);
int  __stdcall dx_StopListenNetWork( void);
int  __stdcall dx_CloseNetWork( int  NetHandle);
int  __stdcall dx_GetNetWorkAcceptState( int  NetHandle);
int  __stdcall dx_GetNetWorkDataLength( int  NetHandle);
int  __stdcall dx_GetNetWorkSendDataLength( int  NetHandle);
int  __stdcall dx_GetNewAcceptNetWork( void);
int  __stdcall dx_GetLostNetWork( void);
int  __stdcall dx_GetNetWorkIP( int  NetHandle, IPDATA *  IpBuf);
int  __stdcall dx_GetNetWorkIP_IPv6( int  NetHandle, IPDATA_IPv6 *  IpBuf);
int  __stdcall dx_GetMyIPAddress( IPDATA *  IpBuf, int  IpBufLength, int *  IpNum);
int  __stdcall dx_GetMyIPAddress_IPv6( IPDATA_IPv6 *  IpBuf, int  IpBufLength, int *  IpNum);
int  __stdcall dx_SetConnectTimeOutWait( int  Time);
int  __stdcall dx_SetUseDXNetWorkProtocol( int  Flag);
int  __stdcall dx_GetUseDXNetWorkProtocol( void);
int  __stdcall dx_SetUseDXProtocol( int  Flag);
int  __stdcall dx_GetUseDXProtocol( void);
int  __stdcall dx_SetNetWorkCloseAfterLostFlag( int  Flag);
int  __stdcall dx_GetNetWorkCloseAfterLostFlag( void);
int  __stdcall dx_NetWorkRecv( int  NetHandle, void *  Buffer, int  Length);
int  __stdcall dx_NetWorkRecvToPeek( int  NetHandle, void *  Buffer, int  Length);
int  __stdcall dx_NetWorkRecvBufferClear( int  NetHandle);
int  __stdcall dx_NetWorkSend( int  NetHandle, const void * Buffer, int  Length);
int  __stdcall dx_MakeUDPSocket( int  RecvPort = -1);
int  __stdcall dx_MakeUDPSocket_IPv6( int  RecvPort = -1);
int  __stdcall dx_DeleteUDPSocket( int  NetUDPHandle);
int  __stdcall dx_NetWorkSendUDP( int  NetUDPHandle, IPDATA  SendIP, int  SendPort, const void * Buffer, int  Length);
int  __stdcall dx_NetWorkSendUDP_IPv6( int  NetUDPHandle, IPDATA_IPv6  SendIP, int  SendPort, const void * Buffer, int  Length);
int  __stdcall dx_NetWorkRecvUDP( int  NetUDPHandle, IPDATA *  RecvIP, int *  RecvPort, void *  Buffer, int  Length, int  Peek);
int  __stdcall dx_NetWorkRecvUDP_IPv6( int  NetUDPHandle, IPDATA_IPv6 *  RecvIP, int *  RecvPort, void *  Buffer, int  Length, int  Peek);
int  __stdcall dx_CheckNetWorkRecvUDP( int  NetUDPHandle);
int  __stdcall dx_StockInputChar( TCHAR  CharCode);
int  __stdcall dx_ClearInputCharBuf( void);
TCHAR __stdcall dx_GetInputChar( int DeleteFlag ) ;
TCHAR __stdcall dx_GetInputCharWait( int DeleteFlag ) ;
int  __stdcall dx_GetOneChar( TCHAR *  CharBuffer, int  DeleteFlag);
int  __stdcall dx_GetOneCharWait( TCHAR *  CharBuffer, int  DeleteFlag);
int  __stdcall dx_GetCtrlCodeCmp( TCHAR  Char);
int  __stdcall dx_DrawIMEInputString( int  x, int  y, int  SelectStringNum, int  DrawCandidateList = TRUE);
int  __stdcall dx_SetUseIMEFlag( int  UseFlag);
int  __stdcall dx_GetUseIMEFlag( void);
int  __stdcall dx_SetInputStringMaxLengthIMESync( int  Flag);
int  __stdcall dx_SetIMEInputStringMaxLength( int  Length);
int  __stdcall dx_GetStringPoint( const TCHAR * String, int  Point);
int  __stdcall dx_GetStringPointWithStrLen( const TCHAR * String, size_t  StringLength, int  Point);
int  __stdcall dx_GetStringPoint2( const TCHAR * String, int  Point);
int  __stdcall dx_GetStringPoint2WithStrLen( const TCHAR * String, size_t  StringLength, int  Point);
int  __stdcall dx_GetStringLength( const TCHAR * String);
int  __stdcall dx_DrawObtainsString( int  x, int  y, int  AddY, const TCHAR * String, unsigned int  StrColor, unsigned int  StrEdgeColor = 0, int  FontHandle = -1, unsigned int  SelectBackColor = 0xffffffff, unsigned int  SelectStrColor = 0, unsigned int  SelectStrEdgeColor = 0xffffffff, int  SelectStart = -1, int  SelectEnd = -1);
int  __stdcall dx_DrawObtainsNString( int  x, int  y, int  AddY, const TCHAR * String, size_t  StringLength, unsigned int  StrColor, unsigned int  StrEdgeColor = 0, int  FontHandle = -1, unsigned int  SelectBackColor = 0xffffffff, unsigned int  SelectStrColor = 0, unsigned int  SelectStrEdgeColor = 0xffffffff, int  SelectStart = -1, int  SelectEnd = -1);
int  __stdcall dx_DrawObtainsString_CharClip( int  x, int  y, int  AddY, const TCHAR * String, unsigned int  StrColor, unsigned int  StrEdgeColor = 0, int  FontHandle = -1, unsigned int  SelectBackColor = 0xffffffff, unsigned int  SelectStrColor = 0, unsigned int  SelectStrEdgeColor = 0xffffffff, int  SelectStart = -1, int  SelectEnd = -1);
int  __stdcall dx_DrawObtainsNString_CharClip( int  x, int  y, int  AddY, const TCHAR * String, size_t  StringLength, unsigned int  StrColor, unsigned int  StrEdgeColor = 0, int  FontHandle = -1, unsigned int  SelectBackColor = 0xffffffff, unsigned int  SelectStrColor = 0, unsigned int  SelectStrEdgeColor = 0xffffffff, int  SelectStart = -1, int  SelectEnd = -1);
int  __stdcall dx_GetObtainsStringCharPosition( int  x, int  y, int  AddY, const TCHAR * String, int  StrLen, int *  PosX, int *  PosY, int  FontHandle = -1);
int  __stdcall dx_GetObtainsStringCharPosition_CharClip( int  x, int  y, int  AddY, const TCHAR * String, int  StrLen, int *  PosX, int *  PosY, int  FontHandle = -1);
int  __stdcall dx_DrawObtainsBox( int  x1, int  y1, int  x2, int  y2, int  AddY, unsigned int  Color, int  FillFlag);
int  __stdcall dx_InputStringToCustom( int  x, int  y, size_t  BufLength, TCHAR *  StrBuffer, int  CancelValidFlag, int  SingleCharOnlyFlag, int  NumCharOnlyFlag, int  DoubleCharOnlyFlag = FALSE, int  EnableNewLineFlag = FALSE, int  DisplayCandidateList = TRUE);
int  __stdcall dx_KeyInputString( int  x, int  y, size_t  CharMaxLength, TCHAR *  StrBuffer, int  CancelValidFlag);
int  __stdcall dx_KeyInputSingleCharString( int  x, int  y, size_t  CharMaxLength, TCHAR *  StrBuffer, int  CancelValidFlag);
int  __stdcall dx_KeyInputNumber( int  x, int  y, int  MaxNum, int  MinNum, int  CancelValidFlag);
int  __stdcall dx_GetIMEInputModeStr( TCHAR *  GetBuffer);
const IMEINPUTDATA * __stdcall dx_GetIMEInputData( void );
int  __stdcall dx_SetKeyInputStringColor2( int  TargetColor, unsigned int  Color);
int  __stdcall dx_ResetKeyInputStringColor2( int  TargetColor);
int  __stdcall dx_SetKeyInputStringFont( int  FontHandle);
int  __stdcall dx_SetKeyInputStringEndCharaMode( int  EndCharaMode);
int  __stdcall dx_DrawKeyInputModeString( int  x, int  y);
int  __stdcall dx_InitKeyInput( void);
int  __stdcall dx_MakeKeyInput( size_t  MaxStrLength, int  CancelValidFlag, int  SingleCharOnlyFlag, int  NumCharOnlyFlag, int  DoubleCharOnlyFlag = FALSE, int  EnableNewLineFlag = FALSE);
int  __stdcall dx_DeleteKeyInput( int  InputHandle);
int  __stdcall dx_SetActiveKeyInput( int  InputHandle);
int  __stdcall dx_GetActiveKeyInput( void);
int  __stdcall dx_CheckKeyInput( int  InputHandle);
int  __stdcall dx_ReStartKeyInput( int  InputHandle);
int  __stdcall dx_ProcessActKeyInput( void);
int  __stdcall dx_DrawKeyInputString( int  x, int  y, int  InputHandle, int  DrawCandidateList = TRUE);
int  __stdcall dx_SetKeyInputDrawArea( int  x1, int  y1, int  x2, int  y2, int  InputHandle);
int  __stdcall dx_SetKeyInputSelectArea( int  SelectStart, int  SelectEnd, int  InputHandle);
int  __stdcall dx_GetKeyInputSelectArea( int *  SelectStart, int *  SelectEnd, int  InputHandle);
int  __stdcall dx_SetKeyInputDrawStartPos( int  DrawStartPos, int  InputHandle);
int  __stdcall dx_GetKeyInputDrawStartPos( int  InputHandle);
int  __stdcall dx_SetKeyInputCursorBrinkTime( int  Time);
int  __stdcall dx_SetKeyInputCursorBrinkFlag( int  Flag);
int  __stdcall dx_SetKeyInputString( const TCHAR * String, int  InputHandle);
int  __stdcall dx_SetKeyInputStringWithStrLen( const TCHAR * String, size_t  StringLength, int  InputHandle);
int  __stdcall dx_SetKeyInputNumber( int  Number, int  InputHandle);
int  __stdcall dx_SetKeyInputNumberToFloat( float  Number, int  InputHandle);
int  __stdcall dx_GetKeyInputString( TCHAR *  StrBuffer, int  InputHandle);
int  __stdcall dx_GetKeyInputNumber( int  InputHandle);
float  __stdcall dx_GetKeyInputNumberToFloat( int  InputHandle);
int  __stdcall dx_SetKeyInputCursorPosition( int  Position, int  InputHandle);
int  __stdcall dx_GetKeyInputCursorPosition( int  InputHandle);
int  __stdcall dx_FileRead_open( const TCHAR * FilePath, int  ASync = FALSE);
int  __stdcall dx_FileRead_open_WithStrLen( const TCHAR * FilePath, size_t  FilePathLength, int  ASync = FALSE);
int  __stdcall dx_FileRead_open_mem( const void * FileImage, size_t  FileImageSize);
LONGLONG  __stdcall dx_FileRead_size( const TCHAR * FilePath);
LONGLONG  __stdcall dx_FileRead_size_WithStrLen( const TCHAR * FilePath, size_t  FilePathLength);
int  __stdcall dx_FileRead_close( int  FileHandle);
LONGLONG  __stdcall dx_FileRead_tell( int  FileHandle);
int  __stdcall dx_FileRead_seek( int  FileHandle, LONGLONG  Offset, int  Origin);
int  __stdcall dx_FileRead_read( void *  Buffer, int  ReadSize, int  FileHandle);
int  __stdcall dx_FileRead_idle_chk( int  FileHandle);
int  __stdcall dx_FileRead_eof( int  FileHandle);
int  __stdcall dx_FileRead_set_format( int  FileHandle, int  CharCodeFormat);
int  __stdcall dx_FileRead_gets( TCHAR *  Buffer, int  BufferSize, int  FileHandle);
TCHAR __stdcall dx_FileRead_getc( int FileHandle ) ;
DWORD_PTR  __stdcall dx_FileRead_createInfo( const TCHAR * ObjectPath);
DWORD_PTR  __stdcall dx_FileRead_createInfo_WithStrLen( const TCHAR * ObjectPath, size_t  ObjectPathLength);
int  __stdcall dx_FileRead_getInfoNum( DWORD_PTR  FileInfoHandle);
int __stdcall dx_FileRead_getInfo( int Index , FILEINFO * Buffer , DWORD_PTR FileInfoHandle ) ;
int  __stdcall dx_FileRead_deleteInfo( DWORD_PTR  FileInfoHandle);
DWORD_PTR __stdcall dx_FileRead_findFirst( const TCHAR * FilePath , FILEINFO * Buffer ) ;
DWORD_PTR __stdcall dx_FileRead_findFirst_WithStrLen( const TCHAR * FilePath , size_t FilePathLength , FILEINFO * Buffer ) ;
int __stdcall dx_FileRead_findNext( DWORD_PTR FindHandle , FILEINFO * Buffer ) ;
int __stdcall dx_FileRead_findClose( DWORD_PTR FindHandle ) ;
int  __stdcall dx_FileRead_fullyLoad( const TCHAR * FilePath);
int  __stdcall dx_FileRead_fullyLoad_WithStrLen( const TCHAR * FilePath, size_t  FilePathLength);
int  __stdcall dx_FileRead_fullyLoad_delete( int  FLoadHandle);
const void * __stdcall dx_FileRead_fullyLoad_getImage( int  FLoadHandle);
LONGLONG  __stdcall dx_FileRead_fullyLoad_getSize( int  FLoadHandle);
int  __stdcall dx_GetStreamFunctionDefault( void);
int __stdcall dx_ChangeStreamFunction( const STREAMDATASHREDTYPE2 * StreamThread ) ;
int __stdcall dx_ChangeStreamFunctionW( const STREAMDATASHREDTYPE2W * StreamThreadW ) ;
int  __stdcall dx_ConvertFullPath( const TCHAR * Src, TCHAR *  Dest, const TCHAR * CurrentDir = NULL);
int  __stdcall dx_ConvertFullPathWithStrLen( const TCHAR * Src, size_t  SrcLength, TCHAR *  Dest, const TCHAR * CurrentDir = NULL, size_t  CurrentDirLength = 0);
int  __stdcall dx_CheckHitKey( int  KeyCode);
int  __stdcall dx_CheckHitKeyAll( int  CheckType = DX_CHECKINPUT_ALL);
int  __stdcall dx_GetHitKeyStateAll( DX_CHAR *  KeyStateArray);
int  __stdcall dx_GetJoypadNum( void);
int  __stdcall dx_GetJoypadButtonNum( int  InputType);
int  __stdcall dx_GetJoypadInputState( int  InputType);
int  __stdcall dx_GetJoypadAnalogInput( int *  XBuf, int *  YBuf, int  InputType);
int  __stdcall dx_GetJoypadAnalogInputRight( int *  XBuf, int *  YBuf, int  InputType);
int  __stdcall dx_GetJoypadDirectInputState( int  InputType, DINPUT_JOYSTATE *  DInputState);
int  __stdcall dx_CheckJoypadXInput( int  InputType);
int  __stdcall dx_GetJoypadXInputState( int  InputType, XINPUT_STATE *  XInputState);
int  __stdcall dx_SetJoypadInputToKeyInput( int  InputType, int  PadInput, int  KeyInput1, int  KeyInput2 = -1, int  KeyInput3 = -1, int  KeyInput4 = -1);
int  __stdcall dx_SetJoypadDeadZone( int  InputType, double  Zone);
double __stdcall dx_GetJoypadDeadZone( int InputType ) ;
int  __stdcall dx_StartJoypadVibration( int  InputType, int  Power, int  Time, int  EffectIndex = -1);
int  __stdcall dx_StopJoypadVibration( int  InputType, int  EffectIndex = -1);
int  __stdcall dx_GetJoypadPOVState( int  InputType, int  POVNumber);
int  __stdcall dx_ReSetupJoypad( void);
int  __stdcall dx_SetUseJoypadVibrationFlag( int  Flag);
int  __stdcall dx_MakeGraph( int  SizeX, int  SizeY, int  NotUse3DFlag = FALSE);
int  __stdcall dx_MakeScreen( int  SizeX, int  SizeY, int  UseAlphaChannel = FALSE);
int  __stdcall dx_DerivationGraph( int  SrcX, int  SrcY, int  Width, int  Height, int  SrcGraphHandle);
int  __stdcall dx_DerivationGraphF( float  SrcX, float  SrcY, float  Width, float  Height, int  SrcGraphHandle);
int  __stdcall dx_DeleteGraph( int  GrHandle, int  LogOutFlag = FALSE);
int  __stdcall dx_DeleteSharingGraph( int  GrHandle);
int  __stdcall dx_GetGraphNum( void);
int  __stdcall dx_FillGraph( int  GrHandle, int  Red, int  Green, int  Blue, int  Alpha = 255);
int  __stdcall dx_FillRectGraph( int  GrHandle, int  x, int  y, int  Width, int  Height, int  Red, int  Green, int  Blue, int  Alpha = 255);
int  __stdcall dx_SetGraphLostFlag( int  GrHandle, int *  LostFlag);
int  __stdcall dx_InitGraph( int  LogOutFlag = FALSE);
int  __stdcall dx_ReloadFileGraphAll( void);
int  __stdcall dx_MakeShadowMap( int  SizeX, int  SizeY);
int  __stdcall dx_DeleteShadowMap( int  SmHandle);
int  __stdcall dx_SetShadowMapLightDirection( int  SmHandle, VECTOR  Direction);
int  __stdcall dx_ShadowMap_DrawSetup( int  SmHandle);
int  __stdcall dx_ShadowMap_DrawEnd( void);
int  __stdcall dx_SetUseShadowMap( int  SmSlotIndex, int  SmHandle);
int  __stdcall dx_SetShadowMapDrawArea( int  SmHandle, VECTOR  MinPosition, VECTOR  MaxPosition);
int  __stdcall dx_ResetShadowMapDrawArea( int  SmHandle);
int  __stdcall dx_SetShadowMapAdjustDepth( int  SmHandle, float  Depth);
int  __stdcall dx_GetShadowMapViewProjectionMatrix( int  SmHandle, MATRIX *  MatrixBuffer);
int  __stdcall dx_TestDrawShadowMap( int  SmHandle, int  x1, int  y1, int  x2, int  y2);
int __stdcall dx_BltBmpToGraph( const COLORDATA * BmpColorData , HBITMAP RgbBmp , HBITMAP AlphaBmp , int CopyPointX , int CopyPointY , int GrHandle ) ;
int __stdcall dx_BltBmpToDivGraph( const COLORDATA * BmpColorData , HBITMAP RgbBmp , HBITMAP AlphaBmp , int AllNum , int XNum , int YNum , int Width , int Height , const int * GrHandle , int ReverseFlag ) ;
int __stdcall dx_BltBmpOrGraphImageToGraph( const COLORDATA * BmpColorData , HBITMAP RgbBmp , HBITMAP AlphaBmp , int BmpFlag , const BASEIMAGE * RgbBaseImage , const BASEIMAGE * AlphaBaseImage , int CopyPointX , int CopyPointY , int GrHandle ) ;
int __stdcall dx_BltBmpOrGraphImageToGraph2( const COLORDATA * BmpColorData , HBITMAP RgbBmp , HBITMAP AlphaBmp , int BmpFlag , const BASEIMAGE * RgbBaseImage , const BASEIMAGE * AlphaBaseImage , const RECT * SrcRect , int DestX , int DestY , int GrHandle ) ;
int __stdcall dx_BltBmpOrGraphImageToDivGraph( const COLORDATA * BmpColorData , HBITMAP RgbBmp , HBITMAP AlphaBmp , int BmpFlag , const BASEIMAGE * RgbBaseImage , const BASEIMAGE * AlphaBaseImage , int AllNum , int XNum , int YNum , int Width , int Height , const int * GrHandle , int ReverseFlag ) ;
int __stdcall dx_BltBmpOrGraphImageToDivGraphF( const COLORDATA * BmpColorData , HBITMAP RgbBmp , HBITMAP AlphaBmp , int BmpFlag , const BASEIMAGE * RgbBaseImage , const BASEIMAGE * AlphaBaseImage , int AllNum , int XNum , int YNum , float Width , float Height , const int * GrHandle , int ReverseFlag ) ;
int  __stdcall dx_LoadBmpToGraph( const TCHAR * FileName, int  TextureFlag, int  ReverseFlag, int  SurfaceMode = DX_MOVIESURFACE_NORMAL);
int  __stdcall dx_LoadBmpToGraphWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  TextureFlag, int  ReverseFlag, int  SurfaceMode = DX_MOVIESURFACE_NORMAL);
int  __stdcall dx_LoadGraph( const TCHAR * FileName, int  NotUse3DFlag = FALSE);
int  __stdcall dx_LoadGraphWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  NotUse3DFlag = FALSE);
int  __stdcall dx_LoadReverseGraph( const TCHAR * FileName, int  NotUse3DFlag = FALSE);
int  __stdcall dx_LoadReverseGraphWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  NotUse3DFlag = FALSE);
int  __stdcall dx_LoadDivGraph( const TCHAR * FileName, int  AllNum, int  XNum, int  YNum, int  XSize, int  YSize, int *  HandleArray, int  NotUse3DFlag = FALSE);
int  __stdcall dx_LoadDivGraphWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  AllNum, int  XNum, int  YNum, int  XSize, int  YSize, int *  HandleArray, int  NotUse3DFlag = FALSE);
int  __stdcall dx_LoadDivGraphF( const TCHAR * FileName, int  AllNum, int  XNum, int  YNum, float  XSize, float  YSize, int *  HandleArray, int  NotUse3DFlag = FALSE);
int  __stdcall dx_LoadDivGraphFWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  AllNum, int  XNum, int  YNum, float  XSize, float  YSize, int *  HandleArray, int  NotUse3DFlag = FALSE);
int  __stdcall dx_LoadDivBmpToGraph( const TCHAR * FileName, int  AllNum, int  XNum, int  YNum, int  SizeX, int  SizeY, int *  HandleArray, int  TextureFlag, int  ReverseFlag);
int  __stdcall dx_LoadDivBmpToGraphWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  AllNum, int  XNum, int  YNum, int  SizeX, int  SizeY, int *  HandleArray, int  TextureFlag, int  ReverseFlag);
int  __stdcall dx_LoadDivBmpToGraphF( const TCHAR * FileName, int  AllNum, int  XNum, int  YNum, float  SizeX, float  SizeY, int *  HandleArray, int  TextureFlag, int  ReverseFlag);
int  __stdcall dx_LoadDivBmpToGraphFWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  AllNum, int  XNum, int  YNum, float  SizeX, float  SizeY, int *  HandleArray, int  TextureFlag, int  ReverseFlag);
int  __stdcall dx_LoadReverseDivGraph( const TCHAR * FileName, int  AllNum, int  XNum, int  YNum, int  XSize, int  YSize, int *  HandleArray, int  NotUse3DFlag = FALSE);
int  __stdcall dx_LoadReverseDivGraphWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  AllNum, int  XNum, int  YNum, int  XSize, int  YSize, int *  HandleArray, int  NotUse3DFlag = FALSE);
int  __stdcall dx_LoadReverseDivGraphF( const TCHAR * FileName, int  AllNum, int  XNum, int  YNum, float  XSize, float  YSize, int *  HandleArray, int  NotUse3DFlag = FALSE);
int  __stdcall dx_LoadReverseDivGraphFWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  AllNum, int  XNum, int  YNum, float  XSize, float  YSize, int *  HandleArray, int  NotUse3DFlag = FALSE);
int  __stdcall dx_LoadBlendGraph( const TCHAR * FileName);
int  __stdcall dx_LoadBlendGraphWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_CreateGraphFromMem( const void * RGBFileImage, int  RGBFileImageSize, const void * AlphaFileImage = NULL, int  AlphaFileImageSize = 0, int  TextureFlag = TRUE, int  ReverseFlag = FALSE);
int  __stdcall dx_ReCreateGraphFromMem( const void * RGBFileImage, int  RGBFileImageSize, int  GrHandle, const void * AlphaFileImage = NULL, int  AlphaFileImageSize = 0, int  TextureFlag = TRUE, int  ReverseFlag = FALSE);
int  __stdcall dx_CreateDivGraphFromMem( const void * RGBFileImage, int  RGBFileImageSize, int  AllNum, int  XNum, int  YNum, int  SizeX, int  SizeY, int *  HandleArray, int  TextureFlag = TRUE, int  ReverseFlag = FALSE, const void * AlphaFileImage = NULL, int  AlphaFileImageSize = 0);
int  __stdcall dx_CreateDivGraphFFromMem( const void * RGBFileImage, int  RGBFileImageSize, int  AllNum, int  XNum, int  YNum, float  SizeX, float  SizeY, int *  HandleArray, int  TextureFlag = TRUE, int  ReverseFlag = FALSE, const void * AlphaFileImage = NULL, int  AlphaFileImageSize = 0);
int  __stdcall dx_ReCreateDivGraphFromMem( const void * RGBFileImage, int  RGBFileImageSize, int  AllNum, int  XNum, int  YNum, int  SizeX, int  SizeY, const int *  HandleArray, int  TextureFlag = TRUE, int  ReverseFlag = FALSE, const void * AlphaFileImage = NULL, int  AlphaFileImageSize = 0);
int  __stdcall dx_ReCreateDivGraphFFromMem( const void * RGBFileImage, int  RGBFileImageSize, int  AllNum, int  XNum, int  YNum, float  SizeX, float  SizeY, const int *  HandleArray, int  TextureFlag = TRUE, int  ReverseFlag = FALSE, const void * AlphaFileImage = NULL, int  AlphaFileImageSize = 0);
int __stdcall dx_CreateGraphFromBmp( const BITMAPINFO * RGBBmpInfo , const void * RGBBmpImage , const BITMAPINFO * AlphaBmpInfo = NULL , const void * AlphaBmpImage = NULL , int TextureFlag = TRUE , int ReverseFlag = FALSE ) ;
int __stdcall dx_ReCreateGraphFromBmp( const BITMAPINFO * RGBBmpInfo , const void * RGBBmpImage , int GrHandle , const BITMAPINFO * AlphaBmpInfo = NULL , const void * AlphaBmpImage = NULL , int TextureFlag = TRUE , int ReverseFlag = FALSE ) ;
int __stdcall dx_CreateDivGraphFromBmp( const BITMAPINFO * RGBBmpInfo , const void * RGBBmpImage , int AllNum , int XNum , int YNum , int SizeX , int SizeY , int * HandleArray , int TextureFlag = TRUE , int ReverseFlag = FALSE , const BITMAPINFO * AlphaBmpInfo = NULL , const void * AlphaBmpImage = NULL ) ;
int __stdcall dx_CreateDivGraphFFromBmp( const BITMAPINFO * RGBBmpInfo , const void * RGBBmpImage , int AllNum , int XNum , int YNum , float SizeX , float SizeY , int * HandleArray , int TextureFlag = TRUE , int ReverseFlag = FALSE , const BITMAPINFO * AlphaBmpInfo = NULL , const void * AlphaBmpImage = NULL ) ;
int __stdcall dx_ReCreateDivGraphFromBmp( const BITMAPINFO * RGBBmpInfo , const void * RGBBmpImage , int AllNum , int XNum , int YNum , int SizeX , int SizeY , const int * HandleArray , int TextureFlag = TRUE , int ReverseFlag = FALSE , const BITMAPINFO * AlphaBmpInfo = NULL , const void * AlphaBmpImage = NULL ) ;
int __stdcall dx_ReCreateDivGraphFFromBmp( const BITMAPINFO * RGBBmpInfo , const void * RGBBmpImage , int AllNum , int XNum , int YNum , float SizeX , float SizeY , const int * HandleArray , int TextureFlag = TRUE , int ReverseFlag = FALSE , const BITMAPINFO * AlphaBmpInfo = NULL , const void * AlphaBmpImage = NULL ) ;
int __stdcall dx_CreateDXGraph( const BASEIMAGE * RgbBaseImage , const BASEIMAGE * AlphaBaseImage , int TextureFlag ) ;
int __stdcall dx_CreateGraphFromGraphImage( const BASEIMAGE * RgbBaseImage , int TextureFlag = TRUE , int ReverseFlag = FALSE ) ;
int __stdcall dx_CreateGraphFromGraphImage_2( const BASEIMAGE * RgbBaseImage , const BASEIMAGE * AlphaBaseImage , int TextureFlag = TRUE , int ReverseFlag = FALSE ) ;
int __stdcall dx_ReCreateGraphFromGraphImage( const BASEIMAGE * RgbBaseImage , int GrHandle , int TextureFlag = TRUE , int ReverseFlag = FALSE ) ;
int __stdcall dx_ReCreateGraphFromGraphImage_2( const BASEIMAGE * RgbBaseImage , const BASEIMAGE * AlphaBaseImage , int GrHandle , int TextureFlag = TRUE , int ReverseFlag = FALSE ) ;
int __stdcall dx_CreateDivGraphFromGraphImage( BASEIMAGE * RgbBaseImage , int AllNum , int XNum , int YNum , int SizeX , int SizeY , int * HandleArray , int TextureFlag = TRUE , int ReverseFlag = FALSE ) ;
int __stdcall dx_CreateDivGraphFFromGraphImage( BASEIMAGE * RgbBaseImage , int AllNum , int XNum , int YNum , float SizeX , float SizeY , int * HandleArray , int TextureFlag = TRUE , int ReverseFlag = FALSE ) ;
int __stdcall dx_CreateDivGraphFromGraphImage_2( BASEIMAGE * RgbBaseImage , const BASEIMAGE * AlphaBaseImage , int AllNum , int XNum , int YNum , int SizeX , int SizeY , int * HandleArray , int TextureFlag = TRUE , int ReverseFlag = FALSE ) ;
int __stdcall dx_CreateDivGraphFFromGraphImage_2( BASEIMAGE * RgbBaseImage , const BASEIMAGE * AlphaBaseImage , int AllNum , int XNum , int YNum , float SizeX , float SizeY , int * HandleArray , int TextureFlag = TRUE , int ReverseFlag = FALSE ) ;
int __stdcall dx_ReCreateDivGraphFromGraphImage( BASEIMAGE * RgbBaseImage , int AllNum , int XNum , int YNum , int SizeX , int SizeY , const int * HandleArray , int TextureFlag = TRUE , int ReverseFlag = FALSE ) ;
int __stdcall dx_ReCreateDivGraphFFromGraphImage( BASEIMAGE * RgbBaseImage , int AllNum , int XNum , int YNum , float SizeX , float SizeY , const int * HandleArray , int TextureFlag = TRUE , int ReverseFlag = FALSE ) ;
int __stdcall dx_ReCreateDivGraphFromGraphImage_2( BASEIMAGE * RgbBaseImage , const BASEIMAGE * AlphaBaseImage , int AllNum , int XNum , int YNum , int SizeX , int SizeY , const int * HandleArray , int TextureFlag = TRUE , int ReverseFlag = FALSE ) ;
int __stdcall dx_ReCreateDivGraphFFromGraphImage_2( BASEIMAGE * RgbBaseImage , const BASEIMAGE * AlphaBaseImage , int AllNum , int XNum , int YNum , float SizeX , float SizeY , const int * HandleArray , int TextureFlag = TRUE , int ReverseFlag = FALSE ) ;
int  __stdcall dx_CreateGraph( int  Width, int  Height, int  Pitch, const void * RGBImage, const void * AlphaImage = NULL, int  GrHandle = -1);
int  __stdcall dx_CreateDivGraph( int  Width, int  Height, int  Pitch, const void * RGBImage, int  AllNum, int  XNum, int  YNum, int  SizeX, int  SizeY, int *  HandleArray, const void * AlphaImage = NULL);
int  __stdcall dx_CreateDivGraphF( int  Width, int  Height, int  Pitch, const void * RGBImage, int  AllNum, int  XNum, int  YNum, float  SizeX, float  SizeY, int *  HandleArray, const void * AlphaImage = NULL);
int  __stdcall dx_ReCreateGraph( int  Width, int  Height, int  Pitch, const void * RGBImage, int  GrHandle, const void * AlphaImage = NULL);
int  __stdcall dx_CreateBlendGraphFromSoftImage( int  SIHandle);
int  __stdcall dx_CreateGraphFromSoftImage( int  SIHandle);
int  __stdcall dx_CreateGraphFromRectSoftImage( int  SIHandle, int  x, int  y, int  SizeX, int  SizeY);
int  __stdcall dx_ReCreateGraphFromSoftImage( int  SIHandle, int  GrHandle);
int  __stdcall dx_ReCreateGraphFromRectSoftImage( int  SIHandle, int  x, int  y, int  SizeX, int  SizeY, int  GrHandle);
int  __stdcall dx_CreateDivGraphFromSoftImage( int  SIHandle, int  AllNum, int  XNum, int  YNum, int  SizeX, int  SizeY, int *  HandleArray);
int  __stdcall dx_CreateDivGraphFFromSoftImage( int  SIHandle, int  AllNum, int  XNum, int  YNum, float  SizeX, float  SizeY, int *  HandleArray);
int  __stdcall dx_ReCreateDivGraphFromSoftImage( int  SIHandle, int  AllNum, int  XNum, int  YNum, int  SizeX, int  SizeY, const int *  HandleArray);
int  __stdcall dx_ReCreateDivGraphFFromSoftImage( int  SIHandle, int  AllNum, int  XNum, int  YNum, float  SizeX, float  SizeY, const int *  HandleArray);
int __stdcall dx_CreateGraphFromBaseImage( const BASEIMAGE * BaseImage ) ;
int __stdcall dx_CreateGraphFromRectBaseImage( const BASEIMAGE * BaseImage , int x , int y , int SizeX , int SizeY ) ;
int __stdcall dx_ReCreateGraphFromBaseImage( const BASEIMAGE * BaseImage , int GrHandle ) ;
int __stdcall dx_ReCreateGraphFromRectBaseImage( const BASEIMAGE * BaseImage , int x , int y , int SizeX , int SizeY , int GrHandle ) ;
int __stdcall dx_CreateDivGraphFromBaseImage( BASEIMAGE * BaseImage , int AllNum , int XNum , int YNum , int SizeX , int SizeY , int * HandleArray ) ;
int __stdcall dx_CreateDivGraphFFromBaseImage( BASEIMAGE * BaseImage , int AllNum , int XNum , int YNum , float SizeX , float SizeY , int * HandleArray ) ;
int __stdcall dx_ReCreateDivGraphFromBaseImage( BASEIMAGE * BaseImage , int AllNum , int XNum , int YNum , int SizeX , int SizeY , const int * HandleArray ) ;
int __stdcall dx_ReCreateDivGraphFFromBaseImage( BASEIMAGE * BaseImage , int AllNum , int XNum , int YNum , float SizeX , float SizeY , const int * HandleArray ) ;
int  __stdcall dx_ReloadGraph( const TCHAR * FileName, int  GrHandle, int  ReverseFlag = FALSE);
int  __stdcall dx_ReloadGraphWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  GrHandle, int  ReverseFlag = FALSE);
int  __stdcall dx_ReloadDivGraph( const TCHAR * FileName, int  AllNum, int  XNum, int  YNum, int  XSize, int  YSize, const int *  HandleArray, int  ReverseFlag = FALSE);
int  __stdcall dx_ReloadDivGraphWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  AllNum, int  XNum, int  YNum, int  XSize, int  YSize, const int *  HandleArray, int  ReverseFlag = FALSE);
int  __stdcall dx_ReloadDivGraphF( const TCHAR * FileName, int  AllNum, int  XNum, int  YNum, float  XSize, float  YSize, const int *  HandleArray, int  ReverseFlag = FALSE);
int  __stdcall dx_ReloadDivGraphFWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  AllNum, int  XNum, int  YNum, float  XSize, float  YSize, const int *  HandleArray, int  ReverseFlag = FALSE);
int  __stdcall dx_ReloadReverseGraph( const TCHAR * FileName, int  GrHandle);
int  __stdcall dx_ReloadReverseGraphWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  GrHandle);
int  __stdcall dx_ReloadReverseDivGraph( const TCHAR * FileName, int  AllNum, int  XNum, int  YNum, int  XSize, int  YSize, const int *  HandleArray);
int  __stdcall dx_ReloadReverseDivGraphWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  AllNum, int  XNum, int  YNum, int  XSize, int  YSize, const int *  HandleArray);
int  __stdcall dx_ReloadReverseDivGraphF( const TCHAR * FileName, int  AllNum, int  XNum, int  YNum, float  XSize, float  YSize, const int *  HandleArray);
int  __stdcall dx_ReloadReverseDivGraphFWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  AllNum, int  XNum, int  YNum, float  XSize, float  YSize, const int *  HandleArray);
int  __stdcall dx_SetGraphColorBitDepth( int  ColorBitDepth);
int  __stdcall dx_GetGraphColorBitDepth( void);
int  __stdcall dx_SetCreateGraphColorBitDepth( int  BitDepth);
int  __stdcall dx_GetCreateGraphColorBitDepth( void);
int  __stdcall dx_SetCreateGraphChannelBitDepth( int  BitDepth);
int  __stdcall dx_GetCreateGraphChannelBitDepth( void);
int  __stdcall dx_SetDrawValidGraphCreateFlag( int  Flag);
int  __stdcall dx_GetDrawValidGraphCreateFlag( void);
int  __stdcall dx_SetDrawValidFlagOf3DGraph( int  Flag);
int  __stdcall dx_SetLeftUpColorIsTransColorFlag( int  Flag);
int  __stdcall dx_SetUsePaletteGraphFlag( int  Flag);
int  __stdcall dx_SetUseBlendGraphCreateFlag( int  Flag);
int  __stdcall dx_GetUseBlendGraphCreateFlag( void);
int  __stdcall dx_SetUseAlphaTestGraphCreateFlag( int  Flag);
int  __stdcall dx_GetUseAlphaTestGraphCreateFlag( void);
int  __stdcall dx_SetUseAlphaTestFlag( int  Flag);
int  __stdcall dx_GetUseAlphaTestFlag( void);
int  __stdcall dx_SetCubeMapTextureCreateFlag( int  Flag);
int  __stdcall dx_GetCubeMapTextureCreateFlag( void);
int  __stdcall dx_SetUseNoBlendModeParam( int  Flag);
int  __stdcall dx_SetDrawValidAlphaChannelGraphCreateFlag( int  Flag);
int  __stdcall dx_GetDrawValidAlphaChannelGraphCreateFlag( void);
int  __stdcall dx_SetDrawValidFloatTypeGraphCreateFlag( int  Flag);
int  __stdcall dx_GetDrawValidFloatTypeGraphCreateFlag( void);
int  __stdcall dx_SetDrawValidGraphCreateZBufferFlag( int  Flag);
int  __stdcall dx_GetDrawValidGraphCreateZBufferFlag( void);
int  __stdcall dx_SetCreateDrawValidGraphZBufferBitDepth( int  BitDepth);
int  __stdcall dx_GetCreateDrawValidGraphZBufferBitDepth( void);
int  __stdcall dx_SetCreateDrawValidGraphMipLevels( int  MipLevels);
int  __stdcall dx_GetCreateDrawValidGraphMipLevels( void);
int  __stdcall dx_SetCreateDrawValidGraphChannelNum( int  ChannelNum);
int  __stdcall dx_GetCreateDrawValidGraphChannelNum( void);
int  __stdcall dx_SetCreateDrawValidGraphMultiSample( int  Samples, int  Quality);
int  __stdcall dx_SetDrawValidMultiSample( int  Samples, int  Quality);
int  __stdcall dx_GetMultiSampleQuality( int  Samples);
int  __stdcall dx_SetUseTransColor( int  Flag);
int  __stdcall dx_SetUseTransColorGraphCreateFlag( int  Flag);
int  __stdcall dx_SetUseGraphAlphaChannel( int  Flag);
int  __stdcall dx_GetUseGraphAlphaChannel( void);
int  __stdcall dx_SetUseAlphaChannelGraphCreateFlag( int  Flag);
int  __stdcall dx_GetUseAlphaChannelGraphCreateFlag( void);
int  __stdcall dx_SetUseNotManageTextureFlag( int  Flag);
int  __stdcall dx_GetUseNotManageTextureFlag( void);
int  __stdcall dx_SetUsePlatformTextureFormat( int  PlatformTextureFormat);
int  __stdcall dx_GetUsePlatformTextureFormat( void);
int  __stdcall dx_SetTransColor( int  Red, int  Green, int  Blue);
int  __stdcall dx_GetTransColor( int *  Red, int *  Green, int *  Blue);
int  __stdcall dx_SetUseDivGraphFlag( int  Flag);
int  __stdcall dx_SetUseAlphaImageLoadFlag( int  Flag);
int  __stdcall dx_SetUseMaxTextureSize( int  Size);
int  __stdcall dx_SetUseGraphBaseDataBackup( int  Flag);
int  __stdcall dx_GetUseGraphBaseDataBackup( void);
int  __stdcall dx_SetUseSystemMemGraphCreateFlag( int  Flag);
int  __stdcall dx_GetUseSystemMemGraphCreateFlag( void);
const unsigned int * __stdcall dx_GetFullColorImage( int GrHandle ) ;
int __stdcall dx_GraphLock( int GrHandle , int * PitchBuf , void * * DataPointBuf , COLORDATA * * ColorDataPP = NULL , int WriteOnly = FALSE ) ;
int  __stdcall dx_GraphUnLock( int  GrHandle);
int  __stdcall dx_SetUseGraphZBuffer( int  GrHandle, int  UseFlag, int  BitDepth = -1);
int  __stdcall dx_CopyGraphZBufferImage( int  DestGrHandle, int  SrcGrHandle);
int  __stdcall dx_SetDeviceLostDeleteGraphFlag( int  GrHandle, int  DeleteFlag);
int  __stdcall dx_GetGraphSize( int  GrHandle, int *  SizeXBuf, int *  SizeYBuf);
int  __stdcall dx_GetGraphSizeF( int  GrHandle, float *  SizeXBuf, float *  SizeYBuf);
int  __stdcall dx_GetGraphTextureSize( int  GrHandle, int *  SizeXBuf, int *  SizeYBuf);
int  __stdcall dx_GetGraphUseBaseGraphArea( int  GrHandle, int *  UseX, int *  UseY, int *  UseSizeX, int *  UseSizeY);
int  __stdcall dx_GetGraphMipmapCount( int  GrHandle);
int  __stdcall dx_GetGraphFilePath( int  GrHandle, TCHAR *  FilePathBuffer);
int  __stdcall dx_CheckDrawValidGraph( int  GrHandle);
const COLORDATA * __stdcall dx_GetTexColorData( int AlphaCh , int AlphaTest , int ColorBitDepth , int DrawValid = FALSE ) ;
const COLORDATA * __stdcall dx_GetTexColorData_2( const IMAGEFORMATDESC * Format ) ;
const COLORDATA * __stdcall dx_GetTexColorData_3( int FormatIndex ) ;
int  __stdcall dx_GetMaxGraphTextureSize( int *  SizeX, int *  SizeY);
int  __stdcall dx_GetValidRestoreShredPoint( void);
int  __stdcall dx_GetCreateGraphColorData( COLORDATA *  ColorData, IMAGEFORMATDESC *  Format);
int  __stdcall dx_GetGraphPalette( int  GrHandle, int  ColorIndex, int *  Red, int *  Green, int *  Blue);
int  __stdcall dx_GetGraphOriginalPalette( int  GrHandle, int  ColorIndex, int *  Red, int *  Green, int *  Blue);
int  __stdcall dx_SetGraphPalette( int  GrHandle, int  ColorIndex, unsigned int  Color);
int  __stdcall dx_ResetGraphPalette( int  GrHandle);
int  __stdcall dx_DrawLine( int  x1, int  y1, int  x2, int  y2, unsigned int  Color, int  Thickness = 1);
int  __stdcall dx_DrawLineAA( float  x1, float  y1, float  x2, float  y2, unsigned int  Color, float  Thickness = 1.0f);
int  __stdcall dx_DrawBox( int  x1, int  y1, int  x2, int  y2, unsigned int  Color, int  FillFlag);
int  __stdcall dx_DrawBoxAA( float  x1, float  y1, float  x2, float  y2, unsigned int  Color, int  FillFlag, float  LineThickness = 1.0f);
int  __stdcall dx_DrawFillBox( int  x1, int  y1, int  x2, int  y2, unsigned int  Color);
int  __stdcall dx_DrawLineBox( int  x1, int  y1, int  x2, int  y2, unsigned int  Color);
int  __stdcall dx_DrawCircle( int  x, int  y, int  r, unsigned int  Color, int  FillFlag = TRUE, int  LineThickness = 1);
int  __stdcall dx_DrawCircleAA( float  x, float  y, float  r, int  posnum, unsigned int  Color, int  FillFlag = TRUE, float  LineThickness = 1.0f);
int  __stdcall dx_DrawOval( int  x, int  y, int  rx, int  ry, unsigned int  Color, int  FillFlag, int  LineThickness = 1);
int  __stdcall dx_DrawOvalAA( float  x, float  y, float  rx, float  ry, int  posnum, unsigned int  Color, int  FillFlag, float  LineThickness = 1.0f);
int  __stdcall dx_DrawOval_Rect( int  x1, int  y1, int  x2, int  y2, unsigned int  Color, int  FillFlag);
int  __stdcall dx_DrawTriangle( int  x1, int  y1, int  x2, int  y2, int  x3, int  y3, unsigned int  Color, int  FillFlag);
int  __stdcall dx_DrawTriangleAA( float  x1, float  y1, float  x2, float  y2, float  x3, float  y3, unsigned int  Color, int  FillFlag, float  LineThickness = 1.0f);
int  __stdcall dx_DrawQuadrangle( int  x1, int  y1, int  x2, int  y2, int  x3, int  y3, int  x4, int  y4, unsigned int  Color, int  FillFlag);
int  __stdcall dx_DrawQuadrangleAA( float  x1, float  y1, float  x2, float  y2, float  x3, float  y3, float  x4, float  y4, unsigned int  Color, int  FillFlag, float  LineThickness = 1.0f);
int  __stdcall dx_DrawRoundRect( int  x1, int  y1, int  x2, int  y2, int  rx, int  ry, unsigned int  Color, int  FillFlag);
int  __stdcall dx_DrawRoundRectAA( float  x1, float  y1, float  x2, float  y2, float  rx, float  ry, int  posnum, unsigned int  Color, int  FillFlag, float  LineThickness = 1.0f);
int  __stdcall dx_BeginAADraw( void);
int  __stdcall dx_EndAADraw( void);
int  __stdcall dx_DrawPixel( int  x, int  y, unsigned int  Color);
int  __stdcall dx_DrawPixelSet( const POINTDATA *  PointDataArray, int  Num);
int  __stdcall dx_DrawLineSet( const LINEDATA *  LineDataArray, int  Num);
int  __stdcall dx_DrawPixel3D( VECTOR  Pos, unsigned int  Color);
int  __stdcall dx_DrawPixel3DD( VECTOR_D  Pos, unsigned int  Color);
int  __stdcall dx_DrawLine3D( VECTOR  Pos1, VECTOR  Pos2, unsigned int  Color);
int  __stdcall dx_DrawLine3DD( VECTOR_D  Pos1, VECTOR_D  Pos2, unsigned int  Color);
int  __stdcall dx_DrawTriangle3D( VECTOR  Pos1, VECTOR  Pos2, VECTOR  Pos3, unsigned int  Color, int  FillFlag);
int  __stdcall dx_DrawTriangle3DD( VECTOR_D  Pos1, VECTOR_D  Pos2, VECTOR_D  Pos3, unsigned int  Color, int  FillFlag);
int  __stdcall dx_DrawCube3D( VECTOR  Pos1, VECTOR  Pos2, unsigned int  DifColor, unsigned int  SpcColor, int  FillFlag);
int  __stdcall dx_DrawCube3DD( VECTOR_D  Pos1, VECTOR_D  Pos2, unsigned int  DifColor, unsigned int  SpcColor, int  FillFlag);
int  __stdcall dx_DrawSphere3D( VECTOR  CenterPos, float  r, int  DivNum, unsigned int  DifColor, unsigned int  SpcColor, int  FillFlag);
int  __stdcall dx_DrawSphere3DD( VECTOR_D  CenterPos, double  r, int  DivNum, unsigned int  DifColor, unsigned int  SpcColor, int  FillFlag);
int  __stdcall dx_DrawCapsule3D( VECTOR  Pos1, VECTOR  Pos2, float  r, int  DivNum, unsigned int  DifColor, unsigned int  SpcColor, int  FillFlag);
int  __stdcall dx_DrawCapsule3DD( VECTOR_D  Pos1, VECTOR_D  Pos2, double  r, int  DivNum, unsigned int  DifColor, unsigned int  SpcColor, int  FillFlag);
int  __stdcall dx_DrawCone3D( VECTOR  TopPos, VECTOR  BottomPos, float  r, int  DivNum, unsigned int  DifColor, unsigned int  SpcColor, int  FillFlag);
int  __stdcall dx_DrawCone3DD( VECTOR_D  TopPos, VECTOR_D  BottomPos, double  r, int  DivNum, unsigned int  DifColor, unsigned int  SpcColor, int  FillFlag);
int  __stdcall dx_LoadGraphScreen( int  x, int  y, const TCHAR * GraphName, int  TransFlag);
int  __stdcall dx_LoadGraphScreenWithStrLen( int  x, int  y, const TCHAR * GraphName, size_t  GraphNameLength, int  TransFlag);
int  __stdcall dx_DrawGraph( int  x, int  y, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawExtendGraph( int  x1, int  y1, int  x2, int  y2, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawRotaGraph( int  x, int  y, double  ExRate, double  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRotaGraph2( int  x, int  y, int  cx, int  cy, double  ExtRate, double  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRotaGraph3( int  x, int  y, int  cx, int  cy, double  ExtRateX, double  ExtRateY, double  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRotaGraphFast( int  x, int  y, float  ExRate, float  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRotaGraphFast2( int  x, int  y, int  cx, int  cy, float  ExtRate, float  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRotaGraphFast3( int  x, int  y, int  cx, int  cy, float  ExtRateX, float  ExtRateY, float  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawModiGraph( int  x1, int  y1, int  x2, int  y2, int  x3, int  y3, int  x4, int  y4, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawTurnGraph( int  x, int  y, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawReverseGraph( int  x, int  y, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawGraphF( float  xf, float  yf, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawExtendGraphF( float  x1f, float  y1f, float  x2f, float  y2, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawRotaGraphF( float  xf, float  yf, double  ExRate, double  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRotaGraph2F( float  xf, float  yf, float  cxf, float  cyf, double  ExtRate, double  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRotaGraph3F( float  xf, float  yf, float  cxf, float  cyf, double  ExtRateX, double  ExtRateY, double  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRotaGraphFastF( float  xf, float  yf, float  ExRate, float  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRotaGraphFast2F( float  xf, float  yf, float  cxf, float  cyf, float  ExtRate, float  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRotaGraphFast3F( float  xf, float  yf, float  cxf, float  cyf, float  ExtRateX, float  ExtRateY, float  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawModiGraphF( float  x1, float  y1, float  x2, float  y2, float  x3, float  y3, float  x4, float  y4, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawTurnGraphF( float  xf, float  yf, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawReverseGraphF( float  xf, float  yf, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int __stdcall dx_DrawChipMap( int Sx , int Sy , int XNum , int YNum , const int * MapData , int ChipTypeNum , int MapDataPitch , const int * ChipGrHandle , int TransFlag ) ;
int __stdcall dx_DrawChipMap_2( int MapWidth , int MapHeight , const int * MapData , int ChipTypeNum , const int * ChipGrHandle , int TransFlag , int MapDrawPointX , int MapDrawPointY , int MapDrawWidth , int MapDrawHeight , int ScreenX , int ScreenY ) ;
int  __stdcall dx_DrawTile( int  x1, int  y1, int  x2, int  y2, int  Tx, int  Ty, double  ExtRate, double  Angle, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawRectGraph( int  DestX, int  DestY, int  SrcX, int  SrcY, int  Width, int  Height, int  GraphHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRectExtendGraph( int  DestX1, int  DestY1, int  DestX2, int  DestY2, int  SrcX, int  SrcY, int  SrcWidth, int  SrcHeight, int  GraphHandle, int  TransFlag);
int  __stdcall dx_DrawRectRotaGraph( int  x, int  y, int  SrcX, int  SrcY, int  Width, int  Height, double  ExtRate, double  Angle, int  GraphHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRectRotaGraph2( int  x, int  y, int  SrcX, int  SrcY, int  Width, int  Height, int  cx, int  cy, double  ExtRate, double  Angle, int  GraphHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRectRotaGraph3( int  x, int  y, int  SrcX, int  SrcY, int  Width, int  Height, int  cx, int  cy, double  ExtRateX, double  ExtRateY, double  Angle, int  GraphHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRectRotaGraphFast( int  x, int  y, int  SrcX, int  SrcY, int  Width, int  Height, float  ExtRate, float  Angle, int  GraphHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRectRotaGraphFast2( int  x, int  y, int  SrcX, int  SrcY, int  Width, int  Height, int  cx, int  cy, float  ExtRate, float  Angle, int  GraphHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRectRotaGraphFast3( int  x, int  y, int  SrcX, int  SrcY, int  Width, int  Height, int  cx, int  cy, float  ExtRateX, float  ExtRateY, float  Angle, int  GraphHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRectModiGraph( int  x1, int  y1, int  x2, int  y2, int  x3, int  y3, int  x4, int  y4, int  SrcX, int  SrcY, int  Width, int  Height, int  GraphHandle, int  TransFlag);
int  __stdcall dx_DrawRectGraphF( float  DestX, float  DestY, int  SrcX, int  SrcY, int  Width, int  Height, int  GraphHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRectExtendGraphF( float  DestX1, float  DestY1, float  DestX2, float  DestY2, int  SrcX, int  SrcY, int  SrcWidth, int  SrcHeight, int  GraphHandle, int  TransFlag);
int  __stdcall dx_DrawRectRotaGraphF( float  x, float  y, int  SrcX, int  SrcY, int  Width, int  Height, double  ExtRate, double  Angle, int  GraphHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRectRotaGraph2F( float  x, float  y, int  SrcX, int  SrcY, int  Width, int  Height, float  cxf, float  cyf, double  ExtRate, double  Angle, int  GraphHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRectRotaGraph3F( float  x, float  y, int  SrcX, int  SrcY, int  Width, int  Height, float  cxf, float  cyf, double  ExtRateX, double  ExtRateY, double  Angle, int  GraphHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRectRotaGraphFastF( float  x, float  y, int  SrcX, int  SrcY, int  Width, int  Height, float  ExtRate, float  Angle, int  GraphHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRectRotaGraphFast2F( float  x, float  y, int  SrcX, int  SrcY, int  Width, int  Height, float  cxf, float  cyf, float  ExtRate, float  Angle, int  GraphHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRectRotaGraphFast3F( float  x, float  y, int  SrcX, int  SrcY, int  Width, int  Height, float  cxf, float  cyf, float  ExtRateX, float  ExtRateY, float  Angle, int  GraphHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRectModiGraphF( float  x1, float  y1, float  x2, float  y2, float  x3, float  y3, float  x4, float  y4, int  SrcX, int  SrcY, int  Width, int  Height, int  GraphHandle, int  TransFlag);
int  __stdcall dx_DrawBlendGraph( int  x, int  y, int  GrHandle, int  TransFlag, int  BlendGraph, int  BorderParam, int  BorderRange);
int  __stdcall dx_DrawBlendGraphPos( int  x, int  y, int  GrHandle, int  TransFlag, int  bx, int  by, int  BlendGraph, int  BorderParam, int  BorderRange);
int  __stdcall dx_DrawCircleGauge( int  CenterX, int  CenterY, double  Percent, int  GrHandle, double  StartPercent = 0.0, double  Scale = 1.0, int  ReverseX = FALSE, int  ReverseY = FALSE);
int  __stdcall dx_DrawGraphToZBuffer( int  X, int  Y, int  GrHandle, int  WriteZMode);
int  __stdcall dx_DrawTurnGraphToZBuffer( int  x, int  y, int  GrHandle, int  WriteZMode);
int  __stdcall dx_DrawReverseGraphToZBuffer( int  x, int  y, int  GrHandle, int  WriteZMode, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawExtendGraphToZBuffer( int  x1, int  y1, int  x2, int  y2, int  GrHandle, int  WriteZMode);
int  __stdcall dx_DrawRotaGraphToZBuffer( int  x, int  y, double  ExRate, double  Angle, int  GrHandle, int  WriteZMode, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRotaGraph2ToZBuffer( int  x, int  y, int  cx, int  cy, double  ExtRate, double  Angle, int  GrHandle, int  WriteZMode, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRotaGraph3ToZBuffer( int  x, int  y, int  cx, int  cy, double  ExtRateX, double  ExtRateY, double  Angle, int  GrHandle, int  WriteZMode, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRotaGraphFastToZBuffer( int  x, int  y, float  ExRate, float  Angle, int  GrHandle, int  WriteZMode, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRotaGraphFast2ToZBuffer( int  x, int  y, int  cx, int  cy, float  ExtRate, float  Angle, int  GrHandle, int  WriteZMode, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRotaGraphFast3ToZBuffer( int  x, int  y, int  cx, int  cy, float  ExtRateX, float  ExtRateY, float  Angle, int  GrHandle, int  WriteZMode, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawModiGraphToZBuffer( int  x1, int  y1, int  x2, int  y2, int  x3, int  y3, int  x4, int  y4, int  GrHandle, int  WriteZMode);
int  __stdcall dx_DrawBoxToZBuffer( int  x1, int  y1, int  x2, int  y2, int  FillFlag, int  WriteZMode);
int  __stdcall dx_DrawCircleToZBuffer( int  x, int  y, int  r, int  FillFlag, int  WriteZMode);
int  __stdcall dx_DrawTriangleToZBuffer( int  x1, int  y1, int  x2, int  y2, int  x3, int  y3, int  FillFlag, int  WriteZMode);
int  __stdcall dx_DrawQuadrangleToZBuffer( int  x1, int  y1, int  x2, int  y2, int  x3, int  y3, int  x4, int  y4, int  FillFlag, int  WriteZMode);
int  __stdcall dx_DrawRoundRectToZBuffer( int  x1, int  y1, int  x2, int  y2, int  rx, int  ry, int  FillFlag, int  WriteZMode);
int  __stdcall dx_DrawPolygon( const VERTEX *  VertexArray, int  PolygonNum, int  GrHandle, int  TransFlag, int  UVScaling = FALSE);
int  __stdcall dx_DrawPolygon2D( const VERTEX2D *  VertexArray, int  PolygonNum, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPolygon3D( const VERTEX3D *  VertexArray, int  PolygonNum, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPolygonIndexed2D( const VERTEX2D *  VertexArray, int  VertexNum, const unsigned short *  IndexArray, int  PolygonNum, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPolygonIndexed3D( const VERTEX3D *  VertexArray, int  VertexNum, const unsigned short *  IndexArray, int  PolygonNum, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPolygonIndexed3DBase( const VERTEX_3D *  VertexArray, int  VertexNum, const unsigned short *  IndexArray, int  IndexNum, int  PrimitiveType, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPolygon3DBase( const VERTEX_3D *  VertexArray, int  VertexNum, int  PrimitiveType, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPolygon3D_2( const VERTEX_3D *  VertexArray, int  PolygonNum, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPolygonBase( const VERTEX *  VertexArray, int  VertexNum, int  PrimitiveType, int  GrHandle, int  TransFlag, int  UVScaling = FALSE);
int  __stdcall dx_DrawPrimitive2D( const VERTEX2D *  VertexArray, int  VertexNum, int  PrimitiveType, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPrimitive3D( const VERTEX3D *  VertexArray, int  VertexNum, int  PrimitiveType, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPrimitiveIndexed2D( const VERTEX2D *  VertexArray, int  VertexNum, const unsigned short *  IndexArray, int  IndexNum, int  PrimitiveType, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPrimitiveIndexed3D( const VERTEX3D *  VertexArray, int  VertexNum, const unsigned short *  IndexArray, int  IndexNum, int  PrimitiveType, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPolygon3D_UseVertexBuffer( int  VertexBufHandle, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPrimitive3D_UseVertexBuffer( int  VertexBufHandle, int  PrimitiveType, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPrimitive3D_UseVertexBuffer2( int  VertexBufHandle, int  PrimitiveType, int  StartVertex, int  UseVertexNum, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPolygonIndexed3D_UseVertexBuffer( int  VertexBufHandle, int  IndexBufHandle, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPrimitiveIndexed3D_UseVertexBuffer( int  VertexBufHandle, int  IndexBufHandle, int  PrimitiveType, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawPrimitiveIndexed3D_UseVertexBuffer2( int  VertexBufHandle, int  IndexBufHandle, int  PrimitiveType, int  BaseVertex, int  StartVertex, int  UseVertexNum, int  StartIndex, int  UseIndexNum, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawGraph3D( float  x, float  y, float  z, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawExtendGraph3D( float  x, float  y, float  z, double  ExRateX, double  ExRateY, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawRotaGraph3D( float  x, float  y, float  z, double  ExRate, double  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawRota2Graph3D( float  x, float  y, float  z, float  cx, float  cy, double  ExtRateX, double  ExtRateY, double  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawModiBillboard3D( VECTOR  Pos, float  x1, float  y1, float  x2, float  y2, float  x3, float  y3, float  x4, float  y4, int  GrHandle, int  TransFlag);
int  __stdcall dx_DrawBillboard3D( VECTOR  Pos, float  cx, float  cy, float  Size, float  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_SetDrawMode( int  DrawMode);
int  __stdcall dx_GetDrawMode( void);
int  __stdcall dx_SetDrawBlendMode( int  BlendMode, int  BlendParam);
int  __stdcall dx_GetDrawBlendMode( int *  BlendMode, int *  BlendParam);
int  __stdcall dx_SetDrawAlphaTest( int  TestMode, int  TestParam);
int  __stdcall dx_GetDrawAlphaTest( int *  TestMode, int *  TestParam);
int  __stdcall dx_SetBlendGraph( int  BlendGraph, int  BorderParam, int  BorderRange);
int  __stdcall dx_SetBlendGraphPosition( int  x, int  y);
int  __stdcall dx_SetBlendGraphPositionMode( int  BlendGraphPositionMode);
int  __stdcall dx_SetDrawBright( int  RedBright, int  GreenBright, int  BlueBright);
int  __stdcall dx_GetDrawBright( int *  Red, int *  Green, int *  Blue);
int  __stdcall dx_SetWriteAlphaChannelFlag( int  Flag);
int  __stdcall dx_GetWriteAlphaChannelFlag( void);
int  __stdcall dx_CheckSeparateAlphaBlendEnable( void);
int  __stdcall dx_SetIgnoreDrawGraphColor( int  EnableFlag);
int  __stdcall dx_SetMaxAnisotropy( int  MaxAnisotropy);
int  __stdcall dx_SetUseLarge3DPositionSupport( int  UseFlag);
int  __stdcall dx_SetUseZBufferFlag( int  Flag);
int  __stdcall dx_SetWriteZBufferFlag( int  Flag);
int  __stdcall dx_SetZBufferCmpType( int  CmpType);
int  __stdcall dx_SetZBias( int  Bias);
int  __stdcall dx_SetUseZBuffer3D( int  Flag);
int  __stdcall dx_SetWriteZBuffer3D( int  Flag);
int  __stdcall dx_SetZBufferCmpType3D( int  CmpType);
int  __stdcall dx_SetZBias3D( int  Bias);
int  __stdcall dx_SetDrawZ( float  Z);
int  __stdcall dx_SetDrawArea( int  x1, int  y1, int  x2, int  y2);
int  __stdcall dx_GetDrawArea( RECT *  Rect);
int  __stdcall dx_SetDrawAreaFull( void);
int  __stdcall dx_SetDraw3DScale( float  Scale);
int __stdcall dx_SetRestoreShredPoint( void ( *ShredPoint )( void ) ) ;
int __stdcall dx_SetRestoreGraphCallback( void ( *Callback )( void ) ) ;
int  __stdcall dx_RunRestoreShred( void);
int __stdcall dx_SetGraphicsDeviceRestoreCallbackFunction( void ( *Callback )( void * Data ) , void * CallbackData ) ;
int __stdcall dx_SetGraphicsDeviceLostCallbackFunction( void ( *Callback )( void * Data ) , void * CallbackData ) ;
int  __stdcall dx_SetTransformTo2D( const MATRIX *  Matrix);
int  __stdcall dx_SetTransformTo2DD( const MATRIX_D *  Matrix);
int  __stdcall dx_ResetTransformTo2D( void);
int  __stdcall dx_SetTransformToWorld( const MATRIX *  Matrix);
int  __stdcall dx_SetTransformToWorldD( const MATRIX_D *  Matrix);
int  __stdcall dx_GetTransformToWorldMatrix( MATRIX *  MatBuf);
int  __stdcall dx_GetTransformToWorldMatrixD( MATRIX_D *  MatBuf);
int  __stdcall dx_SetTransformToView( const MATRIX *  Matrix);
int  __stdcall dx_SetTransformToViewD( const MATRIX_D *  Matrix);
int  __stdcall dx_GetTransformToViewMatrix( MATRIX *  MatBuf);
int  __stdcall dx_GetTransformToViewMatrixD( MATRIX_D *  MatBuf);
int  __stdcall dx_SetTransformToProjection( const MATRIX *  Matrix);
int  __stdcall dx_SetTransformToProjectionD( const MATRIX_D *  Matrix);
int  __stdcall dx_GetTransformToProjectionMatrix( MATRIX *  MatBuf);
int  __stdcall dx_GetTransformToProjectionMatrixD( MATRIX_D *  MatBuf);
int  __stdcall dx_SetTransformToViewport( const MATRIX *  Matrix);
int  __stdcall dx_SetTransformToViewportD( const MATRIX_D *  Matrix);
int  __stdcall dx_GetTransformToViewportMatrix( MATRIX *  MatBuf);
int  __stdcall dx_GetTransformToViewportMatrixD( MATRIX_D *  MatBuf);
int  __stdcall dx_GetTransformToAPIViewportMatrix( MATRIX *  MatBuf);
int  __stdcall dx_GetTransformToAPIViewportMatrixD( MATRIX_D *  MatBuf);
int  __stdcall dx_SetDefTransformMatrix( void);
int  __stdcall dx_GetTransformPosition( VECTOR *  LocalPos, float *  x, float *  y);
int  __stdcall dx_GetTransformPositionD( VECTOR_D *  LocalPos, double *  x, double *  y);
float  __stdcall dx_GetBillboardPixelSize( VECTOR  WorldPos, float  WorldSize);
double __stdcall dx_GetBillboardPixelSizeD( VECTOR_D WorldPos , double WorldSize ) ;
VECTOR  __stdcall dx_ConvWorldPosToViewPos( VECTOR  WorldPos);
VECTOR_D  __stdcall dx_ConvWorldPosToViewPosD( VECTOR_D  WorldPos);
VECTOR  __stdcall dx_ConvWorldPosToScreenPos( VECTOR  WorldPos);
VECTOR_D  __stdcall dx_ConvWorldPosToScreenPosD( VECTOR_D  WorldPos);
FLOAT4  __stdcall dx_ConvWorldPosToScreenPosPlusW( VECTOR  WorldPos);
DOUBLE4  __stdcall dx_ConvWorldPosToScreenPosPlusWD( VECTOR_D  WorldPos);
VECTOR  __stdcall dx_ConvScreenPosToWorldPos( VECTOR  ScreenPos);
VECTOR_D  __stdcall dx_ConvScreenPosToWorldPosD( VECTOR_D  ScreenPos);
VECTOR  __stdcall dx_ConvScreenPosToWorldPos_ZLinear( VECTOR  ScreenPos);
VECTOR_D  __stdcall dx_ConvScreenPosToWorldPos_ZLinearD( VECTOR_D  ScreenPos);
int  __stdcall dx_SetUseCullingFlag( int  Flag);
int  __stdcall dx_SetUseBackCulling( int  Flag);
int  __stdcall dx_GetUseBackCulling( void);
int  __stdcall dx_SetTextureAddressMode( int  Mode, int  Stage = -1);
int  __stdcall dx_SetTextureAddressModeUV( int  ModeU, int  ModeV, int  Stage = -1);
int  __stdcall dx_SetTextureAddressTransform( float  TransU, float  TransV, float  ScaleU, float  ScaleV, float  RotCenterU, float  RotCenterV, float  Rotate);
int  __stdcall dx_SetTextureAddressTransformMatrix( MATRIX  Matrix);
int  __stdcall dx_ResetTextureAddressTransform( void);
int  __stdcall dx_SetFogEnable( int  Flag);
int  __stdcall dx_GetFogEnable( void);
int  __stdcall dx_SetFogMode( int  Mode);
int  __stdcall dx_GetFogMode( void);
int  __stdcall dx_SetFogColor( int  r, int  g, int  b);
int  __stdcall dx_GetFogColor( int *  r, int *  g, int *  b);
int  __stdcall dx_SetFogStartEnd( float  start, float  end);
int  __stdcall dx_GetFogStartEnd( float *  start, float *  end);
int  __stdcall dx_SetFogDensity( float  density);
float  __stdcall dx_GetFogDensity( void);
unsigned int  __stdcall dx_GetPixel( int  x, int  y);
COLOR_F  __stdcall dx_GetPixelF( int  x, int  y);
int  __stdcall dx_SetBackgroundColor( int  Red, int  Green, int  Blue, int  Alpha = 0);
int  __stdcall dx_GetBackgroundColor( int *  Red, int *  Green, int *  Blue, int *  Alpha);
int  __stdcall dx_GetDrawScreenGraph( int  x1, int  y1, int  x2, int  y2, int  GrHandle, int  UseClientFlag = TRUE);
int  __stdcall dx_BltDrawValidGraph( int  TargetDrawValidGrHandle, int  x1, int  y1, int  x2, int  y2, int  DestX, int  DestY, int  DestGrHandle);
int  __stdcall dx_ScreenFlip( void);
int  __stdcall dx_ScreenCopy( void);
int  __stdcall dx_WaitVSync( int  SyncNum);
int __stdcall dx_ClearDrawScreen( const RECT * ClearRect = NULL ) ;
int __stdcall dx_ClearDrawScreenZBuffer( const RECT * ClearRect = NULL ) ;
int  __stdcall dx_ClsDrawScreen( void);
int  __stdcall dx_SetDrawScreen( int  DrawScreen);
int  __stdcall dx_GetDrawScreen( void);
int  __stdcall dx_GetActiveGraph( void);
int  __stdcall dx_SetUseSetDrawScreenSettingReset( int  UseFlag);
int  __stdcall dx_GetUseSetDrawScreenSettingReset( void);
int  __stdcall dx_SetDrawZBuffer( int  DrawScreen);
int  __stdcall dx_SetGraphMode( int  ScreenSizeX, int  ScreenSizeY, int  ColorBitDepth, int  RefreshRate = 60);
int  __stdcall dx_SetUserScreenImage( void *  Image, int  PixelFormat);
int  __stdcall dx_SetFullScreenResolutionMode( int  ResolutionMode);
int  __stdcall dx_GetFullScreenResolutionMode( int *  ResolutionMode, int *  UseResolutionMode);
int  __stdcall dx_SetFullScreenScalingMode( int  ScalingMode, int  FitScaling = FALSE);
int  __stdcall dx_SetEmulation320x240( int  Flag);
int  __stdcall dx_SetZBufferSize( int  ZBufferSizeX, int  ZBufferSizeY);
int  __stdcall dx_SetZBufferBitDepth( int  BitDepth);
int  __stdcall dx_SetWaitVSyncFlag( int  Flag);
int  __stdcall dx_GetWaitVSyncFlag( void);
int  __stdcall dx_SetFullSceneAntiAliasingMode( int  Samples, int  Quality);
int  __stdcall dx_SetGraphDisplayArea( int  x1, int  y1, int  x2, int  y2);
int  __stdcall dx_SetChangeScreenModeGraphicsSystemResetFlag( int  Flag);
int  __stdcall dx_GetScreenState( int *  SizeX, int *  SizeY, int *  ColorBitDepth);
int  __stdcall dx_GetDrawScreenSize( int *  XBuf, int *  YBuf);
int  __stdcall dx_GetScreenBitDepth( void);
int  __stdcall dx_GetColorBitDepth( void);
int  __stdcall dx_GetChangeDisplayFlag( void);
int  __stdcall dx_GetVideoMemorySize( int *  AllSize, int *  FreeSize);
int  __stdcall dx_GetRefreshRate( void);
int  __stdcall dx_GetDisplayNum( void);
int  __stdcall dx_GetDisplayInfo( int  DisplayIndex, int *  DesktopRectX, int *  DesktopRectY, int *  DesktopSizeX, int *  DesktopSizeY, int *  IsPrimary);
int  __stdcall dx_GetDisplayModeNum( int  DisplayIndex = 0);
DISPLAYMODEDATA  __stdcall dx_GetDisplayMode( int  ModeIndex, int  DisplayIndex = 0);
int  __stdcall dx_GetDisplayMaxResolution( int *  SizeX, int *  SizeY, int  DisplayIndex = 0);
const COLORDATA * __stdcall dx_GetDispColorData( void );
int  __stdcall dx_GetMultiDrawScreenNum( void);
int  __stdcall dx_GetDrawFloatCoordType( void);
int  __stdcall dx_SetUseNormalDrawShader( int  Flag);
int  __stdcall dx_SetUseSoftwareRenderModeFlag( int  Flag);
int  __stdcall dx_SetNotUse3DFlag( int  Flag);
int  __stdcall dx_SetUse3DFlag( int  Flag);
int  __stdcall dx_GetUse3DFlag( void);
int  __stdcall dx_SetScreenMemToVramFlag( int  Flag);
int  __stdcall dx_GetScreenMemToSystemMemFlag( void);
int  __stdcall dx_SetWindowDrawRect( const RECT *  DrawRect);
int  __stdcall dx_RestoreGraphSystem( void);
int  __stdcall dx_SetUseHardwareVertexProcessing( int  Flag);
int  __stdcall dx_SetUsePixelLighting( int  Flag);
int  __stdcall dx_SetUseOldDrawModiGraphCodeFlag( int  Flag);
int  __stdcall dx_SetUseVramFlag( int  Flag);
int  __stdcall dx_GetUseVramFlag( void);
int  __stdcall dx_SetBasicBlendFlag( int  Flag);
int  __stdcall dx_SetUseBasicGraphDraw3DDeviceMethodFlag( int  Flag);
int  __stdcall dx_SetUseDisplayIndex( int  Index);
int  __stdcall dx_RenderVertex( void);
int  __stdcall dx_GetDrawCallCount( void);
float  __stdcall dx_GetFPS( void);
int  __stdcall dx_SaveDrawScreen( int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, int  SaveType = DX_IMAGESAVETYPE_BMP, int  Jpeg_Quality = 80, int  Jpeg_Sample2x1 = TRUE, int  Png_CompressionLevel = -1);
int  __stdcall dx_SaveDrawScreenWithStrLen( int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, size_t  FileNameLength, int  SaveType = DX_IMAGESAVETYPE_BMP, int  Jpeg_Quality = 80, int  Jpeg_Sample2x1 = TRUE, int  Png_CompressionLevel = -1);
int  __stdcall dx_SaveDrawScreenToBMP( int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName);
int  __stdcall dx_SaveDrawScreenToBMPWithStrLen( int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_SaveDrawScreenToDDS( int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName);
int  __stdcall dx_SaveDrawScreenToDDSWithStrLen( int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_SaveDrawScreenToJPEG( int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, int  Quality = 80, int  Sample2x1 = TRUE);
int  __stdcall dx_SaveDrawScreenToJPEGWithStrLen( int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, size_t  FileNameLength, int  Quality = 80, int  Sample2x1 = TRUE);
int  __stdcall dx_SaveDrawScreenToPNG( int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, int  CompressionLevel = -1);
int  __stdcall dx_SaveDrawScreenToPNGWithStrLen( int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, size_t  FileNameLength, int  CompressionLevel = -1);
int  __stdcall dx_SaveDrawValidGraph( int  GrHandle, int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, int  SaveType = DX_IMAGESAVETYPE_BMP, int  Jpeg_Quality = 80, int  Jpeg_Sample2x1 = TRUE, int  Png_CompressionLevel = -1);
int  __stdcall dx_SaveDrawValidGraphWithStrLen( int  GrHandle, int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, size_t  FileNameLength, int  SaveType = DX_IMAGESAVETYPE_BMP, int  Jpeg_Quality = 80, int  Jpeg_Sample2x1 = TRUE, int  Png_CompressionLevel = -1);
int  __stdcall dx_SaveDrawValidGraphToBMP( int  GrHandle, int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName);
int  __stdcall dx_SaveDrawValidGraphToBMPWithStrLen( int  GrHandle, int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_SaveDrawValidGraphToDDS( int  GrHandle, int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName);
int  __stdcall dx_SaveDrawValidGraphToDDSWithStrLen( int  GrHandle, int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_SaveDrawValidGraphToJPEG( int  GrHandle, int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, int  Quality = 80, int  Sample2x1 = TRUE);
int  __stdcall dx_SaveDrawValidGraphToJPEGWithStrLen( int  GrHandle, int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, size_t  FileNameLength, int  Quality = 80, int  Sample2x1 = TRUE);
int  __stdcall dx_SaveDrawValidGraphToPNG( int  GrHandle, int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, int  CompressionLevel = -1);
int  __stdcall dx_SaveDrawValidGraphToPNGWithStrLen( int  GrHandle, int  x1, int  y1, int  x2, int  y2, const TCHAR * FileName, size_t  FileNameLength, int  CompressionLevel = -1);
int  __stdcall dx_CreateVertexBuffer( int  VertexNum, int  VertexType);
int  __stdcall dx_DeleteVertexBuffer( int  VertexBufHandle);
int  __stdcall dx_InitVertexBuffer( void);
int  __stdcall dx_SetVertexBufferData( int  SetIndex, const void * VertexArray, int  VertexNum, int  VertexBufHandle);
void *  __stdcall dx_GetBufferVertexBuffer( int  VertexBufHandle);
int  __stdcall dx_UpdateVertexBuffer( int  VertexBufHandle, int  UpdateStartIndex, int  UpdateVertexNum);
int  __stdcall dx_CreateIndexBuffer( int  IndexNum, int  IndexType);
int  __stdcall dx_DeleteIndexBuffer( int  IndexBufHandle);
int  __stdcall dx_InitIndexBuffer( void);
int  __stdcall dx_SetIndexBufferData( int  SetIndex, const void * IndexArray, int  IndexNum, int  IndexBufHandle);
void *  __stdcall dx_GetBufferIndexBuffer( int  IndexBufHandle);
int  __stdcall dx_UpdateIndexBuffer( int  IndexBufHandle, int  UpdateStartIndex, int  UpdateIndexNum);
int  __stdcall dx_GetMaxPrimitiveCount( void);
int  __stdcall dx_GetMaxVertexIndex( void);
int  __stdcall dx_GetValidShaderVersion( void);
int  __stdcall dx_LoadVertexShader( const TCHAR * FileName);
int  __stdcall dx_LoadVertexShaderWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_LoadGeometryShader( const TCHAR * FileName);
int  __stdcall dx_LoadGeometryShaderWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_LoadPixelShader( const TCHAR * FileName);
int  __stdcall dx_LoadPixelShaderWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_LoadVertexShaderFromMem( const void * ImageAddress, int  ImageSize);
int  __stdcall dx_LoadGeometryShaderFromMem( const void * ImageAddress, int  ImageSize);
int  __stdcall dx_LoadPixelShaderFromMem( const void * ImageAddress, int  ImageSize);
int  __stdcall dx_DeleteShader( int  ShaderHandle);
int  __stdcall dx_InitShader( void);
int  __stdcall dx_GetConstIndexToShader( const TCHAR * ConstantName, int  ShaderHandle);
int  __stdcall dx_GetConstIndexToShaderWithStrLen( const TCHAR * ConstantName, size_t  ConstantNameLength, int  ShaderHandle);
int  __stdcall dx_GetConstCountToShader( const TCHAR * ConstantName, int  ShaderHandle);
int  __stdcall dx_GetConstCountToShaderWithStrLen( const TCHAR * ConstantName, size_t  ConstantNameLength, int  ShaderHandle);
const FLOAT4 *  __stdcall dx_GetConstDefaultParamFToShader( const TCHAR * ConstantName, int  ShaderHandle);
const FLOAT4 *  __stdcall dx_GetConstDefaultParamFToShaderWithStrLen( const TCHAR * ConstantName, size_t  ConstantNameLength, int  ShaderHandle);
int  __stdcall dx_SetVSConstSF( int  ConstantIndex, float  Param);
int  __stdcall dx_SetVSConstF( int  ConstantIndex, FLOAT4  Param);
int  __stdcall dx_SetVSConstFMtx( int  ConstantIndex, MATRIX  Param);
int  __stdcall dx_SetVSConstFMtxT( int  ConstantIndex, MATRIX  Param);
int  __stdcall dx_SetVSConstSI( int  ConstantIndex, int  Param);
int  __stdcall dx_SetVSConstI( int  ConstantIndex, INT4  Param);
int  __stdcall dx_SetVSConstB( int  ConstantIndex, BOOL  Param);
int  __stdcall dx_SetVSConstSFArray( int  ConstantIndex, const float *  ParamArray, int  ParamNum);
int  __stdcall dx_SetVSConstFArray( int  ConstantIndex, const FLOAT4 *  ParamArray, int  ParamNum);
int  __stdcall dx_SetVSConstFMtxArray( int  ConstantIndex, const MATRIX *  ParamArray, int  ParamNum);
int  __stdcall dx_SetVSConstFMtxTArray( int  ConstantIndex, const MATRIX *  ParamArray, int  ParamNum);
int  __stdcall dx_SetVSConstSIArray( int  ConstantIndex, const int *  ParamArray, int  ParamNum);
int  __stdcall dx_SetVSConstIArray( int  ConstantIndex, const INT4 *  ParamArray, int  ParamNum);
int  __stdcall dx_SetVSConstBArray( int  ConstantIndex, const BOOL *  ParamArray, int  ParamNum);
int  __stdcall dx_ResetVSConstF( int  ConstantIndex, int  ParamNum);
int  __stdcall dx_ResetVSConstI( int  ConstantIndex, int  ParamNum);
int  __stdcall dx_ResetVSConstB( int  ConstantIndex, int  ParamNum);
int  __stdcall dx_SetPSConstSF( int  ConstantIndex, float  Param);
int  __stdcall dx_SetPSConstF( int  ConstantIndex, FLOAT4  Param);
int  __stdcall dx_SetPSConstFMtx( int  ConstantIndex, MATRIX  Param);
int  __stdcall dx_SetPSConstFMtxT( int  ConstantIndex, MATRIX  Param);
int  __stdcall dx_SetPSConstSI( int  ConstantIndex, int  Param);
int  __stdcall dx_SetPSConstI( int  ConstantIndex, INT4  Param);
int  __stdcall dx_SetPSConstB( int  ConstantIndex, BOOL  Param);
int  __stdcall dx_SetPSConstSFArray( int  ConstantIndex, const float *  ParamArray, int  ParamNum);
int  __stdcall dx_SetPSConstFArray( int  ConstantIndex, const FLOAT4 *  ParamArray, int  ParamNum);
int  __stdcall dx_SetPSConstFMtxArray( int  ConstantIndex, const MATRIX *  ParamArray, int  ParamNum);
int  __stdcall dx_SetPSConstFMtxTArray( int  ConstantIndex, const MATRIX *  ParamArray, int  ParamNum);
int  __stdcall dx_SetPSConstSIArray( int  ConstantIndex, const int *  ParamArray, int  ParamNum);
int  __stdcall dx_SetPSConstIArray( int  ConstantIndex, const INT4 *  ParamArray, int  ParamNum);
int  __stdcall dx_SetPSConstBArray( int  ConstantIndex, const BOOL *  ParamArray, int  ParamNum);
int  __stdcall dx_ResetPSConstF( int  ConstantIndex, int  ParamNum);
int  __stdcall dx_ResetPSConstI( int  ConstantIndex, int  ParamNum);
int  __stdcall dx_ResetPSConstB( int  ConstantIndex, int  ParamNum);
int  __stdcall dx_SetRenderTargetToShader( int  TargetIndex, int  DrawScreen, int  SurfaceIndex = 0, int  MipLevel = 0);
int  __stdcall dx_SetUseTextureToShader( int  StageIndex, int  GraphHandle);
int  __stdcall dx_SetUseVertexShader( int  ShaderHandle);
int  __stdcall dx_SetUseGeometryShader( int  ShaderHandle);
int  __stdcall dx_SetUsePixelShader( int  ShaderHandle);
int  __stdcall dx_CalcPolygonBinormalAndTangentsToShader( VERTEX3DSHADER *  VertexArray, int  PolygonNum);
int  __stdcall dx_CalcPolygonIndexedBinormalAndTangentsToShader( VERTEX3DSHADER *  VertexArray, int  VertexNum, const unsigned short *  IndexArray, int  PolygonNum);
int  __stdcall dx_DrawBillboard3DToShader( VECTOR  Pos, float  cx, float  cy, float  Size, float  Angle, int  GrHandle, int  TransFlag, int  ReverseXFlag = FALSE, int  ReverseYFlag = FALSE);
int  __stdcall dx_DrawPolygon2DToShader( const VERTEX2DSHADER *  VertexArray, int  PolygonNum);
int  __stdcall dx_DrawPolygon3DToShader( const VERTEX3DSHADER *  VertexArray, int  PolygonNum);
int  __stdcall dx_DrawPolygonIndexed2DToShader( const VERTEX2DSHADER *  VertexArray, int  VertexNum, const unsigned short *  IndexArray, int  PolygonNum);
int  __stdcall dx_DrawPolygonIndexed3DToShader( const VERTEX3DSHADER *  VertexArray, int  VertexNum, const unsigned short *  IndexArray, int  PolygonNum);
int  __stdcall dx_DrawPrimitive2DToShader( const VERTEX2DSHADER *  VertexArray, int  VertexNum, int  PrimitiveType);
int  __stdcall dx_DrawPrimitive3DToShader( const VERTEX3DSHADER *  VertexArray, int  VertexNum, int  PrimitiveType);
int  __stdcall dx_DrawPrimitiveIndexed2DToShader( const VERTEX2DSHADER *  VertexArray, int  VertexNum, const unsigned short *  IndexArray, int  IndexNum, int  PrimitiveType);
int  __stdcall dx_DrawPrimitiveIndexed3DToShader( const VERTEX3DSHADER *  VertexArray, int  VertexNum, const unsigned short *  IndexArray, int  IndexNum, int  PrimitiveType);
int  __stdcall dx_DrawPolygon3DToShader_UseVertexBuffer( int  VertexBufHandle);
int  __stdcall dx_DrawPolygonIndexed3DToShader_UseVertexBuffer( int  VertexBufHandle, int  IndexBufHandle);
int  __stdcall dx_DrawPrimitive3DToShader_UseVertexBuffer( int  VertexBufHandle, int  PrimitiveType);
int  __stdcall dx_DrawPrimitive3DToShader_UseVertexBuffer2( int  VertexBufHandle, int  PrimitiveType, int  StartVertex, int  UseVertexNum);
int  __stdcall dx_DrawPrimitiveIndexed3DToShader_UseVertexBuffer( int  VertexBufHandle, int  IndexBufHandle, int  PrimitiveType);
int  __stdcall dx_DrawPrimitiveIndexed3DToShader_UseVertexBuffer2( int  VertexBufHandle, int  IndexBufHandle, int  PrimitiveType, int  BaseVertex, int  StartVertex, int  UseVertexNum, int  StartIndex, int  UseIndexNum);
int  __stdcall dx_InitShaderConstantBuffer( void);
int  __stdcall dx_CreateShaderConstantBuffer( int  BufferSize);
int  __stdcall dx_DeleteShaderConstantBuffer( int  SConstBufHandle);
void *  __stdcall dx_GetBufferShaderConstantBuffer( int  SConstBufHandle);
int  __stdcall dx_UpdateShaderConstantBuffer( int  SConstBufHandle);
int  __stdcall dx_SetShaderConstantBuffer( int  SConstBufHandle, int  TargetShader, int  Slot);
int  __stdcall dx_PlayMovie( const TCHAR * FileName, int  ExRate, int  PlayType);
int  __stdcall dx_PlayMovieWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  ExRate, int  PlayType);
int  __stdcall dx_GetMovieImageSize_File( const TCHAR * FileName, int *  SizeX, int *  SizeY);
int  __stdcall dx_GetMovieImageSize_File_WithStrLen( const TCHAR * FileName, size_t  FileNameLength, int *  SizeX, int *  SizeY);
int  __stdcall dx_GetMovieImageSize_Mem( const void * FileImage, int  FileImageSize, int *  SizeX, int *  SizeY);
int  __stdcall dx_OpenMovieToGraph( const TCHAR * FileName, int  FullColor = TRUE);
int  __stdcall dx_OpenMovieToGraphWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  FullColor = TRUE);
int  __stdcall dx_PlayMovieToGraph( int  GraphHandle, int  PlayType = DX_PLAYTYPE_BACK, int  SysPlay = 0);
int  __stdcall dx_PauseMovieToGraph( int  GraphHandle, int  SysPause = 0);
int  __stdcall dx_AddMovieFrameToGraph( int  GraphHandle, unsigned int  FrameNum);
int  __stdcall dx_SeekMovieToGraph( int  GraphHandle, int  Time);
int  __stdcall dx_SetPlaySpeedRateMovieToGraph( int  GraphHandle, double  SpeedRate);
int  __stdcall dx_GetMovieStateToGraph( int  GraphHandle);
int  __stdcall dx_SetMovieVolumeToGraph( int  Volume, int  GraphHandle);
int  __stdcall dx_ChangeMovieVolumeToGraph( int  Volume, int  GraphHandle);
const BASEIMAGE * __stdcall dx_GetMovieBaseImageToGraph( int GraphHandle , int * ImageUpdateFlag = NULL , int ImageUpdateFlagSetOnly = FALSE ) ;
int  __stdcall dx_GetMovieTotalFrameToGraph( int  GraphHandle);
int  __stdcall dx_TellMovieToGraph( int  GraphHandle);
int  __stdcall dx_TellMovieToGraphToFrame( int  GraphHandle);
int  __stdcall dx_SeekMovieToGraphToFrame( int  GraphHandle, int  Frame);
LONGLONG  __stdcall dx_GetOneFrameTimeMovieToGraph( int  GraphHandle);
int  __stdcall dx_GetLastUpdateTimeMovieToGraph( int  GraphHandle);
int  __stdcall dx_SetMovieRightImageAlphaFlag( int  Flag);
int  __stdcall dx_SetMovieColorA8R8G8B8Flag( int  Flag);
int  __stdcall dx_SetMovieUseYUVFormatSurfaceFlag( int  Flag);
int  __stdcall dx_SetCameraNearFar( float  Near, float  Far);
int  __stdcall dx_SetCameraNearFarD( double  Near, double  Far);
int  __stdcall dx_SetCameraPositionAndTarget_UpVecY( VECTOR  Position, VECTOR  Target);
int  __stdcall dx_SetCameraPositionAndTarget_UpVecYD( VECTOR_D  Position, VECTOR_D  Target);
int  __stdcall dx_SetCameraPositionAndTargetAndUpVec( VECTOR  Position, VECTOR  TargetPosition, VECTOR  UpVector);
int  __stdcall dx_SetCameraPositionAndTargetAndUpVecD( VECTOR_D  Position, VECTOR_D  TargetPosition, VECTOR_D  UpVector);
int  __stdcall dx_SetCameraPositionAndAngle( VECTOR  Position, float  VRotate, float  HRotate, float  TRotate);
int  __stdcall dx_SetCameraPositionAndAngleD( VECTOR_D  Position, double  VRotate, double  HRotate, double  TRotate);
int  __stdcall dx_SetCameraViewMatrix( MATRIX  ViewMatrix);
int  __stdcall dx_SetCameraViewMatrixD( MATRIX_D  ViewMatrix);
int  __stdcall dx_SetCameraScreenCenter( float  x, float  y);
int  __stdcall dx_SetCameraScreenCenterD( double  x, double  y);
int  __stdcall dx_SetupCamera_Perspective( float  Fov);
int  __stdcall dx_SetupCamera_PerspectiveD( double  Fov);
int  __stdcall dx_SetupCamera_Ortho( float  Size);
int  __stdcall dx_SetupCamera_OrthoD( double  Size);
int  __stdcall dx_SetupCamera_ProjectionMatrix( MATRIX  ProjectionMatrix);
int  __stdcall dx_SetupCamera_ProjectionMatrixD( MATRIX_D  ProjectionMatrix);
int  __stdcall dx_SetCameraDotAspect( float  DotAspect);
int  __stdcall dx_SetCameraDotAspectD( double  DotAspect);
int  __stdcall dx_CheckCameraViewClip( VECTOR  CheckPos);
int  __stdcall dx_CheckCameraViewClipD( VECTOR_D  CheckPos);
int  __stdcall dx_CheckCameraViewClip_Dir( VECTOR  CheckPos);
int  __stdcall dx_CheckCameraViewClip_DirD( VECTOR_D  CheckPos);
int  __stdcall dx_CheckCameraViewClip_Box( VECTOR  BoxPos1, VECTOR  BoxPos2);
int  __stdcall dx_CheckCameraViewClip_BoxD( VECTOR_D  BoxPos1, VECTOR_D  BoxPos2);
float  __stdcall dx_GetCameraNear( void);
double __stdcall dx_GetCameraNearD( void );
float  __stdcall dx_GetCameraFar( void);
double __stdcall dx_GetCameraFarD( void );
VECTOR  __stdcall dx_GetCameraPosition( void);
VECTOR_D  __stdcall dx_GetCameraPositionD( void);
VECTOR  __stdcall dx_GetCameraTarget( void);
VECTOR_D  __stdcall dx_GetCameraTargetD( void);
VECTOR  __stdcall dx_GetCameraUpVector( void);
VECTOR_D  __stdcall dx_GetCameraUpVectorD( void);
VECTOR  __stdcall dx_GetCameraDownVector( void);
VECTOR_D  __stdcall dx_GetCameraDownVectorD( void);
VECTOR  __stdcall dx_GetCameraRightVector( void);
VECTOR_D  __stdcall dx_GetCameraRightVectorD( void);
VECTOR  __stdcall dx_GetCameraLeftVector( void);
VECTOR_D  __stdcall dx_GetCameraLeftVectorD( void);
VECTOR  __stdcall dx_GetCameraFrontVector( void);
VECTOR_D  __stdcall dx_GetCameraFrontVectorD( void);
VECTOR  __stdcall dx_GetCameraBackVector( void);
VECTOR_D  __stdcall dx_GetCameraBackVectorD( void);
float  __stdcall dx_GetCameraAngleHRotate( void);
double __stdcall dx_GetCameraAngleHRotateD( void );
float  __stdcall dx_GetCameraAngleVRotate( void);
double __stdcall dx_GetCameraAngleVRotateD( void );
float  __stdcall dx_GetCameraAngleTRotate( void);
double __stdcall dx_GetCameraAngleTRotateD( void );
MATRIX  __stdcall dx_GetCameraViewMatrix( void);
MATRIX_D  __stdcall dx_GetCameraViewMatrixD( void);
MATRIX  __stdcall dx_GetCameraBillboardMatrix( void);
MATRIX_D  __stdcall dx_GetCameraBillboardMatrixD( void);
int  __stdcall dx_GetCameraScreenCenter( float *  x, float *  y);
int  __stdcall dx_GetCameraScreenCenterD( double *  x, double *  y);
float  __stdcall dx_GetCameraFov( void);
double __stdcall dx_GetCameraFovD( void );
float  __stdcall dx_GetCameraSize( void);
double __stdcall dx_GetCameraSizeD( void );
MATRIX  __stdcall dx_GetCameraProjectionMatrix( void);
MATRIX_D  __stdcall dx_GetCameraProjectionMatrixD( void);
float  __stdcall dx_GetCameraDotAspect( void);
double __stdcall dx_GetCameraDotAspectD( void );
MATRIX  __stdcall dx_GetCameraViewportMatrix( void);
MATRIX_D  __stdcall dx_GetCameraViewportMatrixD( void);
MATRIX  __stdcall dx_GetCameraAPIViewportMatrix( void);
MATRIX_D  __stdcall dx_GetCameraAPIViewportMatrixD( void);
int  __stdcall dx_SetUseLighting( int  Flag);
int  __stdcall dx_SetMaterialUseVertDifColor( int  UseFlag);
int  __stdcall dx_SetMaterialUseVertSpcColor( int  UseFlag);
int  __stdcall dx_SetMaterialParam( MATERIALPARAM  Material);
int  __stdcall dx_SetUseSpecular( int  UseFlag);
int  __stdcall dx_SetGlobalAmbientLight( COLOR_F  Color);
int  __stdcall dx_ChangeLightTypeDir( VECTOR  Direction);
int  __stdcall dx_ChangeLightTypeSpot( VECTOR  Position, VECTOR  Direction, float  OutAngle, float  InAngle, float  Range, float  Atten0, float  Atten1, float  Atten2);
int  __stdcall dx_ChangeLightTypePoint( VECTOR  Position, float  Range, float  Atten0, float  Atten1, float  Atten2);
int  __stdcall dx_GetLightType( void);
int  __stdcall dx_SetLightEnable( int  EnableFlag);
int  __stdcall dx_GetLightEnable( void);
int  __stdcall dx_SetLightDifColor( COLOR_F  Color);
COLOR_F  __stdcall dx_GetLightDifColor( void);
int  __stdcall dx_SetLightSpcColor( COLOR_F  Color);
COLOR_F  __stdcall dx_GetLightSpcColor( void);
int  __stdcall dx_SetLightAmbColor( COLOR_F  Color);
COLOR_F  __stdcall dx_GetLightAmbColor( void);
int  __stdcall dx_SetLightDirection( VECTOR  Direction);
VECTOR  __stdcall dx_GetLightDirection( void);
int  __stdcall dx_SetLightPosition( VECTOR  Position);
VECTOR  __stdcall dx_GetLightPosition( void);
int  __stdcall dx_SetLightRangeAtten( float  Range, float  Atten0, float  Atten1, float  Atten2);
int  __stdcall dx_GetLightRangeAtten( float *  Range, float *  Atten0, float *  Atten1, float *  Atten2);
int  __stdcall dx_SetLightAngle( float  OutAngle, float  InAngle);
int  __stdcall dx_GetLightAngle( float *  OutAngle, float *  InAngle);
int  __stdcall dx_SetLightUseShadowMap( int  SmSlotIndex, int  UseFlag);
int  __stdcall dx_CreateDirLightHandle( VECTOR  Direction);
int  __stdcall dx_CreateSpotLightHandle( VECTOR  Position, VECTOR  Direction, float  OutAngle, float  InAngle, float  Range, float  Atten0, float  Atten1, float  Atten2);
int  __stdcall dx_CreatePointLightHandle( VECTOR  Position, float  Range, float  Atten0, float  Atten1, float  Atten2);
int  __stdcall dx_DeleteLightHandle( int  LHandle);
int  __stdcall dx_DeleteLightHandleAll( void);
int  __stdcall dx_SetLightTypeHandle( int  LHandle, int  LightType);
int  __stdcall dx_SetLightEnableHandle( int  LHandle, int  EnableFlag);
int  __stdcall dx_SetLightDifColorHandle( int  LHandle, COLOR_F  Color);
int  __stdcall dx_SetLightSpcColorHandle( int  LHandle, COLOR_F  Color);
int  __stdcall dx_SetLightAmbColorHandle( int  LHandle, COLOR_F  Color);
int  __stdcall dx_SetLightDirectionHandle( int  LHandle, VECTOR  Direction);
int  __stdcall dx_SetLightPositionHandle( int  LHandle, VECTOR  Position);
int  __stdcall dx_SetLightRangeAttenHandle( int  LHandle, float  Range, float  Atten0, float  Atten1, float  Atten2);
int  __stdcall dx_SetLightAngleHandle( int  LHandle, float  OutAngle, float  InAngle);
int  __stdcall dx_SetLightUseShadowMapHandle( int  LHandle, int  SmSlotIndex, int  UseFlag);
int  __stdcall dx_GetLightTypeHandle( int  LHandle);
int  __stdcall dx_GetLightEnableHandle( int  LHandle);
COLOR_F  __stdcall dx_GetLightDifColorHandle( int  LHandle);
COLOR_F  __stdcall dx_GetLightSpcColorHandle( int  LHandle);
COLOR_F  __stdcall dx_GetLightAmbColorHandle( int  LHandle);
VECTOR  __stdcall dx_GetLightDirectionHandle( int  LHandle);
VECTOR  __stdcall dx_GetLightPositionHandle( int  LHandle);
int  __stdcall dx_GetLightRangeAttenHandle( int  LHandle, float *  Range, float *  Atten0, float *  Atten1, float *  Atten2);
int  __stdcall dx_GetLightAngleHandle( int  LHandle, float *  OutAngle, float *  InAngle);
int  __stdcall dx_GetEnableLightHandleNum( void);
int  __stdcall dx_GetEnableLightHandle( int  Index);
int  __stdcall dx_GetTexFormatIndex( const IMAGEFORMATDESC *  Format);
int  __stdcall dx_CreateMaskScreen( void);
int  __stdcall dx_DeleteMaskScreen( void);
int  __stdcall dx_DrawMaskToDirectData( int  x, int  y, int  Width, int  Height, const void * MaskData, int  TransMode);
int  __stdcall dx_DrawFillMaskToDirectData( int  x1, int  y1, int  x2, int  y2, int  Width, int  Height, const void * MaskData);
int  __stdcall dx_SetUseMaskScreenFlag( int  ValidFlag);
int  __stdcall dx_GetUseMaskScreenFlag( void);
int  __stdcall dx_FillMaskScreen( int  Flag);
int  __stdcall dx_SetMaskScreenGraph( int  GraphHandle);
int  __stdcall dx_SetMaskScreenGraphUseChannel( int  UseChannel);
int  __stdcall dx_InitMask( void);
int  __stdcall dx_MakeMask( int  Width, int  Height);
int  __stdcall dx_GetMaskSize( int *  WidthBuf, int *  HeightBuf, int  MaskHandle);
int __stdcall dx_GetMaskBaseImageInfo( BASEIMAGE * BaseImage , int MaskHandle ) ;
int  __stdcall dx_SetDataToMask( int  Width, int  Height, const void * MaskData, int  MaskHandle);
int  __stdcall dx_DeleteMask( int  MaskHandle);
int __stdcall dx_GraphImageBltToMask( const BASEIMAGE * BaseImage , int ImageX , int ImageY , int MaskHandle ) ;
int  __stdcall dx_LoadMask( const TCHAR * FileName);
int  __stdcall dx_LoadMaskWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_LoadDivMask( const TCHAR * FileName, int  AllNum, int  XNum, int  YNum, int  XSize, int  YSize, int *  HandleArray);
int  __stdcall dx_LoadDivMaskWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  AllNum, int  XNum, int  YNum, int  XSize, int  YSize, int *  HandleArray);
int  __stdcall dx_CreateMaskFromMem( const void * FileImage, int  FileImageSize);
int  __stdcall dx_CreateDivMaskFromMem( const void * FileImage, int  FileImageSize, int  AllNum, int  XNum, int  YNum, int  XSize, int  YSize, int *  HandleArray);
int  __stdcall dx_DrawMask( int  x, int  y, int  MaskHandle, int  TransMode);
int  __stdcall dx_DrawStringMask( int  x, int  y, int  Flag, const TCHAR * String);
int  __stdcall dx_DrawNStringMask( int  x, int  y, int  Flag, const TCHAR * String, size_t  StringLength);
int  __stdcall dx_DrawStringMaskToHandle( int  x, int  y, int  Flag, int  FontHandle, const TCHAR * String);
int  __stdcall dx_DrawNStringMaskToHandle( int  x, int  y, int  Flag, int  FontHandle, const TCHAR * String, size_t  StringLength);
int  __stdcall dx_DrawFillMask( int  x1, int  y1, int  x2, int  y2, int  MaskHandle);
int  __stdcall dx_SetMaskReverseEffectFlag( int  ReverseFlag);
int  __stdcall dx_GetMaskScreenData( int  x1, int  y1, int  x2, int  y2, int  MaskHandle);
int  __stdcall dx_GetMaskUseFlag( void);
int  __stdcall dx_EnumFontName( TCHAR *  NameBuffer, int  NameBufferNum, int  JapanOnlyFlag = TRUE);
int  __stdcall dx_EnumFontNameEx( TCHAR *  NameBuffer, int  NameBufferNum, int  CharSet = -1);
int  __stdcall dx_EnumFontNameEx2( TCHAR *  NameBuffer, int  NameBufferNum, const TCHAR * EnumFontName, int  CharSet = -1);
int  __stdcall dx_EnumFontNameEx2WithStrLen( TCHAR *  NameBuffer, int  NameBufferNum, const TCHAR * EnumFontName, size_t  EnumFontNameLength, int  CharSet = -1);
int  __stdcall dx_CheckFontName( const TCHAR * FontName, int  CharSet = -1);
int  __stdcall dx_CheckFontNameWithStrLen( const TCHAR * FontName, size_t  FontNameLength, int  CharSet = -1);
int  __stdcall dx_InitFontToHandle( void);
int  __stdcall dx_CreateFontToHandle( const TCHAR * FontName, int  Size, int  Thick, int  FontType = -1, int  CharSet = -1, int  EdgeSize = -1, int  Italic = FALSE, int  Handle = -1);
int  __stdcall dx_CreateFontToHandleWithStrLen( const TCHAR * FontName, size_t  FontNameLength, int  Size, int  Thick, int  FontType = -1, int  CharSet = -1, int  EdgeSize = -1, int  Italic = FALSE, int  Handle = -1);
int  __stdcall dx_LoadFontDataToHandle( const TCHAR * FileName, int  EdgeSize = 0);
int  __stdcall dx_LoadFontDataToHandleWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  EdgeSize = 0);
int  __stdcall dx_LoadFontDataFromMemToHandle( const void * FontDataImage, int  FontDataImageSize, int  EdgeSize = 0);
int  __stdcall dx_SetFontSpaceToHandle( int  Pixel, int  FontHandle);
int  __stdcall dx_SetFontLineSpaceToHandle( int  Pixel, int  FontHandle);
int  __stdcall dx_SetFontCharCodeFormatToHandle( int  CharCodeFormat, int  FontHandle);
int  __stdcall dx_DeleteFontToHandle( int  FontHandle);
int  __stdcall dx_SetFontLostFlag( int  FontHandle, int *  LostFlag);
int  __stdcall dx_AddFontImageToHandle( int  FontHandle, const TCHAR * Char, int  GrHandle, int  DrawX, int  DrawY, int  AddX);
int  __stdcall dx_AddFontImageToHandleWithStrLen( int  FontHandle, const TCHAR * Char, size_t  CharLength, int  GrHandle, int  DrawX, int  DrawY, int  AddX);
int  __stdcall dx_SubFontImageToHandle( int  FontHandle, const TCHAR * Char);
int  __stdcall dx_SubFontImageToHandleWithStrLen( int  FontHandle, const TCHAR * Char, size_t  CharLength);
int  __stdcall dx_AddSubstitutionFontToHandle( int  FontHandle, int  SubstitutionFontHandle, int  DrawX, int  DrawY);
int  __stdcall dx_SubSubstitutionFontToHandle( int  FontHandle, int  SubstitutionFontHandle);
int  __stdcall dx_ChangeFont( const TCHAR * FontName, int  CharSet = -1);
int  __stdcall dx_ChangeFontWithStrLen( const TCHAR * FontName, size_t  FontNameLength, int  CharSet = -1);
int  __stdcall dx_ChangeFontType( int  FontType);
const TCHAR * __stdcall dx_GetFontName( void);
int  __stdcall dx_SetFontSize( int  FontSize);
int  __stdcall dx_GetFontSize( void);
int  __stdcall dx_GetFontEdgeSize( void);
int  __stdcall dx_SetFontThickness( int  ThickPal);
int  __stdcall dx_SetFontSpace( int  Pixel);
int  __stdcall dx_GetFontSpace( void);
int  __stdcall dx_SetFontLineSpace( int  Pixel);
int  __stdcall dx_GetFontLineSpace( void);
int  __stdcall dx_SetFontCharCodeFormat( int  CharCodeFormat);
int  __stdcall dx_SetDefaultFontState( const TCHAR * FontName, int  Size, int  Thick, int  FontType = -1, int  CharSet = -1, int  EdgeSize = -1, int  Italic = FALSE);
int  __stdcall dx_SetDefaultFontStateWithStrLen( const TCHAR * FontName, size_t  FontNameLength, int  Size, int  Thick, int  FontType = -1, int  CharSet = -1, int  EdgeSize = -1, int  Italic = FALSE);
int  __stdcall dx_GetDefaultFontHandle( void);
int  __stdcall dx_GetFontMaxCacheCharNum( void);
int  __stdcall dx_GetFontMaxWidth( void);
int  __stdcall dx_GetFontAscent( void);
int  __stdcall dx_GetDrawStringWidth( const TCHAR * String, int  StrLen, int  VerticalFlag = FALSE);
int  __stdcall dx_GetDrawNStringWidth( const TCHAR * String, size_t  StringLength, int  VerticalFlag = FALSE);
int  __stdcall dx_GetDrawExtendStringWidth( double  ExRateX, const TCHAR * String, int  StrLen, int  VerticalFlag = FALSE);
int  __stdcall dx_GetDrawExtendNStringWidth( double  ExRateX, const TCHAR * String, size_t  StringLength, int  VerticalFlag = FALSE);
int  __stdcall dx_GetDrawStringSize( int *  SizeX, int *  SizeY, int *  LineCount, const TCHAR * String, int  StrLen, int  VerticalFlag = FALSE);
int  __stdcall dx_GetDrawNStringSize( int *  SizeX, int *  SizeY, int *  LineCount, const TCHAR * String, size_t  StringLength, int  VerticalFlag = FALSE);
int  __stdcall dx_GetDrawExtendStringSize( int *  SizeX, int *  SizeY, int *  LineCount, double  ExRateX, double  ExRateY, const TCHAR * String, int  StrLen, int  VerticalFlag = FALSE);
int  __stdcall dx_GetDrawExtendNStringSize( int *  SizeX, int *  SizeY, int *  LineCount, double  ExRateX, double  ExRateY, const TCHAR * String, size_t  StringLength, int  VerticalFlag = FALSE);
int __stdcall dx_GetDrawStringCharInfo( DRAWCHARINFO * InfoBuffer , size_t InfoBufferSize , const TCHAR * String , int StrLen , int VerticalFlag = FALSE ) ;
int __stdcall dx_GetDrawNStringCharInfo( DRAWCHARINFO * InfoBuffer , size_t InfoBufferSize , const TCHAR * String , size_t StringLength , int VerticalFlag = FALSE ) ;
int __stdcall dx_GetDrawExtendStringCharInfo( DRAWCHARINFO * InfoBuffer , size_t InfoBufferSize , double ExRateX , double ExRateY , const TCHAR * String , int StrLen , int VerticalFlag = FALSE ) ;
int __stdcall dx_GetDrawExtendNStringCharInfo( DRAWCHARINFO * InfoBuffer , size_t InfoBufferSize , double ExRateX , double ExRateY , const TCHAR * String , size_t StringLength , int VerticalFlag = FALSE ) ;
int  __stdcall dx_GetDrawStringKerningPairInfo( const TCHAR * PairChar, int *  KernAmount);
int  __stdcall dx_GetDrawStringKerningPairInfoWithStrLen( const TCHAR * PairChar, size_t  PairCharLength, int *  KernAmount);
const TCHAR * __stdcall dx_GetFontNameToHandle( int  FontHandle);
int  __stdcall dx_GetFontMaxCacheCharNumToHandle( int  FontHandle);
int  __stdcall dx_GetFontMaxWidthToHandle( int  FontHandle);
int  __stdcall dx_GetFontAscentToHandle( int  FontHandle);
int  __stdcall dx_GetFontSizeToHandle( int  FontHandle);
int  __stdcall dx_GetFontEdgeSizeToHandle( int  FontHandle);
int  __stdcall dx_GetFontSpaceToHandle( int  FontHandle);
int  __stdcall dx_GetFontLineSpaceToHandle( int  FontHandle);
int  __stdcall dx_GetFontCharInfo( int  FontHandle, const TCHAR * Char, int *  DrawX, int *  DrawY, int *  NextCharX, int *  SizeX, int *  SizeY);
int  __stdcall dx_GetFontCharInfoWithStrLen( int  FontHandle, const TCHAR * Char, size_t  CharLength, int *  DrawX, int *  DrawY, int *  NextCharX, int *  SizeX, int *  SizeY);
int  __stdcall dx_GetDrawStringWidthToHandle( const TCHAR * String, int  StrLen, int  FontHandle, int  VerticalFlag = FALSE);
int  __stdcall dx_GetDrawNStringWidthToHandle( const TCHAR * String, size_t  StringLength, int  FontHandle, int  VerticalFlag = FALSE);
int  __stdcall dx_GetDrawExtendStringWidthToHandle( double  ExRateX, const TCHAR * String, int  StrLen, int  FontHandle, int  VerticalFlag = FALSE);
int  __stdcall dx_GetDrawExtendNStringWidthToHandle( double  ExRateX, const TCHAR * String, size_t  StringLength, int  FontHandle, int  VerticalFlag = FALSE);
int  __stdcall dx_GetDrawStringSizeToHandle( int *  SizeX, int *  SizeY, int *  LineCount, const TCHAR * String, int  StrLen, int  FontHandle, int  VerticalFlag = FALSE);
int  __stdcall dx_GetDrawNStringSizeToHandle( int *  SizeX, int *  SizeY, int *  LineCount, const TCHAR * String, size_t  StringLength, int  FontHandle, int  VerticalFlag = FALSE);
int  __stdcall dx_GetDrawExtendStringSizeToHandle( int *  SizeX, int *  SizeY, int *  LineCount, double  ExRateX, double  ExRateY, const TCHAR * String, int  StrLen, int  FontHandle, int  VerticalFlag = FALSE);
int  __stdcall dx_GetDrawExtendNStringSizeToHandle( int *  SizeX, int *  SizeY, int *  LineCount, double  ExRateX, double  ExRateY, const TCHAR * String, size_t  StringLength, int  FontHandle, int  VerticalFlag = FALSE);
int __stdcall dx_GetDrawStringCharInfoToHandle( DRAWCHARINFO * InfoBuffer , size_t InfoBufferSize , const TCHAR * String , int StrLen , int FontHandle , int VerticalFlag = FALSE ) ;
int __stdcall dx_GetDrawNStringCharInfoToHandle( DRAWCHARINFO * InfoBuffer , size_t InfoBufferSize , const TCHAR * String , size_t StringLength , int FontHandle , int VerticalFlag = FALSE ) ;
int __stdcall dx_GetDrawExtendStringCharInfoToHandle( DRAWCHARINFO * InfoBuffer , size_t InfoBufferSize , double ExRateX , double ExRateY , const TCHAR * String , int StrLen , int FontHandle , int VerticalFlag = FALSE ) ;
int __stdcall dx_GetDrawExtendNStringCharInfoToHandle( DRAWCHARINFO * InfoBuffer , size_t InfoBufferSize , double ExRateX , double ExRateY , const TCHAR * String , size_t StringLength , int FontHandle , int VerticalFlag = FALSE ) ;
int  __stdcall dx_GetDrawStringKerningPairInfoToHandle( const TCHAR * PairChar, int *  KernAmount, int  FontHandle);
int  __stdcall dx_GetDrawStringKerningPairInfoToHandleWithStrLen( const TCHAR * PairChar, size_t  PairCharLength, int *  KernAmount, int  FontHandle);
int  __stdcall dx_GetFontStateToHandle( TCHAR *  FontName, int *  Size, int *  Thick, int  FontHandle, int *  FontType, int *  CharSet, int *  EdgeSize, int *  Italic);
int  __stdcall dx_CheckFontCacheToTextureFlag( int  FontHandle);
int  __stdcall dx_CheckFontChacheToTextureFlag( int  FontHandle);
int  __stdcall dx_CheckFontHandleValid( int  FontHandle);
int  __stdcall dx_ClearFontCacheToHandle( int  FontHandle);
int  __stdcall dx_SetFontCacheToTextureFlag( int  Flag);
int  __stdcall dx_GetFontCacheToTextureFlag( void);
int  __stdcall dx_SetFontChacheToTextureFlag( int  Flag);
int  __stdcall dx_GetFontChacheToTextureFlag( void);
int  __stdcall dx_SetFontCacheTextureColorBitDepth( int  ColorBitDepth);
int  __stdcall dx_GetFontCacheTextureColorBitDepth( void);
int  __stdcall dx_SetFontCacheCharNum( int  CharNum);
int  __stdcall dx_GetFontCacheCharNum( void);
int  __stdcall dx_SetFontCacheUsePremulAlphaFlag( int  Flag);
int  __stdcall dx_GetFontCacheUsePremulAlphaFlag( void);
int  __stdcall dx_SetFontUseAdjustSizeFlag( int  Flag);
int  __stdcall dx_GetFontUseAdjustSizeFlag( void);
int __stdcall dx_FontCacheStringDrawToHandle( int x , int y , const TCHAR * StrData , unsigned int Color , unsigned int EdgeColor , BASEIMAGE * DestImage , const RECT * ClipRect , int FontHandle , int VerticalFlag = FALSE , SIZE * DrawSizeP = NULL ) ;
int __stdcall dx_FontCacheStringDrawToHandleWithStrLen( int x , int y , const TCHAR * StrData , size_t StrDataLength , unsigned int Color , unsigned int EdgeColor , BASEIMAGE * DestImage , const RECT * ClipRect , int FontHandle , int VerticalFlag = FALSE , SIZE * DrawSizeP = NULL ) ;
int __stdcall dx_FontBaseImageBlt( int x , int y , const TCHAR * StrData , BASEIMAGE * DestImage , BASEIMAGE * DestEdgeImage , int VerticalFlag = FALSE ) ;
int __stdcall dx_FontBaseImageBltWithStrLen( int x , int y , const TCHAR * StrData , size_t StrDataLength , BASEIMAGE * DestImage , BASEIMAGE * DestEdgeImage , int VerticalFlag = FALSE ) ;
int __stdcall dx_FontBaseImageBltToHandle( int x , int y , const TCHAR * StrData , BASEIMAGE * DestImage , BASEIMAGE * DestEdgeImage , int FontHandle , int VerticalFlag = FALSE ) ;
int __stdcall dx_FontBaseImageBltToHandleWithStrLen( int x , int y , const TCHAR * StrData , size_t StrDataLength , BASEIMAGE * DestImage , BASEIMAGE * DestEdgeImage , int FontHandle , int VerticalFlag = FALSE ) ;
int  __stdcall dx_MultiByteCharCheck( const char * Buf, int  CharSet);
int  __stdcall dx_DrawString( int  x, int  y, const TCHAR * String, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawNString( int  x, int  y, const TCHAR * String, size_t  StringLength, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawVString( int  x, int  y, const TCHAR * String, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawNVString( int  x, int  y, const TCHAR * String, size_t  StringLength, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawExtendString( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawExtendNString( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, size_t  StringLength, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawExtendVString( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawExtendNVString( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, size_t  StringLength, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawRotaString( int  x, int  y, double  ExRateX, double  ExRateY, double  RotCenterX, double  RotCenterY, double  RotAngle, unsigned int  Color, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE, const TCHAR * String = NULL);
int  __stdcall dx_DrawRotaNString( int  x, int  y, double  ExRateX, double  ExRateY, double  RotCenterX, double  RotCenterY, double  RotAngle, unsigned int  Color, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE, const TCHAR * String = NULL, size_t  StringLength = 0);
int  __stdcall dx_DrawModiString( int  x1, int  y1, int  x2, int  y2, int  x3, int  y3, int  x4, int  y4, unsigned int  Color, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE, const TCHAR * String = NULL);
int  __stdcall dx_DrawModiNString( int  x1, int  y1, int  x2, int  y2, int  x3, int  y3, int  x4, int  y4, unsigned int  Color, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE, const TCHAR * String = NULL, size_t  StringLength = 0);
int  __stdcall dx_DrawStringF( float  x, float  y, const TCHAR * String, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawNStringF( float  x, float  y, const TCHAR * String, size_t  StringLength, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawVStringF( float  x, float  y, const TCHAR * String, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawNVStringF( float  x, float  y, const TCHAR * String, size_t  StringLength, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawExtendStringF( float  x, float  y, double  ExRateX, double  ExRateY, const TCHAR * String, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawExtendNStringF( float  x, float  y, double  ExRateX, double  ExRateY, const TCHAR * String, size_t  StringLength, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawExtendVStringF( float  x, float  y, double  ExRateX, double  ExRateY, const TCHAR * String, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawExtendNVStringF( float  x, float  y, double  ExRateX, double  ExRateY, const TCHAR * String, size_t  StringLength, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawRotaStringF( float  x, float  y, double  ExRateX, double  ExRateY, double  RotCenterX, double  RotCenterY, double  RotAngle, unsigned int  Color, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE, const TCHAR * String = NULL);
int  __stdcall dx_DrawRotaNStringF( float  x, float  y, double  ExRateX, double  ExRateY, double  RotCenterX, double  RotCenterY, double  RotAngle, unsigned int  Color, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE, const TCHAR * String = NULL, size_t  StringLength = 0);
int  __stdcall dx_DrawModiStringF( float  x1, float  y1, float  x2, float  y2, float  x3, float  y3, float  x4, float  y4, unsigned int  Color, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE, const TCHAR * String = NULL);
int  __stdcall dx_DrawModiNStringF( float  x1, float  y1, float  x2, float  y2, float  x3, float  y3, float  x4, float  y4, unsigned int  Color, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE, const TCHAR * String = NULL, size_t  StringLength = 0);
int  __stdcall dx_DrawNumberToI( int  x, int  y, int  Num, int  RisesNum, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawNumberToF( int  x, int  y, double  Num, int  Length, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawNumberPlusToI( int  x, int  y, const TCHAR * NoteString, int  Num, int  RisesNum, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawNumberPlusToF( int  x, int  y, const TCHAR * NoteString, double  Num, int  Length, unsigned int  Color, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawStringToZBuffer( int  x, int  y, const TCHAR * String, int  WriteZMode);
int  __stdcall dx_DrawNStringToZBuffer( int  x, int  y, const TCHAR * String, size_t  StringLength, int  WriteZMode);
int  __stdcall dx_DrawVStringToZBuffer( int  x, int  y, const TCHAR * String, int  WriteZMode);
int  __stdcall dx_DrawNVStringToZBuffer( int  x, int  y, const TCHAR * String, size_t  StringLength, int  WriteZMode);
int  __stdcall dx_DrawExtendStringToZBuffer( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, int  WriteZMode);
int  __stdcall dx_DrawExtendNStringToZBuffer( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, size_t  StringLength, int  WriteZMode);
int  __stdcall dx_DrawExtendVStringToZBuffer( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, int  WriteZMode);
int  __stdcall dx_DrawExtendNVStringToZBuffer( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, size_t  StringLength, int  WriteZMode);
int  __stdcall dx_DrawRotaStringToZBuffer( int  x, int  y, double  ExRateX, double  ExRateY, double  RotCenterX, double  RotCenterY, double  RotAngle, int  WriteZMode, int  VerticalFlag, const TCHAR * String);
int  __stdcall dx_DrawRotaNStringToZBuffer( int  x, int  y, double  ExRateX, double  ExRateY, double  RotCenterX, double  RotCenterY, double  RotAngle, int  WriteZMode, int  VerticalFlag, const TCHAR * String, size_t  StringLength);
int  __stdcall dx_DrawModiStringToZBuffer( int  x1, int  y1, int  x2, int  y2, int  x3, int  y3, int  x4, int  y4, int  WriteZMode, int  VerticalFlag, const TCHAR * String);
int  __stdcall dx_DrawModiNStringToZBuffer( int  x1, int  y1, int  x2, int  y2, int  x3, int  y3, int  x4, int  y4, int  WriteZMode, int  VerticalFlag, const TCHAR * String, size_t  StringLength);
int  __stdcall dx_DrawStringToHandle( int  x, int  y, const TCHAR * String, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE);
int  __stdcall dx_DrawNStringToHandle( int  x, int  y, const TCHAR * String, size_t  StringLength, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE);
int  __stdcall dx_DrawVStringToHandle( int  x, int  y, const TCHAR * String, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawNVStringToHandle( int  x, int  y, const TCHAR * String, size_t  StringLength, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawExtendStringToHandle( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE);
int  __stdcall dx_DrawExtendNStringToHandle( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, size_t  StringLength, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE);
int  __stdcall dx_DrawExtendVStringToHandle( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawExtendNVStringToHandle( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, size_t  StringLength, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawRotaStringToHandle( int  x, int  y, double  ExRateX, double  ExRateY, double  RotCenterX, double  RotCenterY, double  RotAngle, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor, int  VerticalFlag, const TCHAR * String);
int  __stdcall dx_DrawRotaNStringToHandle( int  x, int  y, double  ExRateX, double  ExRateY, double  RotCenterX, double  RotCenterY, double  RotAngle, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor, int  VerticalFlag, const TCHAR * String, size_t  StringLength);
int  __stdcall dx_DrawModiStringToHandle( int  x1, int  y1, int  x2, int  y2, int  x3, int  y3, int  x4, int  y4, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor, int  VerticalFlag, const TCHAR * String);
int  __stdcall dx_DrawModiNStringToHandle( int  x1, int  y1, int  x2, int  y2, int  x3, int  y3, int  x4, int  y4, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor, int  VerticalFlag, const TCHAR * String, size_t  StringLength);
int  __stdcall dx_DrawStringFToHandle( float  x, float  y, const TCHAR * String, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE);
int  __stdcall dx_DrawNStringFToHandle( float  x, float  y, const TCHAR * String, size_t  StringLength, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE);
int  __stdcall dx_DrawVStringFToHandle( float  x, float  y, const TCHAR * String, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawNVStringFToHandle( float  x, float  y, const TCHAR * String, size_t  StringLength, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawExtendStringFToHandle( float  x, float  y, double  ExRateX, double  ExRateY, const TCHAR * String, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE);
int  __stdcall dx_DrawExtendNStringFToHandle( float  x, float  y, double  ExRateX, double  ExRateY, const TCHAR * String, size_t  StringLength, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE);
int  __stdcall dx_DrawExtendVStringFToHandle( float  x, float  y, double  ExRateX, double  ExRateY, const TCHAR * String, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawExtendNVStringFToHandle( float  x, float  y, double  ExRateX, double  ExRateY, const TCHAR * String, size_t  StringLength, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawRotaStringFToHandle( float  x, float  y, double  ExRateX, double  ExRateY, double  RotCenterX, double  RotCenterY, double  RotAngle, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE, const TCHAR * String = NULL);
int  __stdcall dx_DrawRotaNStringFToHandle( float  x, float  y, double  ExRateX, double  ExRateY, double  RotCenterX, double  RotCenterY, double  RotAngle, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0, int  VerticalFlag = FALSE, const TCHAR * String = NULL, size_t  StringLength = 0);
int  __stdcall dx_DrawModiStringFToHandle( float  x1, float  y1, float  x2, float  y2, float  x3, float  y3, float  x4, float  y4, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor, int  VerticalFlag, const TCHAR * String);
int  __stdcall dx_DrawModiNStringFToHandle( float  x1, float  y1, float  x2, float  y2, float  x3, float  y3, float  x4, float  y4, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor, int  VerticalFlag, const TCHAR * String, size_t  StringLength);
int  __stdcall dx_DrawNumberToIToHandle( int  x, int  y, int  Num, int  RisesNum, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawNumberToFToHandle( int  x, int  y, double  Num, int  Length, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawNumberPlusToIToHandle( int  x, int  y, const TCHAR * NoteString, int  Num, int  RisesNum, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawNumberPlusToFToHandle( int  x, int  y, const TCHAR * NoteString, double  Num, int  Length, unsigned int  Color, int  FontHandle, unsigned int  EdgeColor = 0);
int  __stdcall dx_DrawStringToHandleToZBuffer( int  x, int  y, const TCHAR * String, int  FontHandle, int  WriteZMode, int  VerticalFlag = FALSE);
int  __stdcall dx_DrawNStringToHandleToZBuffer( int  x, int  y, const TCHAR * String, size_t  StringLength, int  FontHandle, int  WriteZMode, int  VerticalFlag = FALSE);
int  __stdcall dx_DrawVStringToHandleToZBuffer( int  x, int  y, const TCHAR * String, int  FontHandle, int  WriteZMode);
int  __stdcall dx_DrawNVStringToHandleToZBuffer( int  x, int  y, const TCHAR * String, size_t  StringLength, int  FontHandle, int  WriteZMode);
int  __stdcall dx_DrawExtendStringToHandleToZBuffer( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, int  FontHandle, int  WriteZMode, int  VerticalFlag = FALSE);
int  __stdcall dx_DrawExtendNStringToHandleToZBuffer( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, size_t  StringLength, int  FontHandle, int  WriteZMode, int  VerticalFlag = FALSE);
int  __stdcall dx_DrawExtendVStringToHandleToZBuffer( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, int  FontHandle, int  WriteZMode);
int  __stdcall dx_DrawExtendNVStringToHandleToZBuffer( int  x, int  y, double  ExRateX, double  ExRateY, const TCHAR * String, size_t  StringLength, int  FontHandle, int  WriteZMode);
int  __stdcall dx_DrawRotaStringToHandleToZBuffer( int  x, int  y, double  ExRateX, double  ExRateY, double  RotCenterX, double  RotCenterY, double  RotAngle, int  FontHandle, int  WriteZMode, int  VerticalFlag, const TCHAR * String);
int  __stdcall dx_DrawRotaNStringToHandleToZBuffer( int  x, int  y, double  ExRateX, double  ExRateY, double  RotCenterX, double  RotCenterY, double  RotAngle, int  FontHandle, int  WriteZMode, int  VerticalFlag, const TCHAR * String, size_t  StringLength);
int  __stdcall dx_DrawModiStringToHandleToZBuffer( int  x1, int  y1, int  x2, int  y2, int  x3, int  y3, int  x4, int  y4, int  FontHandle, int  WriteZMode, int  VerticalFlag, const TCHAR * String);
int  __stdcall dx_DrawModiNStringToHandleToZBuffer( int  x1, int  y1, int  x2, int  y2, int  x3, int  y3, int  x4, int  y4, int  FontHandle, int  WriteZMode, int  VerticalFlag, const TCHAR * String, size_t  StringLength);
int  __stdcall dx_ConvertMatrixFtoD( MATRIX_D *  Out, const MATRIX *  In);
int  __stdcall dx_ConvertMatrixDtoF( MATRIX *  Out, const MATRIX_D *  In);
int  __stdcall dx_CreateIdentityMatrix( MATRIX *  Out);
int  __stdcall dx_CreateIdentityMatrixD( MATRIX_D *  Out);
int  __stdcall dx_CreateLookAtMatrix( MATRIX *  Out, const VECTOR *  Eye, const VECTOR *  At, const VECTOR *  Up);
int  __stdcall dx_CreateLookAtMatrixD( MATRIX_D *  Out, const VECTOR_D *  Eye, const VECTOR_D *  At, const VECTOR_D *  Up);
int  __stdcall dx_CreateLookAtMatrix2( MATRIX *  Out, const VECTOR *  Eye, double  XZAngle, double  Oira);
int  __stdcall dx_CreateLookAtMatrix2D( MATRIX_D *  Out, const VECTOR_D *  Eye, double  XZAngle, double  Oira);
int  __stdcall dx_CreateLookAtMatrixRH( MATRIX *  Out, const VECTOR *  Eye, const VECTOR *  At, const VECTOR *  Up);
int  __stdcall dx_CreateLookAtMatrixRHD( MATRIX_D *  Out, const VECTOR_D *  Eye, const VECTOR_D *  At, const VECTOR_D *  Up);
int  __stdcall dx_CreateMultiplyMatrix( MATRIX *  Out, const MATRIX *  In1, const MATRIX *  In2);
int  __stdcall dx_CreateMultiplyMatrixD( MATRIX_D *  Out, const MATRIX_D *  In1, const MATRIX_D *  In2);
int  __stdcall dx_CreatePerspectiveFovMatrix( MATRIX *  Out, float  fov, float  zn, float  zf, float  aspect = -1.0f);
int  __stdcall dx_CreatePerspectiveFovMatrixD( MATRIX_D *  Out, double  fov, double  zn, double  zf, double  aspect = -1.0f);
int  __stdcall dx_CreatePerspectiveFovMatrixRH( MATRIX *  Out, float  fov, float  zn, float  zf, float  aspect = -1.0f);
int  __stdcall dx_CreatePerspectiveFovMatrixRHD( MATRIX_D *  Out, double  fov, double  zn, double  zf, double  aspect = -1.0f);
int  __stdcall dx_CreateOrthoMatrix( MATRIX *  Out, float  size, float  zn, float  zf, float  aspect = -1.0f);
int  __stdcall dx_CreateOrthoMatrixD( MATRIX_D *  Out, double  size, double  zn, double  zf, double  aspect = -1.0f);
int  __stdcall dx_CreateOrthoMatrixRH( MATRIX *  Out, float  size, float  zn, float  zf, float  aspect = -1.0f);
int  __stdcall dx_CreateOrthoMatrixRHD( MATRIX_D *  Out, double  size, double  zn, double  zf, double  aspect = -1.0f);
int  __stdcall dx_CreateScalingMatrix( MATRIX *  Out, float  sx, float  sy, float  sz);
int  __stdcall dx_CreateScalingMatrixD( MATRIX_D *  Out, double  sx, double  sy, double  sz);
int  __stdcall dx_CreateRotationXMatrix( MATRIX *  Out, float  Angle);
int  __stdcall dx_CreateRotationXMatrixD( MATRIX_D *  Out, double  Angle);
int  __stdcall dx_CreateRotationYMatrix( MATRIX *  Out, float  Angle);
int  __stdcall dx_CreateRotationYMatrixD( MATRIX_D *  Out, double  Angle);
int  __stdcall dx_CreateRotationZMatrix( MATRIX *  Out, float  Angle);
int  __stdcall dx_CreateRotationZMatrixD( MATRIX_D *  Out, double  Angle);
int  __stdcall dx_CreateTranslationMatrix( MATRIX *  Out, float  x, float  y, float  z);
int  __stdcall dx_CreateTranslationMatrixD( MATRIX_D *  Out, double  x, double  y, double  z);
int  __stdcall dx_CreateTransposeMatrix( MATRIX *  Out, const MATRIX *  In);
int  __stdcall dx_CreateTransposeMatrixD( MATRIX_D *  Out, const MATRIX_D *  In);
int  __stdcall dx_CreateInverseMatrix( MATRIX *  Out, const MATRIX *  In);
int  __stdcall dx_CreateInverseMatrixD( MATRIX_D *  Out, const MATRIX_D *  In);
int  __stdcall dx_CreateViewportMatrix( MATRIX *  Out, float  CenterX, float  CenterY, float  Width, float  Height);
int  __stdcall dx_CreateViewportMatrixD( MATRIX_D *  Out, double  CenterX, double  CenterY, double  Width, double  Height);
int  __stdcall dx_CreateRotationXYZMatrix( MATRIX *  Out, float  XRot, float  YRot, float  ZRot);
int  __stdcall dx_CreateRotationXYZMatrixD( MATRIX_D *  Out, double  XRot, double  YRot, double  ZRot);
int  __stdcall dx_CreateRotationXZYMatrix( MATRIX *  Out, float  XRot, float  YRot, float  ZRot);
int  __stdcall dx_CreateRotationXZYMatrixD( MATRIX_D *  Out, double  XRot, double  YRot, double  ZRot);
int  __stdcall dx_CreateRotationYXZMatrix( MATRIX *  Out, float  XRot, float  YRot, float  ZRot);
int  __stdcall dx_CreateRotationYXZMatrixD( MATRIX_D *  Out, double  XRot, double  YRot, double  ZRot);
int  __stdcall dx_CreateRotationYZXMatrix( MATRIX *  Out, float  XRot, float  YRot, float  ZRot);
int  __stdcall dx_CreateRotationYZXMatrixD( MATRIX_D *  Out, double  XRot, double  YRot, double  ZRot);
int  __stdcall dx_CreateRotationZXYMatrix( MATRIX *  Out, float  XRot, float  YRot, float  ZRot);
int  __stdcall dx_CreateRotationZXYMatrixD( MATRIX_D *  Out, double  XRot, double  YRot, double  ZRot);
int  __stdcall dx_CreateRotationZYXMatrix( MATRIX *  Out, float  XRot, float  YRot, float  ZRot);
int  __stdcall dx_CreateRotationZYXMatrixD( MATRIX_D *  Out, double  XRot, double  YRot, double  ZRot);
int  __stdcall dx_GetMatrixXYZRotation( const MATRIX *  In, float *  OutXRot, float *  OutYRot, float *  OutZRot);
int  __stdcall dx_GetMatrixXYZRotationD( const MATRIX_D *  In, double *  OutXRot, double *  OutYRot, double *  OutZRot);
int  __stdcall dx_GetMatrixXZYRotation( const MATRIX *  In, float *  OutXRot, float *  OutYRot, float *  OutZRot);
int  __stdcall dx_GetMatrixXZYRotationD( const MATRIX_D *  In, double *  OutXRot, double *  OutYRot, double *  OutZRot);
int  __stdcall dx_GetMatrixYXZRotation( const MATRIX *  In, float *  OutXRot, float *  OutYRot, float *  OutZRot);
int  __stdcall dx_GetMatrixYXZRotationD( const MATRIX_D *  In, double *  OutXRot, double *  OutYRot, double *  OutZRot);
int  __stdcall dx_GetMatrixYZXRotation( const MATRIX *  In, float *  OutXRot, float *  OutYRot, float *  OutZRot);
int  __stdcall dx_GetMatrixYZXRotationD( const MATRIX_D *  In, double *  OutXRot, double *  OutYRot, double *  OutZRot);
int  __stdcall dx_GetMatrixZXYRotation( const MATRIX *  In, float *  OutXRot, float *  OutYRot, float *  OutZRot);
int  __stdcall dx_GetMatrixZXYRotationD( const MATRIX_D *  In, double *  OutXRot, double *  OutYRot, double *  OutZRot);
int  __stdcall dx_GetMatrixZYXRotation( const MATRIX *  In, float *  OutXRot, float *  OutYRot, float *  OutZRot);
int  __stdcall dx_GetMatrixZYXRotationD( const MATRIX_D *  In, double *  OutXRot, double *  OutYRot, double *  OutZRot);
int  __stdcall dx_VectorConvertFtoD( VECTOR_D *  Out, const VECTOR *  In);
int  __stdcall dx_VectorConvertDtoF( VECTOR *  Out, const VECTOR_D *  In);
int  __stdcall dx_VectorNormalize( VECTOR *  Out, const VECTOR *  In);
int  __stdcall dx_VectorNormalizeD( VECTOR_D *  Out, const VECTOR_D *  In);
int  __stdcall dx_VectorScale( VECTOR *  Out, const VECTOR *  In, float  Scale);
int  __stdcall dx_VectorScaleD( VECTOR_D *  Out, const VECTOR_D *  In, double  Scale);
int  __stdcall dx_VectorMultiply( VECTOR *  Out, const VECTOR *  In1, const VECTOR *  In2);
int  __stdcall dx_VectorMultiplyD( VECTOR_D *  Out, const VECTOR_D *  In1, const VECTOR_D *  In2);
int  __stdcall dx_VectorSub( VECTOR *  Out, const VECTOR *  In1, const VECTOR *  In2);
int  __stdcall dx_VectorSubD( VECTOR_D *  Out, const VECTOR_D *  In1, const VECTOR_D *  In2);
int  __stdcall dx_VectorAdd( VECTOR *  Out, const VECTOR *  In1, const VECTOR *  In2);
int  __stdcall dx_VectorAddD( VECTOR_D *  Out, const VECTOR_D *  In1, const VECTOR_D *  In2);
int  __stdcall dx_VectorOuterProduct( VECTOR *  Out, const VECTOR *  In1, const VECTOR *  In2);
int  __stdcall dx_VectorOuterProductD( VECTOR_D *  Out, const VECTOR_D *  In1, const VECTOR_D *  In2);
float  __stdcall dx_VectorInnerProduct( const VECTOR *  In1, const VECTOR *  In2);
double __stdcall dx_VectorInnerProductD( const VECTOR_D * In1 , const VECTOR_D * In2 ) ;
int  __stdcall dx_VectorRotationX( VECTOR *  Out, const VECTOR *  In, double  Angle);
int  __stdcall dx_VectorRotationXD( VECTOR_D *  Out, const VECTOR_D *  In, double  Angle);
int  __stdcall dx_VectorRotationY( VECTOR *  Out, const VECTOR *  In, double  Angle);
int  __stdcall dx_VectorRotationYD( VECTOR_D *  Out, const VECTOR_D *  In, double  Angle);
int  __stdcall dx_VectorRotationZ( VECTOR *  Out, const VECTOR *  In, double  Angle);
int  __stdcall dx_VectorRotationZD( VECTOR_D *  Out, const VECTOR_D *  In, double  Angle);
int  __stdcall dx_VectorTransform( VECTOR *  Out, const VECTOR *  InVec, const MATRIX *  InMatrix);
int  __stdcall dx_VectorTransformD( VECTOR_D *  Out, const VECTOR_D *  InVec, const MATRIX_D *  InMatrix);
int  __stdcall dx_VectorTransformSR( VECTOR *  Out, const VECTOR *  InVec, const MATRIX *  InMatrix);
int  __stdcall dx_VectorTransformSRD( VECTOR_D *  Out, const VECTOR_D *  InVec, const MATRIX_D *  InMatrix);
int  __stdcall dx_VectorTransform4( VECTOR *  Out, float *  V4Out, const VECTOR *  InVec, const float *  V4In, const MATRIX *  InMatrix);
int  __stdcall dx_VectorTransform4D( VECTOR_D *  Out, double *  V4Out, const VECTOR_D *  InVec, const double *  V4In, const MATRIX_D *  InMatrix);
int  __stdcall dx_Segment_Segment_Analyse( const VECTOR *  SegmentAPos1, const VECTOR *  SegmentAPos2, const VECTOR *  SegmentBPos1, const VECTOR *  SegmentBPos2, SEGMENT_SEGMENT_RESULT *  Result);
int  __stdcall dx_Segment_Segment_AnalyseD( const VECTOR_D *  SegmentAPos1, const VECTOR_D *  SegmentAPos2, const VECTOR_D *  SegmentBPos1, const VECTOR_D *  SegmentBPos2, SEGMENT_SEGMENT_RESULT_D *  Result);
int  __stdcall dx_Segment_Point_Analyse( const VECTOR *  SegmentPos1, const VECTOR *  SegmentPos2, const VECTOR *  PointPos, SEGMENT_POINT_RESULT *  Result);
int  __stdcall dx_Segment_Point_AnalyseD( const VECTOR_D *  SegmentPos1, const VECTOR_D *  SegmentPos2, const VECTOR_D *  PointPos, SEGMENT_POINT_RESULT_D *  Result);
int  __stdcall dx_Segment_Triangle_Analyse( const VECTOR *  SegmentPos1, const VECTOR *  SegmentPos2, const VECTOR *  TrianglePos1, const VECTOR *  TrianglePos2, const VECTOR *  TrianglePos3, SEGMENT_TRIANGLE_RESULT *  Result);
int  __stdcall dx_Segment_Triangle_AnalyseD( const VECTOR_D *  SegmentPos1, const VECTOR_D *  SegmentPos2, const VECTOR_D *  TrianglePos1, const VECTOR_D *  TrianglePos2, const VECTOR_D *  TrianglePos3, SEGMENT_TRIANGLE_RESULT_D *  Result);
int  __stdcall dx_Triangle_Point_Analyse( const VECTOR *  TrianglePos1, const VECTOR *  TrianglePos2, const VECTOR *  TrianglePos3, const VECTOR *  PointPos, TRIANGLE_POINT_RESULT *  Result);
int  __stdcall dx_Triangle_Point_AnalyseD( const VECTOR_D *  TrianglePos1, const VECTOR_D *  TrianglePos2, const VECTOR_D *  TrianglePos3, const VECTOR_D *  PointPos, TRIANGLE_POINT_RESULT_D *  Result);
int  __stdcall dx_Plane_Point_Analyse( const VECTOR *  PlanePos, const VECTOR *  PlaneNormal, const VECTOR *  PointPos, PLANE_POINT_RESULT *  Result);
int  __stdcall dx_Plane_Point_AnalyseD( const VECTOR_D *  PlanePos, const VECTOR_D *  PlaneNormal, const VECTOR_D *  PointPos, PLANE_POINT_RESULT_D *  Result);
void  __stdcall dx_TriangleBarycenter( VECTOR  TrianglePos1, VECTOR  TrianglePos2, VECTOR  TrianglePos3, VECTOR  Position, float *  TrianglePos1Weight, float *  TrianglePos2Weight, float *  TrianglePos3Weight);
void  __stdcall dx_TriangleBarycenterD( VECTOR_D  TrianglePos1, VECTOR_D  TrianglePos2, VECTOR_D  TrianglePos3, VECTOR_D  Position, double *  TrianglePos1Weight, double *  TrianglePos2Weight, double *  TrianglePos3Weight);
float  __stdcall dx_Segment_Segment_MinLength( VECTOR  SegmentAPos1, VECTOR  SegmentAPos2, VECTOR  SegmentBPos1, VECTOR  SegmentBPos2);
double __stdcall dx_Segment_Segment_MinLengthD( VECTOR_D SegmentAPos1 , VECTOR_D SegmentAPos2 , VECTOR_D SegmentBPos1 , VECTOR_D SegmentBPos2 ) ;
float  __stdcall dx_Segment_Segment_MinLength_Square( VECTOR  SegmentAPos1, VECTOR  SegmentAPos2, VECTOR  SegmentBPos1, VECTOR  SegmentBPos2);
double __stdcall dx_Segment_Segment_MinLength_SquareD( VECTOR_D SegmentAPos1 , VECTOR_D SegmentAPos2 , VECTOR_D SegmentBPos1 , VECTOR_D SegmentBPos2 ) ;
float  __stdcall dx_Segment_Triangle_MinLength( VECTOR  SegmentPos1, VECTOR  SegmentPos2, VECTOR  TrianglePos1, VECTOR  TrianglePos2, VECTOR  TrianglePos3);
double __stdcall dx_Segment_Triangle_MinLengthD( VECTOR_D SegmentPos1 , VECTOR_D SegmentPos2 , VECTOR_D TrianglePos1 , VECTOR_D TrianglePos2 , VECTOR_D TrianglePos3 ) ;
float  __stdcall dx_Segment_Triangle_MinLength_Square( VECTOR  SegmentPos1, VECTOR  SegmentPos2, VECTOR  TrianglePos1, VECTOR  TrianglePos2, VECTOR  TrianglePos3);
double __stdcall dx_Segment_Triangle_MinLength_SquareD( VECTOR_D SegmentPos1 , VECTOR_D SegmentPos2 , VECTOR_D TrianglePos1 , VECTOR_D TrianglePos2 , VECTOR_D TrianglePos3 ) ;
float  __stdcall dx_Segment_Point_MinLength( VECTOR  SegmentPos1, VECTOR  SegmentPos2, VECTOR  PointPos);
double __stdcall dx_Segment_Point_MinLengthD( VECTOR_D SegmentPos1 , VECTOR_D SegmentPos2 , VECTOR_D PointPos ) ;
float  __stdcall dx_Segment_Point_MinLength_Square( VECTOR  SegmentPos1, VECTOR  SegmentPos2, VECTOR  PointPos);
double __stdcall dx_Segment_Point_MinLength_SquareD( VECTOR_D SegmentPos1 , VECTOR_D SegmentPos2 , VECTOR_D PointPos ) ;
float  __stdcall dx_Triangle_Point_MinLength( VECTOR  TrianglePos1, VECTOR  TrianglePos2, VECTOR  TrianglePos3, VECTOR  PointPos);
double __stdcall dx_Triangle_Point_MinLengthD( VECTOR_D TrianglePos1 , VECTOR_D TrianglePos2 , VECTOR_D TrianglePos3 , VECTOR_D PointPos ) ;
float  __stdcall dx_Triangle_Point_MinLength_Square( VECTOR  TrianglePos1, VECTOR  TrianglePos2, VECTOR  TrianglePos3, VECTOR  PointPos);
double __stdcall dx_Triangle_Point_MinLength_SquareD( VECTOR_D TrianglePos1 , VECTOR_D TrianglePos2 , VECTOR_D TrianglePos3 , VECTOR_D PointPos ) ;
float  __stdcall dx_Triangle_Triangle_MinLength( VECTOR  Triangle1Pos1, VECTOR  Triangle1Pos2, VECTOR  Triangle1Pos3, VECTOR  Triangle2Pos1, VECTOR  Triangle2Pos2, VECTOR  Triangle2Pos3);
double __stdcall dx_Triangle_Triangle_MinLengthD( VECTOR_D Triangle1Pos1 , VECTOR_D Triangle1Pos2 , VECTOR_D Triangle1Pos3 , VECTOR_D Triangle2Pos1 , VECTOR_D Triangle2Pos2 , VECTOR_D Triangle2Pos3 ) ;
float  __stdcall dx_Triangle_Triangle_MinLength_Square( VECTOR  Triangle1Pos1, VECTOR  Triangle1Pos2, VECTOR  Triangle1Pos3, VECTOR  Triangle2Pos1, VECTOR  Triangle2Pos2, VECTOR  Triangle2Pos3);
double __stdcall dx_Triangle_Triangle_MinLength_SquareD( VECTOR_D Triangle1Pos1 , VECTOR_D Triangle1Pos2 , VECTOR_D Triangle1Pos3 , VECTOR_D Triangle2Pos1 , VECTOR_D Triangle2Pos2 , VECTOR_D Triangle2Pos3 ) ;
VECTOR  __stdcall dx_Plane_Point_MinLength_Position( VECTOR  PlanePos, VECTOR  PlaneNormal, VECTOR  PointPos);
VECTOR_D  __stdcall dx_Plane_Point_MinLength_PositionD( VECTOR_D  PlanePos, VECTOR_D  PlaneNormal, VECTOR_D  PointPos);
float  __stdcall dx_Plane_Point_MinLength( VECTOR  PlanePos, VECTOR  PlaneNormal, VECTOR  PointPos);
double __stdcall dx_Plane_Point_MinLengthD( VECTOR_D PlanePos , VECTOR_D PlaneNormal , VECTOR_D PointPos ) ;
HITRESULT_LINE  __stdcall dx_HitCheck_Line_Triangle( VECTOR  LinePos1, VECTOR  LinePos2, VECTOR  TrianglePos1, VECTOR  TrianglePos2, VECTOR  TrianglePos3);
HITRESULT_LINE_D __stdcall dx_HitCheck_Line_TriangleD( VECTOR_D LinePos1 , VECTOR_D LinePos2 , VECTOR_D TrianglePos1 , VECTOR_D TrianglePos2 , VECTOR_D TrianglePos3 ) ;
int  __stdcall dx_HitCheck_Triangle_Triangle( VECTOR  Triangle1Pos1, VECTOR  Triangle1Pos2, VECTOR  Triangle1Pos3, VECTOR  Triangle2Pos1, VECTOR  Triangle2Pos2, VECTOR  Triangle2Pos3);
int  __stdcall dx_HitCheck_Triangle_TriangleD( VECTOR_D  Triangle1Pos1, VECTOR_D  Triangle1Pos2, VECTOR_D  Triangle1Pos3, VECTOR_D  Triangle2Pos1, VECTOR_D  Triangle2Pos2, VECTOR_D  Triangle2Pos3);
int  __stdcall dx_HitCheck_Triangle_Triangle_2D( VECTOR  Triangle1Pos1, VECTOR  Triangle1Pos2, VECTOR  Triangle1Pos3, VECTOR  Triangle2Pos1, VECTOR  Triangle2Pos2, VECTOR  Triangle2Pos3);
int  __stdcall dx_HitCheck_Triangle_TriangleD_2D( VECTOR_D  Triangle1Pos1, VECTOR_D  Triangle1Pos2, VECTOR_D  Triangle1Pos3, VECTOR_D  Triangle2Pos1, VECTOR_D  Triangle2Pos2, VECTOR_D  Triangle2Pos3);
HITRESULT_LINE  __stdcall dx_HitCheck_Line_Cube( VECTOR  LinePos1, VECTOR  LinePos2, VECTOR  CubePos1, VECTOR  CubePos2);
HITRESULT_LINE_D __stdcall dx_HitCheck_Line_CubeD( VECTOR_D LinePos1 , VECTOR_D LinePos2 , VECTOR_D CubePos1 , VECTOR_D CubePos2 ) ;
int  __stdcall dx_HitCheck_Point_Cone( VECTOR  PointPos, VECTOR  ConeTopPos, VECTOR  ConeBottomPos, float  ConeR);
int  __stdcall dx_HitCheck_Point_ConeD( VECTOR_D  PointPos, VECTOR_D  ConeTopPos, VECTOR_D  ConeBottomPos, double  ConeR);
int  __stdcall dx_HitCheck_Line_Sphere( VECTOR  LinePos1, VECTOR  LinePos2, VECTOR  SphereCenterPos, float  SphereR);
int  __stdcall dx_HitCheck_Line_SphereD( VECTOR_D  LinePos1, VECTOR_D  LinePos2, VECTOR_D  SphereCenterPos, double  SphereR);
int  __stdcall dx_HitCheck_Sphere_Sphere( VECTOR  Sphere1CenterPos, float  Sphere1R, VECTOR  Sphere2CenterPos, float  Sphere2R);
int  __stdcall dx_HitCheck_Sphere_SphereD( VECTOR_D  Sphere1CenterPos, double  Sphere1R, VECTOR_D  Sphere2CenterPos, double  Sphere2R);
int  __stdcall dx_HitCheck_Sphere_Capsule( VECTOR  SphereCenterPos, float  SphereR, VECTOR  CapPos1, VECTOR  CapPos2, float  CapR);
int  __stdcall dx_HitCheck_Sphere_CapsuleD( VECTOR_D  SphereCenterPos, double  SphereR, VECTOR_D  CapPos1, VECTOR_D  CapPos2, double  CapR);
int  __stdcall dx_HitCheck_Sphere_Triangle( VECTOR  SphereCenterPos, float  SphereR, VECTOR  TrianglePos1, VECTOR  TrianglePos2, VECTOR  TrianglePos3);
int  __stdcall dx_HitCheck_Sphere_TriangleD( VECTOR_D  SphereCenterPos, double  SphereR, VECTOR_D  TrianglePos1, VECTOR_D  TrianglePos2, VECTOR_D  TrianglePos3);
int  __stdcall dx_HitCheck_Capsule_Capsule( VECTOR  Cap1Pos1, VECTOR  Cap1Pos2, float  Cap1R, VECTOR  Cap2Pos1, VECTOR  Cap2Pos2, float  Cap2R);
int  __stdcall dx_HitCheck_Capsule_CapsuleD( VECTOR_D  Cap1Pos1, VECTOR_D  Cap1Pos2, double  Cap1R, VECTOR_D  Cap2Pos1, VECTOR_D  Cap2Pos2, double  Cap2R);
int  __stdcall dx_HitCheck_Capsule_Triangle( VECTOR  CapPos1, VECTOR  CapPos2, float  CapR, VECTOR  TrianglePos1, VECTOR  TrianglePos2, VECTOR  TrianglePos3);
int  __stdcall dx_HitCheck_Capsule_TriangleD( VECTOR_D  CapPos1, VECTOR_D  CapPos2, double  CapR, VECTOR_D  TrianglePos1, VECTOR_D  TrianglePos2, VECTOR_D  TrianglePos3);
int  __stdcall dx_RectClipping( RECT *  Rect, const RECT *  ClippuRect);
int  __stdcall dx_RectAdjust( RECT *  Rect);
int  __stdcall dx_GetRectSize( const RECT *  Rect, int *  Width, int *  Height);
MATRIX  __stdcall dx_MGetIdent( void);
MATRIX_D  __stdcall dx_MGetIdentD( void);
MATRIX  __stdcall dx_MMult( MATRIX  In1, MATRIX  In2);
MATRIX_D  __stdcall dx_MMultD( MATRIX_D  In1, MATRIX_D  In2);
MATRIX  __stdcall dx_MScale( MATRIX  InM, float  Scale);
MATRIX_D  __stdcall dx_MScaleD( MATRIX_D  InM, double  Scale);
MATRIX  __stdcall dx_MAdd( MATRIX  In1, MATRIX  In2);
MATRIX_D  __stdcall dx_MAddD( MATRIX_D  In1, MATRIX_D  In2);
MATRIX  __stdcall dx_MGetScale( VECTOR  Scale);
MATRIX_D  __stdcall dx_MGetScaleD( VECTOR_D  Scale);
MATRIX  __stdcall dx_MGetRotX( float  XAxisRotate);
MATRIX_D  __stdcall dx_MGetRotXD( double  XAxisRotate);
MATRIX  __stdcall dx_MGetRotY( float  YAxisRotate);
MATRIX_D  __stdcall dx_MGetRotYD( double  YAxisRotate);
MATRIX  __stdcall dx_MGetRotZ( float  ZAxisRotate);
MATRIX_D  __stdcall dx_MGetRotZD( double  ZAxisRotate);
MATRIX  __stdcall dx_MGetRotAxis( VECTOR  RotateAxis, float  Rotate);
MATRIX_D  __stdcall dx_MGetRotAxisD( VECTOR_D  RotateAxis, double  Rotate);
MATRIX  __stdcall dx_MGetRotVec2( VECTOR  In1, VECTOR  In2);
MATRIX_D  __stdcall dx_MGetRotVec2D( VECTOR_D  In1, VECTOR_D  In2);
MATRIX  __stdcall dx_MGetTranslate( VECTOR  Trans);
MATRIX_D  __stdcall dx_MGetTranslateD( VECTOR_D  Trans);
MATRIX  __stdcall dx_MGetAxis1( VECTOR  XAxis, VECTOR  YAxis, VECTOR  ZAxis, VECTOR  Pos);
MATRIX_D  __stdcall dx_MGetAxis1D( VECTOR_D  XAxis, VECTOR_D  YAxis, VECTOR_D  ZAxis, VECTOR_D  Pos);
MATRIX  __stdcall dx_MGetAxis2( VECTOR  XAxis, VECTOR  YAxis, VECTOR  ZAxis, VECTOR  Pos);
MATRIX_D  __stdcall dx_MGetAxis2D( VECTOR_D  XAxis, VECTOR_D  YAxis, VECTOR_D  ZAxis, VECTOR_D  Pos);
MATRIX  __stdcall dx_MTranspose( MATRIX  InM);
MATRIX_D  __stdcall dx_MTransposeD( MATRIX_D  InM);
MATRIX  __stdcall dx_MInverse( MATRIX  InM);
MATRIX_D  __stdcall dx_MInverseD( MATRIX_D  InM);
VECTOR  __stdcall dx_MGetSize( MATRIX  InM);
VECTOR_D  __stdcall dx_MGetSizeD( MATRIX_D  InM);
MATRIX  __stdcall dx_MGetRotElem( MATRIX  InM);
MATRIX_D  __stdcall dx_MGetRotElemD( MATRIX_D  InM);
VECTOR  __stdcall dx_VNorm( VECTOR  In);
VECTOR_D  __stdcall dx_VNormD( VECTOR_D  In);
float  __stdcall dx_VSize( VECTOR  In);
double __stdcall dx_VSizeD( VECTOR_D In ) ;
float  __stdcall dx_VCos( VECTOR  In1, VECTOR  In2);
double __stdcall dx_VCosD( VECTOR_D In1 , VECTOR_D In2 ) ;
float  __stdcall dx_VRad( VECTOR  In1, VECTOR  In2);
double __stdcall dx_VRadD( VECTOR_D In1 , VECTOR_D In2 ) ;
FLOAT4  __stdcall dx_QTRot( VECTOR  Axis, float  Angle);
DOUBLE4  __stdcall dx_QTRotD( VECTOR_D  Axis, double  Angle);
VECTOR  __stdcall dx_VRotQ( VECTOR  P, VECTOR  Axis, float  Angle);
VECTOR_D  __stdcall dx_VRotQD( VECTOR_D  P, VECTOR_D  Axis, double  Angle);
int __stdcall dx_CreateGraphImageOrDIBGraph( const TCHAR * FileName , const void * DataImage , int DataImageSize , int DataImageType , int BmpFlag , int ReverseFlag , BASEIMAGE * BaseImage , BITMAPINFO * * BmpInfo , void * * GraphData ) ;
int __stdcall dx_CreateGraphImageOrDIBGraphWithStrLen( const TCHAR * FileName , size_t FileNameLength , const void * DataImage , int DataImageSize , int DataImageType , int BmpFlag , int ReverseFlag , BASEIMAGE * BaseImage , BITMAPINFO * * BmpInfo , void * * GraphData ) ;
int __stdcall dx_CreateGraphImageType2( STREAMDATA * Src , BASEIMAGE * Dest ) ;
int __stdcall dx_CreateBmpInfo( BITMAPINFO * BmpInfo , int Width , int Height , int Pitch , const void * SrcGrData , void * * DestGrData ) ;
int  __stdcall dx_GetImageSize_File( const TCHAR * FileName, int *  SizeX, int *  SizeY);
int  __stdcall dx_GetImageSize_FileWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int *  SizeX, int *  SizeY);
int  __stdcall dx_GetImageSize_Mem( const void * FileImage, int  FileImageSize, int *  SizeX, int *  SizeY);
unsigned int __stdcall dx_GetGraphImageFullColorCode( const BASEIMAGE * GraphImage , int x , int y ) ;
int __stdcall dx_CreateGraphImage_plus_Alpha( const TCHAR * FileName , const void * RgbImage , int RgbImageSize , int RgbImageType , const void * AlphaImage , int AlphaImageSize , int AlphaImageType , BASEIMAGE * RgbGraphImage , BASEIMAGE * AlphaGraphImage , int ReverseFlag ) ;
int __stdcall dx_CreateGraphImage_plus_AlphaWithStrLen( const TCHAR * FileName , size_t FileNameLength , const void * RgbImage , int RgbImageSize , int RgbImageType , const void * AlphaImage , int AlphaImageSize , int AlphaImageType , BASEIMAGE * RgbGraphImage , BASEIMAGE * AlphaGraphImage , int ReverseFlag ) ;
int __stdcall dx_ReverseGraphImage( BASEIMAGE * GraphImage ) ;
int __stdcall dx_AddUserGraphLoadFunction4( int ( *UserLoadFunc )( STREAMDATA * Src , BASEIMAGE * BaseImage ) ) ;
int __stdcall dx_SubUserGraphLoadFunction4( int ( *UserLoadFunc )( STREAMDATA * Src , BASEIMAGE * BaseImage ) ) ;
int  __stdcall dx_SetUseFastLoadFlag( int  Flag);
int  __stdcall dx_SetGraphDataShavedMode( int  ShavedMode);
int  __stdcall dx_GetGraphDataShavedMode( void);
int  __stdcall dx_SetUsePremulAlphaConvertLoad( int  UseFlag);
int __stdcall dx_CreateBaseImage( const TCHAR * FileName , const void * FileImage , int FileImageSize , int DataType , BASEIMAGE * BaseImage , int ReverseFlag ) ;
int __stdcall dx_CreateBaseImageWithStrLen( const TCHAR * FileName , size_t FileNameLength , const void * FileImage , int FileImageSize , int DataType , BASEIMAGE * BaseImage , int ReverseFlag ) ;
int __stdcall dx_CreateGraphImage( const TCHAR * FileName , const void * DataImage , int DataImageSize , int DataImageType , BASEIMAGE * GraphImage , int ReverseFlag ) ;
int __stdcall dx_CreateBaseImageToFile( const TCHAR * FileName , BASEIMAGE * BaseImage , int ReverseFlag = FALSE ) ;
int __stdcall dx_CreateBaseImageToFileWithStrLen( const TCHAR * FileName , size_t FileNameLength , BASEIMAGE * BaseImage , int ReverseFlag = FALSE ) ;
int __stdcall dx_CreateBaseImageToMem( const void * FileImage , int FileImageSize , BASEIMAGE * BaseImage , int ReverseFlag = FALSE ) ;
int __stdcall dx_CreateARGBF32ColorBaseImage( int SizeX , int SizeY , BASEIMAGE * BaseImage ) ;
int __stdcall dx_CreateARGBF16ColorBaseImage( int SizeX , int SizeY , BASEIMAGE * BaseImage ) ;
int __stdcall dx_CreateARGB8ColorBaseImage( int SizeX , int SizeY , BASEIMAGE * BaseImage ) ;
int __stdcall dx_CreateXRGB8ColorBaseImage( int SizeX , int SizeY , BASEIMAGE * BaseImage ) ;
int __stdcall dx_CreateRGB8ColorBaseImage( int SizeX , int SizeY , BASEIMAGE * BaseImage ) ;
int __stdcall dx_CreateARGB4ColorBaseImage( int SizeX , int SizeY , BASEIMAGE * BaseImage ) ;
int __stdcall dx_CreateA1R5G5B5ColorBaseImage( int SizeX , int SizeY , BASEIMAGE * BaseImage ) ;
int __stdcall dx_CreateX1R5G5B5ColorBaseImage( int SizeX , int SizeY , BASEIMAGE * BaseImage ) ;
int __stdcall dx_CreateR5G5B5A1ColorBaseImage( int SizeX , int SizeY , BASEIMAGE * BaseImage ) ;
int __stdcall dx_CreateR5G6B5ColorBaseImage( int SizeX , int SizeY , BASEIMAGE * BaseImage ) ;
int __stdcall dx_CreatePAL8ColorBaseImage( int SizeX , int SizeY , BASEIMAGE * BaseImage , int UseAlpha = FALSE ) ;
int __stdcall dx_CreateColorDataBaseImage( int SizeX , int SizeY , const COLORDATA * ColorData , BASEIMAGE * BaseImage ) ;
int __stdcall dx_GetBaseImageGraphDataSize( const BASEIMAGE * BaseImage ) ;
int __stdcall dx_DerivationBaseImage( const BASEIMAGE * BaseImage , int x1 , int y1 , int x2 , int y2 , BASEIMAGE * NewBaseImage ) ;
int __stdcall dx_ReleaseBaseImage( BASEIMAGE * BaseImage ) ;
int __stdcall dx_ReleaseGraphImage( BASEIMAGE * GraphImage ) ;
int __stdcall dx_ConvertNormalFormatBaseImage( BASEIMAGE * BaseImage , int ReleaseOrigGraphData = TRUE ) ;
int __stdcall dx_ConvertPremulAlphaBaseImage( BASEIMAGE * BaseImage ) ;
int __stdcall dx_ConvertInterpAlphaBaseImage( BASEIMAGE * BaseImage ) ;
int __stdcall dx_GetDrawScreenBaseImage( int x1 , int y1 , int x2 , int y2 , BASEIMAGE * BaseImage ) ;
int __stdcall dx_GetDrawScreenBaseImageDestPos( int x1 , int y1 , int x2 , int y2 , BASEIMAGE * BaseImage , int DestX , int DestY ) ;
int __stdcall dx_FillBaseImage( BASEIMAGE * BaseImage , int r , int g , int b , int a ) ;
int __stdcall dx_FillRectBaseImage( BASEIMAGE * BaseImage , int x , int y , int w , int h , int r , int g , int b , int a ) ;
int __stdcall dx_ClearRectBaseImage( BASEIMAGE * BaseImage , int x , int y , int w , int h ) ;
int __stdcall dx_GetPaletteBaseImage( const BASEIMAGE * BaseImage , int PaletteNo , int * r , int * g , int * b , int * a ) ;
int __stdcall dx_SetPaletteBaseImage( BASEIMAGE * BaseImage , int PaletteNo , int r , int g , int b , int a ) ;
int __stdcall dx_SetPixelPalCodeBaseImage( BASEIMAGE * BaseImage , int x , int y , int palNo ) ;
int __stdcall dx_GetPixelPalCodeBaseImage( const BASEIMAGE * BaseImage , int x , int y ) ;
int __stdcall dx_SetPixelBaseImage( BASEIMAGE * BaseImage , int x , int y , int r , int g , int b , int a ) ;
int __stdcall dx_SetPixelBaseImageF( BASEIMAGE * BaseImage , int x , int y , float r , float g , float b , float a ) ;
int __stdcall dx_GetPixelBaseImage( const BASEIMAGE * BaseImage , int x , int y , int * r , int * g , int * b , int * a ) ;
int __stdcall dx_GetPixelBaseImageF( const BASEIMAGE * BaseImage , int x , int y , float * r , float * g , float * b , float * a ) ;
int __stdcall dx_DrawLineBaseImage( BASEIMAGE * BaseImage , int x1 , int y1 , int x2 , int y2 , int r , int g , int b , int a ) ;
int __stdcall dx_DrawCircleBaseImage( BASEIMAGE * BaseImage , int x , int y , int radius , int r , int g , int b , int a , int FillFlag = TRUE ) ;
int __stdcall dx_BltBaseImage( int SrcX , int SrcY , int SrcSizeX , int SrcSizeY , int DestX , int DestY , BASEIMAGE * SrcBaseImage , BASEIMAGE * DestBaseImage ) ;
int __stdcall dx_BltBaseImage_2( int DestX , int DestY , BASEIMAGE * SrcBaseImage , BASEIMAGE * DestBaseImage ) ;
int __stdcall dx_BltBaseImageWithTransColor( int SrcX , int SrcY , int SrcSizeX , int SrcSizeY , int DestX , int DestY , BASEIMAGE * SrcBaseImage , BASEIMAGE * DestBaseImage , int Tr , int Tg , int Tb , int Ta ) ;
int __stdcall dx_BltBaseImageWithAlphaBlend( int SrcX , int SrcY , int SrcSizeX , int SrcSizeY , int DestX , int DestY , BASEIMAGE * SrcBaseImage , BASEIMAGE * DestBaseImage , int Opacity = 255 ) ;
int __stdcall dx_ReverseBaseImageH( BASEIMAGE * BaseImage ) ;
int __stdcall dx_ReverseBaseImageV( BASEIMAGE * BaseImage ) ;
int __stdcall dx_ReverseBaseImage( BASEIMAGE * BaseImage ) ;
int __stdcall dx_CheckPixelAlphaBaseImage( const BASEIMAGE * BaseImage ) ;
int __stdcall dx_GetBaseImageUseMaxPaletteNo( const BASEIMAGE * BaseImage ) ;
int  __stdcall dx_ReadJpegExif( const TCHAR * JpegFilePath, BYTE *  ExifBuffer_Array, size_t  ExifBufferSize);
int  __stdcall dx_ReadJpegExifWithStrLen( const TCHAR * JpegFilePath, size_t  JpegFilePathLength, BYTE *  ExifBuffer_Array, size_t  ExifBufferSize);
int __stdcall dx_SaveBaseImageToBmp( const TCHAR * FilePath , const BASEIMAGE * BaseImage ) ;
int __stdcall dx_SaveBaseImageToBmpWithStrLen( const TCHAR * FilePath , size_t FilePathLength , const BASEIMAGE * BaseImage ) ;
int __stdcall dx_SaveBaseImageToDds( const TCHAR * FilePath , const BASEIMAGE * BaseImage ) ;
int __stdcall dx_SaveBaseImageToDdsWithStrLen( const TCHAR * FilePath , size_t FilePathLength , const BASEIMAGE * BaseImage ) ;
int __stdcall dx_SaveBaseImageToPng( const TCHAR * FilePath , BASEIMAGE * BaseImage , int CompressionLevel ) ;
int __stdcall dx_SaveBaseImageToPngWithStrLen( const TCHAR * FilePath , size_t FilePathLength , BASEIMAGE * BaseImage , int CompressionLevel ) ;
int __stdcall dx_SaveBaseImageToJpeg( const TCHAR * FilePath , BASEIMAGE * BaseImage , int Quality , int Sample2x1 ) ;
int __stdcall dx_SaveBaseImageToJpegWithStrLen( const TCHAR * FilePath , size_t FilePathLength , BASEIMAGE * BaseImage , int Quality , int Sample2x1 ) ;
int __stdcall dx_DrawBaseImage( int x , int y , BASEIMAGE * BaseImage ) ;
int __stdcall dx_GraphColorMatchBltVer2( void * DestGraphData , int DestPitch , const COLORDATA * DestColorData , const void * SrcGraphData , int SrcPitch , const COLORDATA * SrcColorData , const void * AlphaMask , int AlphaPitch , const COLORDATA * AlphaColorData , POINT DestPoint , const RECT * SrcRect , int ReverseFlag , int TransColorAlphaTestFlag , unsigned int TransColor , int ImageShavedMode , int AlphaOnlyFlag = FALSE , int RedIsAlphaFlag = FALSE , int TransColorNoMoveFlag = FALSE , int Pal8ColorMatch = FALSE ) ;
COLOR_F  __stdcall dx_GetColorF( float  Red, float  Green, float  Blue, float  Alpha);
COLOR_U8  __stdcall dx_GetColorU8( int  Red, int  Green, int  Blue, int  Alpha);
unsigned int  __stdcall dx_GetColor( int  Red, int  Green, int  Blue);
int  __stdcall dx_GetColor2( unsigned int  Color, int *  Red, int *  Green, int *  Blue);
unsigned int  __stdcall dx_GetColor3( const COLORDATA *  ColorData, int  Red, int  Green, int  Blue, int  Alpha = 255);
unsigned int  __stdcall dx_GetColor4( const COLORDATA *  DestColorData, const COLORDATA *  SrcColorData, unsigned int  SrcColor);
int  __stdcall dx_GetColor5( const COLORDATA *  ColorData, unsigned int  Color, int *  Red, int *  Green, int *  Blue, int *  Alpha);
int  __stdcall dx_CreatePaletteColorData( COLORDATA *  ColorDataBuf);
int  __stdcall dx_CreateARGBF32ColorData( COLORDATA *  ColorDataBuf);
int  __stdcall dx_CreateARGBF16ColorData( COLORDATA *  ColorDataBuf);
int  __stdcall dx_CreateXRGB8ColorData( COLORDATA *  ColorDataBuf);
int  __stdcall dx_CreateARGB8ColorData( COLORDATA *  ColorDataBuf);
int  __stdcall dx_CreateARGB4ColorData( COLORDATA *  ColorDataBuf);
int  __stdcall dx_CreateA1R5G5B5ColorData( COLORDATA *  ColorDataBuf);
int  __stdcall dx_CreateX1R5G5B5ColorData( COLORDATA *  ColorDataBuf);
int  __stdcall dx_CreateR5G5B5A1ColorData( COLORDATA *  ColorDataBuf);
int  __stdcall dx_CreateR5G6B5ColorData( COLORDATA *  ColorDataBuf);
int  __stdcall dx_CreateFullColorData( COLORDATA *  ColorDataBuf);
int  __stdcall dx_CreateGrayColorData( COLORDATA *  ColorDataBuf);
int  __stdcall dx_CreatePal8ColorData( COLORDATA *  ColorDataBuf, int  UseAlpha = FALSE);
int  __stdcall dx_CreateColorData( COLORDATA *  ColorDataBuf, int  ColorBitDepth, DWORD  RedMask, DWORD  GreenMask, DWORD  BlueMask, DWORD  AlphaMask, int  ChannelNum = 0, int  ChannelBitDepth = 0, int  FloatTypeFlag = FALSE);
void  __stdcall dx_SetColorDataNoneMask( COLORDATA *  ColorData);
int  __stdcall dx_CmpColorData( const COLORDATA *  ColorData1, const COLORDATA *  ColorData2);
int  __stdcall dx_InitSoftImage( void);
int  __stdcall dx_LoadSoftImage( const TCHAR * FileName);
int  __stdcall dx_LoadSoftImageWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_LoadARGB8ColorSoftImage( const TCHAR * FileName);
int  __stdcall dx_LoadARGB8ColorSoftImageWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_LoadXRGB8ColorSoftImage( const TCHAR * FileName);
int  __stdcall dx_LoadXRGB8ColorSoftImageWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_LoadSoftImageToMem( const void * FileImage, int  FileImageSize);
int  __stdcall dx_LoadARGB8ColorSoftImageToMem( const void * FileImage, int  FileImageSize);
int  __stdcall dx_LoadXRGB8ColorSoftImageToMem( const void * FileImage, int  FileImageSize);
int  __stdcall dx_MakeSoftImage( int  SizeX, int  SizeY);
int  __stdcall dx_MakeARGBF32ColorSoftImage( int  SizeX, int  SizeY);
int  __stdcall dx_MakeARGBF16ColorSoftImage( int  SizeX, int  SizeY);
int  __stdcall dx_MakeARGB8ColorSoftImage( int  SizeX, int  SizeY);
int  __stdcall dx_MakeXRGB8ColorSoftImage( int  SizeX, int  SizeY);
int  __stdcall dx_MakeARGB4ColorSoftImage( int  SizeX, int  SizeY);
int  __stdcall dx_MakeA1R5G5B5ColorSoftImage( int  SizeX, int  SizeY);
int  __stdcall dx_MakeX1R5G5B5ColorSoftImage( int  SizeX, int  SizeY);
int  __stdcall dx_MakeR5G5B5A1ColorSoftImage( int  SizeX, int  SizeY);
int  __stdcall dx_MakeR5G6B5ColorSoftImage( int  SizeX, int  SizeY);
int  __stdcall dx_MakeRGB8ColorSoftImage( int  SizeX, int  SizeY);
int  __stdcall dx_MakePAL8ColorSoftImage( int  SizeX, int  SizeY, int  UseAlpha = FALSE);
int  __stdcall dx_DeleteSoftImage( int  SIHandle);
int  __stdcall dx_GetSoftImageSize( int  SIHandle, int *  Width, int *  Height);
int  __stdcall dx_CheckPaletteSoftImage( int  SIHandle);
int  __stdcall dx_CheckAlphaSoftImage( int  SIHandle);
int  __stdcall dx_CheckPixelAlphaSoftImage( int  SIHandle);
int  __stdcall dx_GetDrawScreenSoftImage( int  x1, int  y1, int  x2, int  y2, int  SIHandle);
int  __stdcall dx_GetDrawScreenSoftImageDestPos( int  x1, int  y1, int  x2, int  y2, int  SIHandle, int  DestX, int  DestY);
int  __stdcall dx_FillSoftImage( int  SIHandle, int  r, int  g, int  b, int  a);
int  __stdcall dx_ClearRectSoftImage( int  SIHandle, int  x, int  y, int  w, int  h);
int  __stdcall dx_GetPaletteSoftImage( int  SIHandle, int  PaletteNo, int *  r, int *  g, int *  b, int *  a);
int  __stdcall dx_SetPaletteSoftImage( int  SIHandle, int  PaletteNo, int  r, int  g, int  b, int  a);
int  __stdcall dx_DrawPixelPalCodeSoftImage( int  SIHandle, int  x, int  y, int  palNo);
int  __stdcall dx_GetPixelPalCodeSoftImage( int  SIHandle, int  x, int  y);
void *  __stdcall dx_GetImageAddressSoftImage( int  SIHandle);
int  __stdcall dx_GetPitchSoftImage( int  SIHandle);
int  __stdcall dx_DrawPixelSoftImage( int  SIHandle, int  x, int  y, int  r, int  g, int  b, int  a);
int  __stdcall dx_DrawPixelSoftImageF( int  SIHandle, int  x, int  y, float  r, float  g, float  b, float  a);
void  __stdcall dx_DrawPixelSoftImage_Unsafe_XRGB8( int  SIHandle, int  x, int  y, int  r, int  g, int  b);
void  __stdcall dx_DrawPixelSoftImage_Unsafe_ARGB8( int  SIHandle, int  x, int  y, int  r, int  g, int  b, int  a);
int  __stdcall dx_GetPixelSoftImage( int  SIHandle, int  x, int  y, int *  r, int *  g, int *  b, int *  a);
int  __stdcall dx_GetPixelSoftImageF( int  SIHandle, int  x, int  y, float *  r, float *  g, float *  b, float *  a);
void  __stdcall dx_GetPixelSoftImage_Unsafe_XRGB8( int  SIHandle, int  x, int  y, int *  r, int *  g, int *  b);
void  __stdcall dx_GetPixelSoftImage_Unsafe_ARGB8( int  SIHandle, int  x, int  y, int *  r, int *  g, int *  b, int *  a);
int  __stdcall dx_DrawLineSoftImage( int  SIHandle, int  x1, int  y1, int  x2, int  y2, int  r, int  g, int  b, int  a);
int  __stdcall dx_DrawCircleSoftImage( int  SIHandle, int  x, int  y, int  radius, int  r, int  g, int  b, int  a, int  FillFlag = TRUE);
int  __stdcall dx_BltSoftImage( int  SrcX, int  SrcY, int  SrcSizeX, int  SrcSizeY, int  SrcSIHandle, int  DestX, int  DestY, int  DestSIHandle);
int  __stdcall dx_BltSoftImageWithTransColor( int  SrcX, int  SrcY, int  SrcSizeX, int  SrcSizeY, int  SrcSIHandle, int  DestX, int  DestY, int  DestSIHandle, int  Tr, int  Tg, int  Tb, int  Ta);
int  __stdcall dx_BltSoftImageWithAlphaBlend( int  SrcX, int  SrcY, int  SrcSizeX, int  SrcSizeY, int  SrcSIHandle, int  DestX, int  DestY, int  DestSIHandle, int  Opacity = 255);
int  __stdcall dx_ReverseSoftImageH( int  SIHandle);
int  __stdcall dx_ReverseSoftImageV( int  SIHandle);
int  __stdcall dx_ReverseSoftImage( int  SIHandle);
int  __stdcall dx_BltStringSoftImage( int  x, int  y, const TCHAR * StrData, int  DestSIHandle, int  DestEdgeSIHandle = -1, int  VerticalFlag = FALSE);
int  __stdcall dx_BltStringSoftImageWithStrLen( int  x, int  y, const TCHAR * StrData, size_t  StrDataLength, int  DestSIHandle, int  DestEdgeSIHandle = -1, int  VerticalFlag = FALSE);
int  __stdcall dx_BltStringSoftImageToHandle( int  x, int  y, const TCHAR * StrData, int  DestSIHandle, int  DestEdgeSIHandle, int  FontHandle, int  VerticalFlag = FALSE);
int  __stdcall dx_BltStringSoftImageToHandleWithStrLen( int  x, int  y, const TCHAR * StrData, size_t  StrDataLength, int  DestSIHandle, int  DestEdgeSIHandle, int  FontHandle, int  VerticalFlag = FALSE);
int  __stdcall dx_DrawSoftImage( int  x, int  y, int  SIHandle);
int  __stdcall dx_SaveSoftImageToBmp( const TCHAR * FilePath, int  SIHandle);
int  __stdcall dx_SaveSoftImageToBmpWithStrLen( const TCHAR * FilePath, size_t  FilePathLength, int  SIHandle);
int  __stdcall dx_SaveSoftImageToDds( const TCHAR * FilePath, int  SIHandle);
int  __stdcall dx_SaveSoftImageToDdsWithStrLen( const TCHAR * FilePath, size_t  FilePathLength, int  SIHandle);
int  __stdcall dx_SaveSoftImageToPng( const TCHAR * FilePath, int  SIHandle, int  CompressionLevel);
int  __stdcall dx_SaveSoftImageToPngWithStrLen( const TCHAR * FilePath, size_t  FilePathLength, int  SIHandle, int  CompressionLevel);
int  __stdcall dx_SaveSoftImageToJpeg( const TCHAR * FilePath, int  SIHandle, int  Quality, int  Sample2x1);
int  __stdcall dx_SaveSoftImageToJpegWithStrLen( const TCHAR * FilePath, size_t  FilePathLength, int  SIHandle, int  Quality, int  Sample2x1);
int  __stdcall dx_InitSoundMem( int  LogOutFlag = FALSE);
int  __stdcall dx_AddSoundData( int  Handle = -1);
int __stdcall dx_AddStreamSoundMem( STREAMDATA * Stream , int LoopNum , int SoundHandle , int StreamDataType , int * CanStreamCloseFlag , int UnionHandle = -1 ) ;
int  __stdcall dx_AddStreamSoundMemToMem( const void * FileImage, size_t  FileImageSize, int  LoopNum, int  SoundHandle, int  StreamDataType, int  UnionHandle = -1);
int  __stdcall dx_AddStreamSoundMemToFile( const TCHAR * WaveFile, int  LoopNum, int  SoundHandle, int  StreamDataType, int  UnionHandle = -1);
int  __stdcall dx_AddStreamSoundMemToFileWithStrLen( const TCHAR * WaveFile, size_t  WaveFilePathLength, int  LoopNum, int  SoundHandle, int  StreamDataType, int  UnionHandle = -1);
int  __stdcall dx_SetupStreamSoundMem( int  SoundHandle);
int  __stdcall dx_PlayStreamSoundMem( int  SoundHandle, int  PlayType = DX_PLAYTYPE_LOOP, int  TopPositionFlag = TRUE);
int  __stdcall dx_CheckStreamSoundMem( int  SoundHandle);
int  __stdcall dx_StopStreamSoundMem( int  SoundHandle);
int  __stdcall dx_SetStreamSoundCurrentPosition( LONGLONG  Byte, int  SoundHandle);
LONGLONG  __stdcall dx_GetStreamSoundCurrentPosition( int  SoundHandle);
int  __stdcall dx_SetStreamSoundCurrentTime( LONGLONG  Time, int  SoundHandle);
LONGLONG  __stdcall dx_GetStreamSoundCurrentTime( int  SoundHandle);
int  __stdcall dx_ProcessStreamSoundMem( int  SoundHandle);
int  __stdcall dx_ProcessStreamSoundMemAll( void);
int  __stdcall dx_LoadSoundMem2( const TCHAR * FileName1, const TCHAR * FileName2);
int  __stdcall dx_LoadSoundMem2WithStrLen( const TCHAR * FileName1, size_t  FileName1Length, const TCHAR * FileName2, size_t  FileName2Length);
int  __stdcall dx_LoadBGM( const TCHAR * FileName);
int  __stdcall dx_LoadBGMWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_LoadSoundMemBase( const TCHAR * FileName, int  BufferNum, int  UnionHandle = -1);
int  __stdcall dx_LoadSoundMemBaseWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  BufferNum, int  UnionHandle = -1);
int  __stdcall dx_LoadSoundMem( const TCHAR * FileName, int  BufferNum = 3, int  UnionHandle = -1);
int  __stdcall dx_LoadSoundMemWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  BufferNum = 3, int  UnionHandle = -1);
int  __stdcall dx_LoadSoundMemToBufNumSitei( const TCHAR * FileName, int  BufferNum);
int  __stdcall dx_LoadSoundMemToBufNumSiteiWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  BufferNum);
int  __stdcall dx_DuplicateSoundMem( int  SrcSoundHandle, int  BufferNum = 3);
int  __stdcall dx_LoadSoundMemByMemImageBase( const void * FileImage, size_t  FileImageSize, int  BufferNum, int  UnionHandle = -1);
int  __stdcall dx_LoadSoundMemByMemImage( const void * FileImage, size_t  FileImageSize, int  BufferNum = 3, int  UnionHandle = -1);
int __stdcall dx_LoadSoundMemByMemImage2( const void * WaveImage , size_t WaveImageSize , const WAVEFORMATEX * WaveFormat , size_t WaveHeaderSize ) ;
int  __stdcall dx_LoadSoundMemByMemImageToBufNumSitei( const void * FileImage, size_t  FileImageSize, int  BufferNum);
int  __stdcall dx_LoadSoundMem2ByMemImage( const void * FileImage1, size_t  FileImageSize1, const void * FileImage2, size_t  FileImageSize2);
int  __stdcall dx_LoadSoundMemFromSoftSound( int  SoftSoundHandle, int  BufferNum = 3);
int  __stdcall dx_DeleteSoundMem( int  SoundHandle, int  LogOutFlag = FALSE);
int  __stdcall dx_PlaySoundMem( int  SoundHandle, int  PlayType, int  TopPositionFlag = TRUE);
int  __stdcall dx_StopSoundMem( int  SoundHandle);
int  __stdcall dx_CheckSoundMem( int  SoundHandle);
int  __stdcall dx_SetPanSoundMem( int  PanPal, int  SoundHandle);
int  __stdcall dx_ChangePanSoundMem( int  PanPal, int  SoundHandle);
int  __stdcall dx_GetPanSoundMem( int  SoundHandle);
int  __stdcall dx_SetVolumeSoundMem( int  VolumePal, int  SoundHandle);
int  __stdcall dx_ChangeVolumeSoundMem( int  VolumePal, int  SoundHandle);
int  __stdcall dx_GetVolumeSoundMem( int  SoundHandle);
int  __stdcall dx_GetVolumeSoundMem2( int  SoundHandle);
int  __stdcall dx_SetChannelVolumeSoundMem( int  Channel, int  VolumePal, int  SoundHandle);
int  __stdcall dx_ChangeChannelVolumeSoundMem( int  Channel, int  VolumePal, int  SoundHandle);
int  __stdcall dx_GetChannelVolumeSoundMem( int  Channel, int  SoundHandle);
int  __stdcall dx_GetChannelVolumeSoundMem2( int  Channel, int  SoundHandle);
int  __stdcall dx_SetFrequencySoundMem( int  FrequencyPal, int  SoundHandle);
int  __stdcall dx_GetFrequencySoundMem( int  SoundHandle);
int  __stdcall dx_ResetFrequencySoundMem( int  SoundHandle);
int  __stdcall dx_SetNextPlayPanSoundMem( int  PanPal, int  SoundHandle);
int  __stdcall dx_ChangeNextPlayPanSoundMem( int  PanPal, int  SoundHandle);
int  __stdcall dx_SetNextPlayVolumeSoundMem( int  VolumePal, int  SoundHandle);
int  __stdcall dx_ChangeNextPlayVolumeSoundMem( int  VolumePal, int  SoundHandle);
int  __stdcall dx_SetNextPlayChannelVolumeSoundMem( int  Channel, int  VolumePal, int  SoundHandle);
int  __stdcall dx_ChangeNextPlayChannelVolumeSoundMem( int  Channel, int  VolumePal, int  SoundHandle);
int  __stdcall dx_SetNextPlayFrequencySoundMem( int  FrequencyPal, int  SoundHandle);
int  __stdcall dx_SetCurrentPositionSoundMem( LONGLONG  SamplePosition, int  SoundHandle);
LONGLONG  __stdcall dx_GetCurrentPositionSoundMem( int  SoundHandle);
int  __stdcall dx_SetSoundCurrentPosition( LONGLONG  Byte, int  SoundHandle);
LONGLONG  __stdcall dx_GetSoundCurrentPosition( int  SoundHandle);
int  __stdcall dx_SetSoundCurrentTime( LONGLONG  Time, int  SoundHandle);
LONGLONG  __stdcall dx_GetSoundCurrentTime( int  SoundHandle);
LONGLONG  __stdcall dx_GetSoundTotalSample( int  SoundHandle);
LONGLONG  __stdcall dx_GetSoundTotalTime( int  SoundHandle);
int  __stdcall dx_SetLoopPosSoundMem( LONGLONG  LoopTime, int  SoundHandle);
int  __stdcall dx_SetLoopTimePosSoundMem( LONGLONG  LoopTime, int  SoundHandle);
int  __stdcall dx_SetLoopSamplePosSoundMem( LONGLONG  LoopSamplePosition, int  SoundHandle);
int  __stdcall dx_SetLoopStartTimePosSoundMem( LONGLONG  LoopStartTime, int  SoundHandle);
int  __stdcall dx_SetLoopStartSamplePosSoundMem( LONGLONG  LoopStartSamplePosition, int  SoundHandle);
int  __stdcall dx_SetLoopAreaTimePosSoundMem( LONGLONG  LoopStartTime, LONGLONG  LoopEndTime, int  SoundHandle);
int  __stdcall dx_GetLoopAreaTimePosSoundMem( LONGLONG *  LoopStartTime, LONGLONG *  LoopEndTime, int  SoundHandle);
int  __stdcall dx_SetLoopAreaSamplePosSoundMem( LONGLONG  LoopStartSamplePosition, LONGLONG  LoopEndSamplePosition, int  SoundHandle);
int  __stdcall dx_GetLoopAreaSamplePosSoundMem( LONGLONG *  LoopStartSamplePosition, LONGLONG *  LoopEndSamplePosition, int  SoundHandle);
int  __stdcall dx_SetPlayFinishDeleteSoundMem( int  DeleteFlag, int  SoundHandle);
int  __stdcall dx_Set3DReverbParamSoundMem( const SOUND3D_REVERB_PARAM *  Param, int  SoundHandle);
int  __stdcall dx_Set3DPresetReverbParamSoundMem( int  PresetNo, int  SoundHandle);
int  __stdcall dx_Set3DReverbParamSoundMemAll( const SOUND3D_REVERB_PARAM *  Param, int  PlaySoundOnly = FALSE);
int  __stdcall dx_Set3DPresetReverbParamSoundMemAll( int  PresetNo, int  PlaySoundOnly = FALSE);
int  __stdcall dx_Get3DReverbParamSoundMem( SOUND3D_REVERB_PARAM *  ParamBuffer, int  SoundHandle);
int  __stdcall dx_Get3DPresetReverbParamSoundMem( SOUND3D_REVERB_PARAM *  ParamBuffer, int  PresetNo);
int  __stdcall dx_Set3DPositionSoundMem( VECTOR  Position, int  SoundHandle);
int  __stdcall dx_Set3DRadiusSoundMem( float  Radius, int  SoundHandle);
int  __stdcall dx_Set3DVelocitySoundMem( VECTOR  Velocity, int  SoundHandle);
int  __stdcall dx_SetNextPlay3DPositionSoundMem( VECTOR  Position, int  SoundHandle);
int  __stdcall dx_SetNextPlay3DRadiusSoundMem( float  Radius, int  SoundHandle);
int  __stdcall dx_SetNextPlay3DVelocitySoundMem( VECTOR  Velocity, int  SoundHandle);
int  __stdcall dx_GetMP3TagInfo( const TCHAR * FileName, TCHAR *  TitleBuffer, size_t  TitleBufferBytes, TCHAR *  ArtistBuffer, size_t  ArtistBufferBytes, TCHAR *  AlbumBuffer, size_t  AlbumBufferBytes, TCHAR *  YearBuffer, size_t  YearBufferBytes, TCHAR *  CommentBuffer, size_t  CommentBufferBytes, TCHAR *  TrackBuffer, size_t  TrackBufferBytes, TCHAR *  GenreBuffer, size_t  GenreBufferBytes, int *  PictureGrHandle);
int  __stdcall dx_GetMP3TagInfoWithStrLen( const TCHAR * FileName, size_t  FileNameLength, TCHAR *  TitleBuffer, size_t  TitleBufferBytes, TCHAR *  ArtistBuffer, size_t  ArtistBufferBytes, TCHAR *  AlbumBuffer, size_t  AlbumBufferBytes, TCHAR *  YearBuffer, size_t  YearBufferBytes, TCHAR *  CommentBuffer, size_t  CommentBufferBytes, TCHAR *  TrackBuffer, size_t  TrackBufferBytes, TCHAR *  GenreBuffer, size_t  GenreBufferBytes, int *  PictureGrHandle);
int  __stdcall dx_SetCreateSoundDataType( int  SoundDataType);
int  __stdcall dx_GetCreateSoundDataType( void);
int  __stdcall dx_SetCreateSoundPitchRate( float  Cents);
float  __stdcall dx_GetCreateSoundPitchRate( void);
int  __stdcall dx_SetCreateSoundTimeStretchRate( float  Rate);
float  __stdcall dx_GetCreateSoundTimeStretchRate( void);
int  __stdcall dx_SetCreateSoundLoopAreaTimePos( LONGLONG  LoopStartTime, LONGLONG  LoopEndTime);
int  __stdcall dx_GetCreateSoundLoopAreaTimePos( LONGLONG *  LoopStartTime, LONGLONG *  LoopEndTime);
int  __stdcall dx_SetCreateSoundLoopAreaSamplePos( LONGLONG  LoopStartSamplePosition, LONGLONG  LoopEndSamplePosition);
int  __stdcall dx_GetCreateSoundLoopAreaSamplePos( LONGLONG *  LoopStartSamplePosition, LONGLONG *  LoopEndSamplePosition);
int  __stdcall dx_SetCreateSoundIgnoreLoopAreaInfo( int  IgnoreFlag);
int  __stdcall dx_GetCreateSoundIgnoreLoopAreaInfo( void);
int  __stdcall dx_SetDisableReadSoundFunctionMask( int  Mask);
int  __stdcall dx_GetDisableReadSoundFunctionMask( void);
int  __stdcall dx_SetEnableSoundCaptureFlag( int  Flag);
int  __stdcall dx_SetUseOldVolumeCalcFlag( int  Flag);
int  __stdcall dx_SetCreate3DSoundFlag( int  Flag);
int  __stdcall dx_Set3DSoundOneMetre( float  Distance);
int  __stdcall dx_Set3DSoundListenerPosAndFrontPos_UpVecY( VECTOR  Position, VECTOR  FrontPosition);
int  __stdcall dx_Set3DSoundListenerPosAndFrontPosAndUpVec( VECTOR  Position, VECTOR  FrontPosition, VECTOR  UpVector);
int  __stdcall dx_Set3DSoundListenerVelocity( VECTOR  Velocity);
int  __stdcall dx_Set3DSoundListenerConeAngle( float  InnerAngle, float  OuterAngle);
int  __stdcall dx_Set3DSoundListenerConeVolume( float  InnerAngleVolume, float  OuterAngleVolume);
int  __stdcall dx_PlaySoundFile( const TCHAR * FileName, int  PlayType);
int  __stdcall dx_PlaySoundFileWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  PlayType);
int  __stdcall dx_PlaySound( const TCHAR * FileName, int  PlayType);
int  __stdcall dx_PlaySoundWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  PlayType);
int  __stdcall dx_CheckSoundFile( void);
int  __stdcall dx_CheckSound( void);
int  __stdcall dx_StopSoundFile( void);
int  __stdcall dx_StopSound( void);
int  __stdcall dx_SetVolumeSoundFile( int  VolumePal);
int  __stdcall dx_SetVolumeSound( int  VolumePal);
int  __stdcall dx_InitSoftSound( void);
int  __stdcall dx_LoadSoftSound( const TCHAR * FileName);
int  __stdcall dx_LoadSoftSoundWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_LoadSoftSoundFromMemImage( const void * FileImage, size_t  FileImageSize);
int  __stdcall dx_MakeSoftSound( int  UseFormat_SoftSoundHandle, LONGLONG  SampleNum);
int  __stdcall dx_MakeSoftSound2Ch16Bit44KHz( LONGLONG  SampleNum);
int  __stdcall dx_MakeSoftSound2Ch16Bit22KHz( LONGLONG  SampleNum);
int  __stdcall dx_MakeSoftSound2Ch8Bit44KHz( LONGLONG  SampleNum);
int  __stdcall dx_MakeSoftSound2Ch8Bit22KHz( LONGLONG  SampleNum);
int  __stdcall dx_MakeSoftSound1Ch16Bit44KHz( LONGLONG  SampleNum);
int  __stdcall dx_MakeSoftSound1Ch16Bit22KHz( LONGLONG  SampleNum);
int  __stdcall dx_MakeSoftSound1Ch8Bit44KHz( LONGLONG  SampleNum);
int  __stdcall dx_MakeSoftSound1Ch8Bit22KHz( LONGLONG  SampleNum);
int  __stdcall dx_MakeSoftSoundCustom( int  ChannelNum, int  BitsPerSample, int  SamplesPerSec, LONGLONG  SampleNum, int  IsFloatType = 0);
int  __stdcall dx_DeleteSoftSound( int  SoftSoundHandle);
int  __stdcall dx_SaveSoftSound( int  SoftSoundHandle, const TCHAR * FileName);
int  __stdcall dx_SaveSoftSoundWithStrLen( int  SoftSoundHandle, const TCHAR * FileName, size_t  FileNameLength);
LONGLONG  __stdcall dx_GetSoftSoundSampleNum( int  SoftSoundHandle);
int  __stdcall dx_GetSoftSoundFormat( int  SoftSoundHandle, int *  Channels, int *  BitsPerSample, int *  SamplesPerSec, int *  IsFloatType);
int  __stdcall dx_ReadSoftSoundData( int  SoftSoundHandle, LONGLONG  SamplePosition, int *  Channel1, int *  Channel2);
int  __stdcall dx_ReadSoftSoundDataF( int  SoftSoundHandle, LONGLONG  SamplePosition, float *  Channel1, float *  Channel2);
int  __stdcall dx_WriteSoftSoundData( int  SoftSoundHandle, LONGLONG  SamplePosition, int  Channel1, int  Channel2);
int  __stdcall dx_WriteSoftSoundDataF( int  SoftSoundHandle, LONGLONG  SamplePosition, float  Channel1, float  Channel2);
int  __stdcall dx_WriteTimeStretchSoftSoundData( int  SrcSoftSoundHandle, int  DestSoftSoundHandle);
int  __stdcall dx_WritePitchShiftSoftSoundData( int  SrcSoftSoundHandle, int  DestSoftSoundHandle);
void *  __stdcall dx_GetSoftSoundDataImage( int  SoftSoundHandle);
int  __stdcall dx_GetFFTVibrationSoftSound( int  SoftSoundHandle, int  Channel, LONGLONG  SamplePosition, int  SampleNum, float *  Buffer_Array, int  BufferLength);
int  __stdcall dx_GetFFTVibrationSoftSoundBase( int  SoftSoundHandle, int  Channel, LONGLONG  SamplePosition, int  SampleNum, float *  RealBuffer_Array, float *  ImagBuffer_Array, int  BufferLength);
int  __stdcall dx_InitSoftSoundPlayer( void);
int  __stdcall dx_MakeSoftSoundPlayer( int  UseFormat_SoftSoundHandle);
int  __stdcall dx_MakeSoftSoundPlayer2Ch16Bit44KHz( void);
int  __stdcall dx_MakeSoftSoundPlayer2Ch16Bit22KHz( void);
int  __stdcall dx_MakeSoftSoundPlayer2Ch8Bit44KHz( void);
int  __stdcall dx_MakeSoftSoundPlayer2Ch8Bit22KHz( void);
int  __stdcall dx_MakeSoftSoundPlayer1Ch16Bit44KHz( void);
int  __stdcall dx_MakeSoftSoundPlayer1Ch16Bit22KHz( void);
int  __stdcall dx_MakeSoftSoundPlayer1Ch8Bit44KHz( void);
int  __stdcall dx_MakeSoftSoundPlayer1Ch8Bit22KHz( void);
int  __stdcall dx_MakeSoftSoundPlayerCustom( int  ChannelNum, int  BitsPerSample, int  SamplesPerSec);
int  __stdcall dx_DeleteSoftSoundPlayer( int  SSoundPlayerHandle);
int  __stdcall dx_AddDataSoftSoundPlayer( int  SSoundPlayerHandle, int  SoftSoundHandle, LONGLONG  AddSamplePosition, int  AddSampleNum);
int  __stdcall dx_AddDirectDataSoftSoundPlayer( int  SSoundPlayerHandle, const void * SoundData, int  AddSampleNum);
int  __stdcall dx_AddOneDataSoftSoundPlayer( int  SSoundPlayerHandle, int  Channel1, int  Channel2);
int  __stdcall dx_GetSoftSoundPlayerFormat( int  SSoundPlayerHandle, int *  Channels, int *  BitsPerSample, int *  SamplesPerSec);
int  __stdcall dx_StartSoftSoundPlayer( int  SSoundPlayerHandle);
int  __stdcall dx_CheckStartSoftSoundPlayer( int  SSoundPlayerHandle);
int  __stdcall dx_StopSoftSoundPlayer( int  SSoundPlayerHandle);
int  __stdcall dx_ResetSoftSoundPlayer( int  SSoundPlayerHandle);
int  __stdcall dx_GetStockDataLengthSoftSoundPlayer( int  SSoundPlayerHandle);
int  __stdcall dx_CheckSoftSoundPlayerNoneData( int  SSoundPlayerHandle);
int  __stdcall dx_DeleteMusicMem( int  MusicHandle);
int  __stdcall dx_LoadMusicMem( const TCHAR * FileName);
int  __stdcall dx_LoadMusicMemWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_LoadMusicMemByMemImage( const void * FileImage, size_t  FileImageSize);
int  __stdcall dx_PlayMusicMem( int  MusicHandle, int  PlayType);
int  __stdcall dx_StopMusicMem( int  MusicHandle);
int  __stdcall dx_CheckMusicMem( int  MusicHandle);
int  __stdcall dx_SetVolumeMusicMem( int  Volume, int  MusicHandle);
int  __stdcall dx_GetMusicMemPosition( int  MusicHandle);
int  __stdcall dx_InitMusicMem( void);
int  __stdcall dx_ProcessMusicMem( void);
int  __stdcall dx_PlayMusic( const TCHAR * FileName, int  PlayType);
int  __stdcall dx_PlayMusicWithStrLen( const TCHAR * FileName, size_t  FileNameLength, int  PlayType);
int  __stdcall dx_PlayMusicByMemImage( const void * FileImage, size_t  FileImageSize, int  PlayType);
int  __stdcall dx_SetVolumeMusic( int  Volume);
int  __stdcall dx_StopMusic( void);
int  __stdcall dx_CheckMusic( void);
int  __stdcall dx_GetMusicPosition( void);
int  __stdcall dx_SelectMidiMode( int  Mode);
int  __stdcall dx_SetUseDXArchiveFlag( int  Flag);
int  __stdcall dx_SetDXArchivePriority( int  Priority = 0);
int  __stdcall dx_SetDXArchiveExtension( const TCHAR * Extension = NULL);
int  __stdcall dx_SetDXArchiveExtensionWithStrLen( const TCHAR * Extension = NULL, size_t  ExtensionLength = 0);
int  __stdcall dx_SetDXArchiveKeyString( const TCHAR * KeyString = NULL);
int  __stdcall dx_SetDXArchiveKeyStringWithStrLen( const TCHAR * KeyString = NULL, size_t  KeyStringLength = 0);
int  __stdcall dx_DXArchivePreLoad( const TCHAR * FilePath, int  ASync = FALSE);
int  __stdcall dx_DXArchivePreLoadWithStrLen( const TCHAR * FilePath, size_t  FilePathLength, int  ASync = FALSE);
int  __stdcall dx_DXArchiveCheckIdle( const TCHAR * FilePath);
int  __stdcall dx_DXArchiveCheckIdleWithStrLen( const TCHAR * FilePath, size_t  FilePathLength);
int  __stdcall dx_DXArchiveRelease( const TCHAR * FilePath);
int  __stdcall dx_DXArchiveReleaseWithStrLen( const TCHAR * FilePath, size_t  FilePathLength);
int  __stdcall dx_DXArchiveCheckFile( const TCHAR * FilePath, const TCHAR * TargetFilePath);
int  __stdcall dx_DXArchiveCheckFileWithStrLen( const TCHAR * FilePath, size_t  FilePathLength, const TCHAR * TargetFilePath, size_t  TargetFilePathLength);
int  __stdcall dx_DXArchiveSetMemImage( void *  ArchiveImage, int  ArchiveImageSize, const TCHAR * EmulateFilePath, int  ArchiveImageCopyFlag = FALSE, int  ArchiveImageReadOnly = TRUE);
int  __stdcall dx_DXArchiveSetMemImageWithStrLen( void *  ArchiveImage, int  ArchiveImageSize, const TCHAR * EmulateFilePath, size_t  EmulateFilePathLength, int  ArchiveImageCopyFlag = FALSE, int  ArchiveImageReadOnly = TRUE);
int  __stdcall dx_DXArchiveReleaseMemImage( void *  ArchiveImage);
DWORD  __stdcall dx_HashCRC32( const void * SrcData, size_t  SrcDataSize);
int  __stdcall dx_MV1LoadModel( const TCHAR * FileName);
int  __stdcall dx_MV1LoadModelWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int __stdcall dx_MV1LoadModelFromMem( const void * FileImage , int FileSize , int ( *FileReadFunc )( const TCHAR * FilePath , void * * FileImageAddr , int * FileSize , void * FileReadFuncData ) , int ( *FileReleaseFunc )( void * MemoryAddr , void * FileReadFuncData ) , void * FileReadFuncData = NULL ) ;
int  __stdcall dx_MV1DuplicateModel( int  SrcMHandle);
int  __stdcall dx_MV1CreateCloneModel( int  SrcMHandle);
int  __stdcall dx_MV1DeleteModel( int  MHandle);
int  __stdcall dx_MV1InitModel( void);
int  __stdcall dx_MV1SetLoadModelReMakeNormal( int  Flag);
int  __stdcall dx_MV1SetLoadModelReMakeNormalSmoothingAngle( float  SmoothingAngle = 1.562069f);
int  __stdcall dx_MV1SetLoadModelIgnoreScaling( int  Flag);
int  __stdcall dx_MV1SetLoadModelPositionOptimize( int  Flag);
int  __stdcall dx_MV1SetLoadModelNotEqNormalSide_AddZeroAreaPolygon( int  Flag);
int  __stdcall dx_MV1SetLoadModelUsePhysicsMode( int  PhysicsMode);
int  __stdcall dx_MV1SetLoadModelPhysicsWorldGravity( float  Gravity);
float  __stdcall dx_MV1GetLoadModelPhysicsWorldGravity( void);
int  __stdcall dx_MV1SetLoadCalcPhysicsWorldGravity( int  GravityNo, VECTOR  Gravity);
VECTOR  __stdcall dx_MV1GetLoadCalcPhysicsWorldGravity( int  GravityNo);
int  __stdcall dx_MV1SetLoadModelPhysicsCalcPrecision( int  Precision);
int  __stdcall dx_MV1SetLoadModel_PMD_PMX_AnimationFPSMode( int  FPSMode);
int  __stdcall dx_MV1AddLoadModelDisablePhysicsNameWord( const TCHAR * NameWord);
int  __stdcall dx_MV1AddLoadModelDisablePhysicsNameWordWithStrLen( const TCHAR * NameWord, size_t  NameWordLength);
int  __stdcall dx_MV1ResetLoadModelDisablePhysicsNameWord( void);
int  __stdcall dx_MV1SetLoadModelDisablePhysicsNameWordMode( int  DisableNameWordMode);
int  __stdcall dx_MV1SetLoadModelAnimFilePath( const TCHAR * FileName);
int  __stdcall dx_MV1SetLoadModelAnimFilePathWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_MV1SetLoadModelUsePackDraw( int  Flag);
int  __stdcall dx_MV1SetLoadModelTriangleListUseMaxBoneNum( int  UseMaxBoneNum);
int  __stdcall dx_MV1SaveModelToMV1File( int  MHandle, const TCHAR * FileName, int  SaveType = MV1_SAVETYPE_NORMAL, int  AnimMHandle = -1, int  AnimNameCheck = TRUE, int  Normal8BitFlag = 1, int  Position16BitFlag = 1, int  Weight8BitFlag = 0, int  Anim16BitFlag = 1);
int  __stdcall dx_MV1SaveModelToMV1FileWithStrLen( int  MHandle, const TCHAR * FileName, size_t  FileNameLength, int  SaveType = MV1_SAVETYPE_NORMAL, int  AnimMHandle = -1, int  AnimNameCheck = TRUE, int  Normal8BitFlag = 1, int  Position16BitFlag = 1, int  Weight8BitFlag = 0, int  Anim16BitFlag = 1);
int  __stdcall dx_MV1SaveModelToXFile( int  MHandle, const TCHAR * FileName, int  SaveType = MV1_SAVETYPE_NORMAL, int  AnimMHandle = -1, int  AnimNameCheck = TRUE);
int  __stdcall dx_MV1SaveModelToXFileWithStrLen( int  MHandle, const TCHAR * FileName, size_t  FileNameLength, int  SaveType = MV1_SAVETYPE_NORMAL, int  AnimMHandle = -1, int  AnimNameCheck = TRUE);
int  __stdcall dx_MV1DrawModel( int  MHandle);
int  __stdcall dx_MV1DrawFrame( int  MHandle, int  FrameIndex);
int  __stdcall dx_MV1DrawMesh( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1DrawTriangleList( int  MHandle, int  TriangleListIndex);
int  __stdcall dx_MV1DrawModelDebug( int  MHandle, unsigned int  Color, int  IsNormalLine, float  NormalLineLength, int  IsPolyLine, int  IsCollisionBox);
int  __stdcall dx_MV1SetUseOrigShader( int  UseFlag);
int  __stdcall dx_MV1SetSemiTransDrawMode( int  DrawMode);
MATRIX  __stdcall dx_MV1GetLocalWorldMatrix( int  MHandle);
MATRIX_D  __stdcall dx_MV1GetLocalWorldMatrixD( int  MHandle);
int  __stdcall dx_MV1SetPosition( int  MHandle, VECTOR  Position);
int  __stdcall dx_MV1SetPositionD( int  MHandle, VECTOR_D  Position);
VECTOR  __stdcall dx_MV1GetPosition( int  MHandle);
VECTOR_D  __stdcall dx_MV1GetPositionD( int  MHandle);
int  __stdcall dx_MV1SetScale( int  MHandle, VECTOR  Scale);
VECTOR  __stdcall dx_MV1GetScale( int  MHandle);
int  __stdcall dx_MV1SetRotationXYZ( int  MHandle, VECTOR  Rotate);
VECTOR  __stdcall dx_MV1GetRotationXYZ( int  MHandle);
int  __stdcall dx_MV1SetRotationZYAxis( int  MHandle, VECTOR  ZAxisDirection, VECTOR  YAxisDirection, float  ZAxisTwistRotate);
int  __stdcall dx_MV1SetRotationYUseDir( int  MHandle, VECTOR  Direction, float  OffsetYAngle);
int  __stdcall dx_MV1SetRotationMatrix( int  MHandle, MATRIX  Matrix);
MATRIX  __stdcall dx_MV1GetRotationMatrix( int  MHandle);
int  __stdcall dx_MV1SetMatrix( int  MHandle, MATRIX  Matrix);
int  __stdcall dx_MV1SetMatrixD( int  MHandle, MATRIX_D  Matrix);
MATRIX  __stdcall dx_MV1GetMatrix( int  MHandle);
MATRIX_D  __stdcall dx_MV1GetMatrixD( int  MHandle);
int  __stdcall dx_MV1SetVisible( int  MHandle, int  VisibleFlag);
int  __stdcall dx_MV1GetVisible( int  MHandle);
int  __stdcall dx_MV1SetMeshCategoryVisible( int  MHandle, int  MeshCategory, int  VisibleFlag);
int  __stdcall dx_MV1GetMeshCategoryVisible( int  MHandle, int  MeshCategory);
int  __stdcall dx_MV1SetDifColorScale( int  MHandle, COLOR_F  Scale);
COLOR_F  __stdcall dx_MV1GetDifColorScale( int  MHandle);
int  __stdcall dx_MV1SetSpcColorScale( int  MHandle, COLOR_F  Scale);
COLOR_F  __stdcall dx_MV1GetSpcColorScale( int  MHandle);
int  __stdcall dx_MV1SetEmiColorScale( int  MHandle, COLOR_F  Scale);
COLOR_F  __stdcall dx_MV1GetEmiColorScale( int  MHandle);
int  __stdcall dx_MV1SetAmbColorScale( int  MHandle, COLOR_F  Scale);
COLOR_F  __stdcall dx_MV1GetAmbColorScale( int  MHandle);
int  __stdcall dx_MV1GetSemiTransState( int  MHandle);
int  __stdcall dx_MV1SetOpacityRate( int  MHandle, float  Rate);
float  __stdcall dx_MV1GetOpacityRate( int  MHandle);
int  __stdcall dx_MV1SetUseDrawMulAlphaColor( int  MHandle, int  Flag);
int  __stdcall dx_MV1GetUseDrawMulAlphaColor( int  MHandle);
int  __stdcall dx_MV1SetUseZBuffer( int  MHandle, int  Flag);
int  __stdcall dx_MV1SetWriteZBuffer( int  MHandle, int  Flag);
int  __stdcall dx_MV1SetZBufferCmpType( int  MHandle, int  CmpType);
int  __stdcall dx_MV1SetZBias( int  MHandle, int  Bias);
int  __stdcall dx_MV1SetUseVertDifColor( int  MHandle, int  UseFlag);
int  __stdcall dx_MV1SetUseVertSpcColor( int  MHandle, int  UseFlag);
int  __stdcall dx_MV1SetSampleFilterMode( int  MHandle, int  FilterMode);
int  __stdcall dx_MV1SetMaxAnisotropy( int  MHandle, int  MaxAnisotropy);
int  __stdcall dx_MV1SetWireFrameDrawFlag( int  MHandle, int  Flag);
int  __stdcall dx_MV1RefreshVertColorFromMaterial( int  MHandle);
int  __stdcall dx_MV1SetPhysicsWorldGravity( int  MHandle, VECTOR  Gravity);
int  __stdcall dx_MV1PhysicsCalculation( int  MHandle, float  MillisecondTime);
int  __stdcall dx_MV1PhysicsResetState( int  MHandle);
int  __stdcall dx_MV1SetUseShapeFlag( int  MHandle, int  UseFlag);
int  __stdcall dx_MV1GetMaterialNumberOrderFlag( int  MHandle);
int  __stdcall dx_MV1AttachAnim( int  MHandle, int  AnimIndex, int  AnimSrcMHandle = -1, int  NameCheck = TRUE);
int  __stdcall dx_MV1DetachAnim( int  MHandle, int  AttachIndex);
int  __stdcall dx_MV1SetAttachAnimTime( int  MHandle, int  AttachIndex, float  Time);
float  __stdcall dx_MV1GetAttachAnimTime( int  MHandle, int  AttachIndex);
float  __stdcall dx_MV1GetAttachAnimTotalTime( int  MHandle, int  AttachIndex);
int  __stdcall dx_MV1SetAttachAnimBlendRate( int  MHandle, int  AttachIndex, float  Rate = 1.0f);
float  __stdcall dx_MV1GetAttachAnimBlendRate( int  MHandle, int  AttachIndex);
int  __stdcall dx_MV1SetAttachAnimBlendRateToFrame( int  MHandle, int  AttachIndex, int  FrameIndex, float  Rate, int  SetChild = TRUE);
float  __stdcall dx_MV1GetAttachAnimBlendRateToFrame( int  MHandle, int  AttachIndex, int  FrameIndex);
int  __stdcall dx_MV1GetAttachAnim( int  MHandle, int  AttachIndex);
int  __stdcall dx_MV1SetAttachAnimUseShapeFlag( int  MHandle, int  AttachIndex, int  UseFlag);
int  __stdcall dx_MV1GetAttachAnimUseShapeFlag( int  MHandle, int  AttachIndex);
VECTOR  __stdcall dx_MV1GetAttachAnimFrameLocalPosition( int  MHandle, int  AttachIndex, int  FrameIndex);
MATRIX  __stdcall dx_MV1GetAttachAnimFrameLocalMatrix( int  MHandle, int  AttachIndex, int  FrameIndex);
int  __stdcall dx_MV1GetAnimNum( int  MHandle);
const TCHAR * __stdcall dx_MV1GetAnimName( int  MHandle, int  AnimIndex);
int  __stdcall dx_MV1SetAnimName( int  MHandle, int  AnimIndex, const TCHAR * AnimName);
int  __stdcall dx_MV1SetAnimNameWithStrLen( int  MHandle, int  AnimIndex, const TCHAR * AnimName, size_t  AnimNameLength);
int  __stdcall dx_MV1GetAnimIndex( int  MHandle, const TCHAR * AnimName);
int  __stdcall dx_MV1GetAnimIndexWithStrLen( int  MHandle, const TCHAR * AnimName, size_t  AnimNameLength);
float  __stdcall dx_MV1GetAnimTotalTime( int  MHandle, int  AnimIndex);
int  __stdcall dx_MV1GetAnimTargetFrameNum( int  MHandle, int  AnimIndex);
const TCHAR * __stdcall dx_MV1GetAnimTargetFrameName( int  MHandle, int  AnimIndex, int  AnimFrameIndex);
int  __stdcall dx_MV1GetAnimTargetFrame( int  MHandle, int  AnimIndex, int  AnimFrameIndex);
int  __stdcall dx_MV1GetAnimTargetFrameKeySetNum( int  MHandle, int  AnimIndex, int  AnimFrameIndex);
int  __stdcall dx_MV1GetAnimTargetFrameKeySet( int  MHandle, int  AnimIndex, int  AnimFrameIndex, int  Index);
int  __stdcall dx_MV1GetAnimKeySetNum( int  MHandle);
int  __stdcall dx_MV1GetAnimKeySetType( int  MHandle, int  AnimKeySetIndex);
int  __stdcall dx_MV1GetAnimKeySetDataType( int  MHandle, int  AnimKeySetIndex);
int  __stdcall dx_MV1GetAnimKeySetTimeType( int  MHandle, int  AnimKeySetIndex);
int  __stdcall dx_MV1GetAnimKeySetDataNum( int  MHandle, int  AnimKeySetIndex);
float  __stdcall dx_MV1GetAnimKeyDataTime( int  MHandle, int  AnimKeySetIndex, int  Index);
int  __stdcall dx_MV1GetAnimKeyDataIndexFromTime( int  MHandle, int  AnimKeySetIndex, float  Time);
FLOAT4  __stdcall dx_MV1GetAnimKeyDataToQuaternion( int  MHandle, int  AnimKeySetIndex, int  Index);
FLOAT4  __stdcall dx_MV1GetAnimKeyDataToQuaternionFromTime( int  MHandle, int  AnimKeySetIndex, float  Time);
VECTOR  __stdcall dx_MV1GetAnimKeyDataToVector( int  MHandle, int  AnimKeySetIndex, int  Index);
VECTOR  __stdcall dx_MV1GetAnimKeyDataToVectorFromTime( int  MHandle, int  AnimKeySetIndex, float  Time);
MATRIX  __stdcall dx_MV1GetAnimKeyDataToMatrix( int  MHandle, int  AnimKeySetIndex, int  Index);
MATRIX  __stdcall dx_MV1GetAnimKeyDataToMatrixFromTime( int  MHandle, int  AnimKeySetIndex, float  Time);
float  __stdcall dx_MV1GetAnimKeyDataToFlat( int  MHandle, int  AnimKeySetIndex, int  Index);
float  __stdcall dx_MV1GetAnimKeyDataToFlatFromTime( int  MHandle, int  AnimKeySetIndex, float  Time);
float  __stdcall dx_MV1GetAnimKeyDataToLinear( int  MHandle, int  AnimKeySetIndex, int  Index);
float  __stdcall dx_MV1GetAnimKeyDataToLinearFromTime( int  MHandle, int  AnimKeySetIndex, float  Time);
int  __stdcall dx_MV1GetMaterialNum( int  MHandle);
const TCHAR * __stdcall dx_MV1GetMaterialName( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialTypeAll( int  MHandle, int  Type);
int  __stdcall dx_MV1SetMaterialType( int  MHandle, int  MaterialIndex, int  Type);
int  __stdcall dx_MV1GetMaterialType( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialDifColor( int  MHandle, int  MaterialIndex, COLOR_F  Color);
COLOR_F  __stdcall dx_MV1GetMaterialDifColor( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialSpcColor( int  MHandle, int  MaterialIndex, COLOR_F  Color);
COLOR_F  __stdcall dx_MV1GetMaterialSpcColor( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialEmiColor( int  MHandle, int  MaterialIndex, COLOR_F  Color);
COLOR_F  __stdcall dx_MV1GetMaterialEmiColor( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialAmbColor( int  MHandle, int  MaterialIndex, COLOR_F  Color);
COLOR_F  __stdcall dx_MV1GetMaterialAmbColor( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialSpcPower( int  MHandle, int  MaterialIndex, float  Power);
float  __stdcall dx_MV1GetMaterialSpcPower( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialDifMapTexture( int  MHandle, int  MaterialIndex, int  TexIndex);
int  __stdcall dx_MV1GetMaterialDifMapTexture( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialSpcMapTexture( int  MHandle, int  MaterialIndex, int  TexIndex);
int  __stdcall dx_MV1GetMaterialSpcMapTexture( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1GetMaterialNormalMapTexture( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialDifGradTexture( int  MHandle, int  MaterialIndex, int  TexIndex);
int  __stdcall dx_MV1GetMaterialDifGradTexture( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialSpcGradTexture( int  MHandle, int  MaterialIndex, int  TexIndex);
int  __stdcall dx_MV1GetMaterialSpcGradTexture( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialSphereMapTexture( int  MHandle, int  MaterialIndex, int  TexIndex);
int  __stdcall dx_MV1GetMaterialSphereMapTexture( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialDifGradBlendTypeAll( int  MHandle, int  BlendType);
int  __stdcall dx_MV1SetMaterialDifGradBlendType( int  MHandle, int  MaterialIndex, int  BlendType);
int  __stdcall dx_MV1GetMaterialDifGradBlendType( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialSpcGradBlendTypeAll( int  MHandle, int  BlendType);
int  __stdcall dx_MV1SetMaterialSpcGradBlendType( int  MHandle, int  MaterialIndex, int  BlendType);
int  __stdcall dx_MV1GetMaterialSpcGradBlendType( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialSphereMapBlendTypeAll( int  MHandle, int  BlendType);
int  __stdcall dx_MV1SetMaterialSphereMapBlendType( int  MHandle, int  MaterialIndex, int  BlendType);
int  __stdcall dx_MV1GetMaterialSphereMapBlendType( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialOutLineWidthAll( int  MHandle, float  Width);
int  __stdcall dx_MV1SetMaterialOutLineWidth( int  MHandle, int  MaterialIndex, float  Width);
float  __stdcall dx_MV1GetMaterialOutLineWidth( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialOutLineDotWidthAll( int  MHandle, float  Width);
int  __stdcall dx_MV1SetMaterialOutLineDotWidth( int  MHandle, int  MaterialIndex, float  Width);
float  __stdcall dx_MV1GetMaterialOutLineDotWidth( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialOutLineColorAll( int  MHandle, COLOR_F  Color);
int  __stdcall dx_MV1SetMaterialOutLineColor( int  MHandle, int  MaterialIndex, COLOR_F  Color);
COLOR_F  __stdcall dx_MV1GetMaterialOutLineColor( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialDrawBlendModeAll( int  MHandle, int  BlendMode);
int  __stdcall dx_MV1SetMaterialDrawBlendMode( int  MHandle, int  MaterialIndex, int  BlendMode);
int  __stdcall dx_MV1GetMaterialDrawBlendMode( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialDrawBlendParamAll( int  MHandle, int  BlendParam);
int  __stdcall dx_MV1SetMaterialDrawBlendParam( int  MHandle, int  MaterialIndex, int  BlendParam);
int  __stdcall dx_MV1GetMaterialDrawBlendParam( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1SetMaterialDrawAlphaTestAll( int  MHandle, int  Enable, int  Mode, int  Param);
int  __stdcall dx_MV1SetMaterialDrawAlphaTest( int  MHandle, int  MaterialIndex, int  Enable, int  Mode, int  Param);
int  __stdcall dx_MV1GetMaterialDrawAlphaTestEnable( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1GetMaterialDrawAlphaTestMode( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1GetMaterialDrawAlphaTestParam( int  MHandle, int  MaterialIndex);
int  __stdcall dx_MV1GetTextureNum( int  MHandle);
const TCHAR * __stdcall dx_MV1GetTextureName( int  MHandle, int  TexIndex);
int  __stdcall dx_MV1SetTextureColorFilePath( int  MHandle, int  TexIndex, const TCHAR * FilePath);
int  __stdcall dx_MV1SetTextureColorFilePathWithStrLen( int  MHandle, int  TexIndex, const TCHAR * FilePath, size_t  FilePathLength);
const TCHAR * __stdcall dx_MV1GetTextureColorFilePath( int  MHandle, int  TexIndex);
int  __stdcall dx_MV1SetTextureAlphaFilePath( int  MHandle, int  TexIndex, const TCHAR * FilePath);
int  __stdcall dx_MV1SetTextureAlphaFilePathWithStrLen( int  MHandle, int  TexIndex, const TCHAR * FilePath, size_t  FilePathLength);
const TCHAR * __stdcall dx_MV1GetTextureAlphaFilePath( int  MHandle, int  TexIndex);
int  __stdcall dx_MV1SetTextureGraphHandle( int  MHandle, int  TexIndex, int  GrHandle, int  SemiTransFlag);
int  __stdcall dx_MV1GetTextureGraphHandle( int  MHandle, int  TexIndex);
int  __stdcall dx_MV1SetTextureAddressMode( int  MHandle, int  TexIndex, int  AddrUMode, int  AddrVMode);
int  __stdcall dx_MV1GetTextureAddressModeU( int  MHandle, int  TexIndex);
int  __stdcall dx_MV1GetTextureAddressModeV( int  MHandle, int  TexIndex);
int  __stdcall dx_MV1GetTextureWidth( int  MHandle, int  TexIndex);
int  __stdcall dx_MV1GetTextureHeight( int  MHandle, int  TexIndex);
int  __stdcall dx_MV1GetTextureSemiTransState( int  MHandle, int  TexIndex);
int  __stdcall dx_MV1SetTextureBumpImageFlag( int  MHandle, int  TexIndex, int  Flag);
int  __stdcall dx_MV1GetTextureBumpImageFlag( int  MHandle, int  TexIndex);
int  __stdcall dx_MV1SetTextureBumpImageNextPixelLength( int  MHandle, int  TexIndex, float  Length);
float  __stdcall dx_MV1GetTextureBumpImageNextPixelLength( int  MHandle, int  TexIndex);
int  __stdcall dx_MV1SetTextureSampleFilterMode( int  MHandle, int  TexIndex, int  FilterMode);
int  __stdcall dx_MV1GetTextureSampleFilterMode( int  MHandle, int  TexIndex);
int  __stdcall dx_MV1LoadTexture( const TCHAR * FilePath);
int  __stdcall dx_MV1LoadTextureWithStrLen( const TCHAR * FilePath, size_t  FilePathLength);
int  __stdcall dx_MV1GetFrameNum( int  MHandle);
int  __stdcall dx_MV1SearchFrame( int  MHandle, const TCHAR * FrameName);
int  __stdcall dx_MV1SearchFrameWithStrLen( int  MHandle, const TCHAR * FrameName, size_t  FrameNameLength);
int  __stdcall dx_MV1SearchFrameChild( int  MHandle, int  FrameIndex = -1, const TCHAR * ChildName = NULL);
int  __stdcall dx_MV1SearchFrameChildWithStrLen( int  MHandle, int  FrameIndex = -1, const TCHAR * ChildName = NULL, size_t  ChildNameLength = 0);
const TCHAR * __stdcall dx_MV1GetFrameName( int  MHandle, int  FrameIndex);
int  __stdcall dx_MV1GetFrameName2( int  MHandle, int  FrameIndex, TCHAR *  StrBuffer);
int  __stdcall dx_MV1GetFrameParent( int  MHandle, int  FrameIndex);
int  __stdcall dx_MV1GetFrameChildNum( int  MHandle, int  FrameIndex = -1);
int  __stdcall dx_MV1GetFrameChild( int  MHandle, int  FrameIndex = -1, int  ChildIndex = 0);
VECTOR  __stdcall dx_MV1GetFramePosition( int  MHandle, int  FrameIndex);
VECTOR_D  __stdcall dx_MV1GetFramePositionD( int  MHandle, int  FrameIndex);
MATRIX  __stdcall dx_MV1GetFrameBaseLocalMatrix( int  MHandle, int  FrameIndex);
MATRIX_D  __stdcall dx_MV1GetFrameBaseLocalMatrixD( int  MHandle, int  FrameIndex);
MATRIX  __stdcall dx_MV1GetFrameLocalMatrix( int  MHandle, int  FrameIndex);
MATRIX_D  __stdcall dx_MV1GetFrameLocalMatrixD( int  MHandle, int  FrameIndex);
MATRIX  __stdcall dx_MV1GetFrameLocalWorldMatrix( int  MHandle, int  FrameIndex);
MATRIX_D  __stdcall dx_MV1GetFrameLocalWorldMatrixD( int  MHandle, int  FrameIndex);
int  __stdcall dx_MV1SetFrameUserLocalMatrix( int  MHandle, int  FrameIndex, MATRIX  Matrix);
int  __stdcall dx_MV1SetFrameUserLocalMatrixD( int  MHandle, int  FrameIndex, MATRIX_D  Matrix);
int  __stdcall dx_MV1ResetFrameUserLocalMatrix( int  MHandle, int  FrameIndex);
int  __stdcall dx_MV1SetFrameUserLocalWorldMatrix( int  MHandle, int  FrameIndex, MATRIX  Matrix);
int  __stdcall dx_MV1SetFrameUserLocalWorldMatrixD( int  MHandle, int  FrameIndex, MATRIX_D  Matrix);
int  __stdcall dx_MV1ResetFrameUserLocalWorldMatrix( int  MHandle, int  FrameIndex);
VECTOR  __stdcall dx_MV1GetFrameMaxVertexLocalPosition( int  MHandle, int  FrameIndex);
VECTOR_D  __stdcall dx_MV1GetFrameMaxVertexLocalPositionD( int  MHandle, int  FrameIndex);
VECTOR  __stdcall dx_MV1GetFrameMinVertexLocalPosition( int  MHandle, int  FrameIndex);
VECTOR_D  __stdcall dx_MV1GetFrameMinVertexLocalPositionD( int  MHandle, int  FrameIndex);
VECTOR  __stdcall dx_MV1GetFrameAvgVertexLocalPosition( int  MHandle, int  FrameIndex);
VECTOR_D  __stdcall dx_MV1GetFrameAvgVertexLocalPositionD( int  MHandle, int  FrameIndex);
int  __stdcall dx_MV1GetFrameVertexNum( int  MHandle, int  FrameIndex);
int  __stdcall dx_MV1GetFrameTriangleNum( int  MHandle, int  FrameIndex);
int  __stdcall dx_MV1GetFrameMeshNum( int  MHandle, int  FrameIndex);
int  __stdcall dx_MV1GetFrameMesh( int  MHandle, int  FrameIndex, int  Index);
int  __stdcall dx_MV1SetFrameVisible( int  MHandle, int  FrameIndex, int  VisibleFlag);
int  __stdcall dx_MV1GetFrameVisible( int  MHandle, int  FrameIndex);
int  __stdcall dx_MV1SetFrameDifColorScale( int  MHandle, int  FrameIndex, COLOR_F  Scale);
int  __stdcall dx_MV1SetFrameSpcColorScale( int  MHandle, int  FrameIndex, COLOR_F  Scale);
int  __stdcall dx_MV1SetFrameEmiColorScale( int  MHandle, int  FrameIndex, COLOR_F  Scale);
int  __stdcall dx_MV1SetFrameAmbColorScale( int  MHandle, int  FrameIndex, COLOR_F  Scale);
COLOR_F  __stdcall dx_MV1GetFrameDifColorScale( int  MHandle, int  FrameIndex);
COLOR_F  __stdcall dx_MV1GetFrameSpcColorScale( int  MHandle, int  FrameIndex);
COLOR_F  __stdcall dx_MV1GetFrameEmiColorScale( int  MHandle, int  FrameIndex);
COLOR_F  __stdcall dx_MV1GetFrameAmbColorScale( int  MHandle, int  FrameIndex);
int  __stdcall dx_MV1GetFrameSemiTransState( int  MHandle, int  FrameIndex);
int  __stdcall dx_MV1SetFrameOpacityRate( int  MHandle, int  FrameIndex, float  Rate);
float  __stdcall dx_MV1GetFrameOpacityRate( int  MHandle, int  FrameIndex);
int  __stdcall dx_MV1SetFrameBaseVisible( int  MHandle, int  FrameIndex, int  VisibleFlag);
int  __stdcall dx_MV1GetFrameBaseVisible( int  MHandle, int  FrameIndex);
int  __stdcall dx_MV1SetFrameTextureAddressTransform( int  MHandle, int  FrameIndex, float  TransU, float  TransV, float  ScaleU, float  ScaleV, float  RotCenterU, float  RotCenterV, float  Rotate);
int  __stdcall dx_MV1SetFrameTextureAddressTransformMatrix( int  MHandle, int  FrameIndex, MATRIX  Matrix);
int  __stdcall dx_MV1ResetFrameTextureAddressTransform( int  MHandle, int  FrameIndex);
int  __stdcall dx_MV1GetMeshNum( int  MHandle);
int  __stdcall dx_MV1GetMeshMaterial( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1GetMeshVertexNum( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1GetMeshTriangleNum( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1SetMeshVisible( int  MHandle, int  MeshIndex, int  VisibleFlag);
int  __stdcall dx_MV1GetMeshVisible( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1SetMeshDifColorScale( int  MHandle, int  MeshIndex, COLOR_F  Scale);
int  __stdcall dx_MV1SetMeshSpcColorScale( int  MHandle, int  MeshIndex, COLOR_F  Scale);
int  __stdcall dx_MV1SetMeshEmiColorScale( int  MHandle, int  MeshIndex, COLOR_F  Scale);
int  __stdcall dx_MV1SetMeshAmbColorScale( int  MHandle, int  MeshIndex, COLOR_F  Scale);
COLOR_F  __stdcall dx_MV1GetMeshDifColorScale( int  MHandle, int  MeshIndex);
COLOR_F  __stdcall dx_MV1GetMeshSpcColorScale( int  MHandle, int  MeshIndex);
COLOR_F  __stdcall dx_MV1GetMeshEmiColorScale( int  MHandle, int  MeshIndex);
COLOR_F  __stdcall dx_MV1GetMeshAmbColorScale( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1SetMeshOpacityRate( int  MHandle, int  MeshIndex, float  Rate);
float  __stdcall dx_MV1GetMeshOpacityRate( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1SetMeshDrawBlendMode( int  MHandle, int  MeshIndex, int  BlendMode);
int  __stdcall dx_MV1SetMeshDrawBlendParam( int  MHandle, int  MeshIndex, int  BlendParam);
int  __stdcall dx_MV1GetMeshDrawBlendMode( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1GetMeshDrawBlendParam( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1SetMeshBaseVisible( int  MHandle, int  MeshIndex, int  VisibleFlag);
int  __stdcall dx_MV1GetMeshBaseVisible( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1SetMeshBackCulling( int  MHandle, int  MeshIndex, int  CullingFlag);
int  __stdcall dx_MV1GetMeshBackCulling( int  MHandle, int  MeshIndex);
VECTOR  __stdcall dx_MV1GetMeshMaxPosition( int  MHandle, int  MeshIndex);
VECTOR  __stdcall dx_MV1GetMeshMinPosition( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1GetMeshTListNum( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1GetMeshTList( int  MHandle, int  MeshIndex, int  Index);
int  __stdcall dx_MV1GetMeshSemiTransState( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1SetMeshUseVertDifColor( int  MHandle, int  MeshIndex, int  UseFlag);
int  __stdcall dx_MV1SetMeshUseVertSpcColor( int  MHandle, int  MeshIndex, int  UseFlag);
int  __stdcall dx_MV1GetMeshUseVertDifColor( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1GetMeshUseVertSpcColor( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1GetMeshShapeFlag( int  MHandle, int  MeshIndex);
int  __stdcall dx_MV1GetShapeNum( int  MHandle);
int  __stdcall dx_MV1SearchShape( int  MHandle, const TCHAR * ShapeName);
int  __stdcall dx_MV1SearchShapeWithStrLen( int  MHandle, const TCHAR * ShapeName, size_t  ShapeNameLength);
const TCHAR * __stdcall dx_MV1GetShapeName( int  MHandle, int  ShapeIndex);
int  __stdcall dx_MV1GetShapeTargetMeshNum( int  MHandle, int  ShapeIndex);
int  __stdcall dx_MV1GetShapeTargetMesh( int  MHandle, int  ShapeIndex, int  Index);
int  __stdcall dx_MV1SetShapeRate( int  MHandle, int  ShapeIndex, float  Rate, int  Type = DX_MV1_SHAPERATE_ADD);
float  __stdcall dx_MV1GetShapeRate( int  MHandle, int  ShapeIndex);
float  __stdcall dx_MV1GetShapeApplyRate( int  MHandle, int  ShapeIndex);
int  __stdcall dx_MV1GetTriangleListNum( int  MHandle);
int  __stdcall dx_MV1GetTriangleListVertexType( int  MHandle, int  TListIndex);
int  __stdcall dx_MV1GetTriangleListPolygonNum( int  MHandle, int  TListIndex);
int  __stdcall dx_MV1GetTriangleListVertexNum( int  MHandle, int  TListIndex);
int  __stdcall dx_MV1GetTriangleListLocalWorldMatrixNum( int  MHandle, int  TListIndex);
MATRIX  __stdcall dx_MV1GetTriangleListLocalWorldMatrix( int  MHandle, int  TListIndex, int  LWMatrixIndex);
int  __stdcall dx_MV1GetTriangleListPolygonVertexPosition( int  MHandle, int  TListIndex, int  PolygonIndex, VECTOR *  VertexPositionArray, float *  MatrixWeightArray);
int  __stdcall dx_MV1GetTriangleListUseMaterial( int  MHandle, int  TListIndex);
int  __stdcall dx_MV1SetupCollInfo( int  MHandle, int  FrameIndex = -1, int  XDivNum = 32, int  YDivNum = 8, int  ZDivNum = 32, int  MeshIndex = -1);
int  __stdcall dx_MV1TerminateCollInfo( int  MHandle, int  FrameIndex = -1, int  MeshIndex = -1);
int  __stdcall dx_MV1RefreshCollInfo( int  MHandle, int  FrameIndex = -1, int  MeshIndex = -1);
MV1_COLL_RESULT_POLY  __stdcall dx_MV1CollCheck_Line( int  MHandle, int  FrameIndex, VECTOR  PosStart, VECTOR  PosEnd, int  MeshIndex = -1);
MV1_COLL_RESULT_POLY_DIM  __stdcall dx_MV1CollCheck_LineDim( int  MHandle, int  FrameIndex, VECTOR  PosStart, VECTOR  PosEnd, int  MeshIndex = -1);
MV1_COLL_RESULT_POLY_DIM  __stdcall dx_MV1CollCheck_Sphere( int  MHandle, int  FrameIndex, VECTOR  CenterPos, float  r, int  MeshIndex = -1);
MV1_COLL_RESULT_POLY_DIM  __stdcall dx_MV1CollCheck_Capsule( int  MHandle, int  FrameIndex, VECTOR  Pos1, VECTOR  Pos2, float  r, int  MeshIndex = -1);
MV1_COLL_RESULT_POLY_DIM  __stdcall dx_MV1CollCheck_Triangle( int  MHandle, int  FrameIndex, VECTOR  Pos1, VECTOR  Pos2, VECTOR  Pos3, int  MeshIndex = -1);
MV1_COLL_RESULT_POLY  __stdcall dx_MV1CollCheck_GetResultPoly( MV1_COLL_RESULT_POLY_DIM  ResultPolyDim, int  PolyNo);
int  __stdcall dx_MV1CollResultPolyDimTerminate( MV1_COLL_RESULT_POLY_DIM  ResultPolyDim);
int  __stdcall dx_MV1SetupReferenceMesh( int  MHandle, int  FrameIndex, int  IsTransform, int  IsPositionOnly = FALSE, int  MeshIndex = -1);
int  __stdcall dx_MV1TerminateReferenceMesh( int  MHandle, int  FrameIndex, int  IsTransform, int  IsPositionOnly = FALSE, int  MeshIndex = -1);
int  __stdcall dx_MV1RefreshReferenceMesh( int  MHandle, int  FrameIndex, int  IsTransform, int  IsPositionOnly = FALSE, int  MeshIndex = -1);
MV1_REF_POLYGONLIST __stdcall dx_MV1GetReferenceMesh( int MHandle , int FrameIndex , int IsTransform , int IsPositionOnly = FALSE , int MeshIndex = -1 ) ;
int  __stdcall dx_Live2D_SetCubism4CoreDLLPath( const TCHAR * CoreDLLFilePath);
int  __stdcall dx_Live2D_SetCubism4CoreDLLPathWithStrLen( const TCHAR * CoreDLLFilePath, size_t  CoreDLLFilePathLength);
int  __stdcall dx_Live2D_SetCubism3CoreDLLPath( const TCHAR * CoreDLLFilePath);
int  __stdcall dx_Live2D_SetCubism3CoreDLLPathWithStrLen( const TCHAR * CoreDLLFilePath, size_t  CoreDLLFilePathLength);
int  __stdcall dx_Live2D_RenderBegin( void);
int  __stdcall dx_Live2D_RenderEnd( void);
int  __stdcall dx_Live2D_LoadModel( const TCHAR * FilePath);
int  __stdcall dx_Live2D_LoadModelWithStrLen( const TCHAR * FilePath, size_t  FilePathLength);
int  __stdcall dx_Live2D_DeleteModel( int  Live2DModelHandle);
int  __stdcall dx_Live2D_InitModel( void);
int  __stdcall dx_Live2D_Model_Update( int  Live2DModelHandle, float  DeltaTimeSeconds);
int  __stdcall dx_Live2D_Model_SetTranslate( int  Live2DModelHandle, float  x, float  y);
int  __stdcall dx_Live2D_Model_SetExtendRate( int  Live2DModelHandle, float  ExRateX, float  ExRateY);
int  __stdcall dx_Live2D_Model_SetRotate( int  Live2DModelHandle, float  RotAngle);
int  __stdcall dx_Live2D_Model_Draw( int  Live2DModelHandle);
int  __stdcall dx_Live2D_Model_StartMotion( int  Live2DModelHandle, const TCHAR * group, int  no);
int  __stdcall dx_Live2D_Model_StartMotionWithStrLen( int  Live2DModelHandle, const TCHAR * group, size_t  groupLength, int  no);
int  __stdcall dx_Live2D_Model_IsMotionFinished( int  Live2DModelHandle);
int  __stdcall dx_Live2D_Model_SetExpression( int  Live2DModelHandle, const TCHAR * expressionID);
int  __stdcall dx_Live2D_Model_SetExpressionWithStrLen( int  Live2DModelHandle, const TCHAR * expressionID, size_t  expressionIDLength);
int  __stdcall dx_Live2D_Model_HitTest( int  Live2DModelHandle, const TCHAR * hitAreaName, float  x, float  y);
int  __stdcall dx_Live2D_Model_HitTestWithStrLen( int  Live2DModelHandle, const TCHAR * hitAreaName, size_t  hitAreaNameLength, float  x, float  y);
int  __stdcall dx_Live2D_Model_GetParameterCount( int  Live2DModelHandle);
const TCHAR * __stdcall dx_Live2D_Model_GetParameterId( int  Live2DModelHandle, int  index);
float  __stdcall dx_Live2D_Model_GetParameterValue( int  Live2DModelHandle, const TCHAR * parameterId);
float  __stdcall dx_Live2D_Model_GetParameterValueWithStrLen( int  Live2DModelHandle, const TCHAR * parameterId, size_t  parameterIdLength);
int  __stdcall dx_Live2D_Model_SetParameterValue( int  Live2DModelHandle, const TCHAR * parameterId, float  value);
int  __stdcall dx_Live2D_Model_SetParameterValueWithStrLen( int  Live2DModelHandle, const TCHAR * parameterId, size_t  parameterIdLength, float  value);
int  __stdcall dx_Live2D_Model_GetHitAreasCount( int  Live2DModelHandle);
const TCHAR * __stdcall dx_Live2D_Model_GetHitAreaName( int  Live2DModelHandle, int  index);
const TCHAR * __stdcall dx_Live2D_Model_GetPhysicsFileName( int  Live2DModelHandle);
const TCHAR * __stdcall dx_Live2D_Model_GetPoseFileName( int  Live2DModelHandle);
int  __stdcall dx_Live2D_Model_GetExpressionCount( int  Live2DModelHandle);
const TCHAR * __stdcall dx_Live2D_Model_GetExpressionName( int  Live2DModelHandle, int  index);
const TCHAR * __stdcall dx_Live2D_Model_GetExpressionFileName( int  Live2DModelHandle, int  index);
int  __stdcall dx_Live2D_Model_GetMotionGroupCount( int  Live2DModelHandle);
const TCHAR * __stdcall dx_Live2D_Model_GetMotionGroupName( int  Live2DModelHandle, int  index);
int  __stdcall dx_Live2D_Model_GetMotionCount( int  Live2DModelHandle, const TCHAR * groupName);
int  __stdcall dx_Live2D_Model_GetMotionCountWithStrLen( int  Live2DModelHandle, const TCHAR * groupName, size_t  groupNameLength);
const TCHAR * __stdcall dx_Live2D_Model_GetMotionFileName( int  Live2DModelHandle, const TCHAR * groupName, int  index);
const TCHAR * __stdcall dx_Live2D_Model_GetMotionFileNameWithStrLen( int  Live2DModelHandle, const TCHAR * groupName, size_t  groupNameLength, int  index);
const TCHAR * __stdcall dx_Live2D_Model_GetMotionSoundFileName( int  Live2DModelHandle, const TCHAR * groupName, int  index);
const TCHAR * __stdcall dx_Live2D_Model_GetMotionSoundFileNameWithStrLen( int  Live2DModelHandle, const TCHAR * groupName, size_t  groupNameLength, int  index);
float  __stdcall dx_Live2D_Model_GetMotionFadeInTimeValue( int  Live2DModelHandle, const TCHAR * groupName, int  index);
float  __stdcall dx_Live2D_Model_GetMotionFadeInTimeValueWithStrLen( int  Live2DModelHandle, const TCHAR * groupName, size_t  groupNameLength, int  index);
float  __stdcall dx_Live2D_Model_GetMotionFadeOutTimeValue( int  Live2DModelHandle, const TCHAR * groupName, int  index);
float  __stdcall dx_Live2D_Model_GetMotionFadeOutTimeValueWithStrLen( int  Live2DModelHandle, const TCHAR * groupName, size_t  groupNameLength, int  index);
const TCHAR * __stdcall dx_Live2D_Model_GetUserDataFile( int  Live2DModelHandle);
int  __stdcall dx_Live2D_Model_GetEyeBlinkParameterCount( int  Live2DModelHandle);
const TCHAR * __stdcall dx_Live2D_Model_GetEyeBlinkParameterId( int  Live2DModelHandle, int  index);
int  __stdcall dx_Live2D_Model_GetLipSyncParameterCount( int  Live2DModelHandle);
const TCHAR * __stdcall dx_Live2D_Model_GetLipSyncParameterId( int  Live2DModelHandle, int  index);
int __stdcall dx_GetResourceInfo( const TCHAR * ResourceName , const TCHAR * ResourceType , void * * DataPointerP , size_t * DataSizeP ) ;
int __stdcall dx_GetResourceInfoWithStrLen( const TCHAR * ResourceName , size_t ResourceNameLength , const TCHAR * ResourceType , size_t ResourceTypeLength , void * * DataPointerP , size_t * DataSizeP ) ;
const TCHAR * __stdcall dx_GetResourceIDString( int ResourceID ) ;
int  __stdcall dx_GetWindowCRect( RECT *  RectBuf);
int  __stdcall dx_GetWindowClientRect( RECT *  RectBuf);
int  __stdcall dx_GetWindowFrameRect( RECT *  RectBuf);
int  __stdcall dx_GetWindowActiveFlag( void);
int  __stdcall dx_GetWindowMinSizeFlag( void);
int  __stdcall dx_GetWindowMaxSizeFlag( void);
int  __stdcall dx_GetActiveFlag( void);
HWND  __stdcall dx_GetMainWindowHandle( void);
int  __stdcall dx_GetWindowModeFlag( void);
int  __stdcall dx_GetDefaultState( int *  SizeX, int *  SizeY, int *  ColorBitDepth, int *  RefreshRate, int *  LeftTopX, int *  LeftTopY, int *  PixelSizeX, int *  PixelSizeY);
int  __stdcall dx_GetNoActiveState( int  ResetFlag = TRUE);
int  __stdcall dx_GetMouseDispFlag( void);
int  __stdcall dx_GetAlwaysRunFlag( void);
int  __stdcall dx__GetSystemInfo( int *  DxLibVer, int *  DirectXVer, int *  WindowsVer);
int  __stdcall dx_GetPcInfo( TCHAR *  OSString, TCHAR *  DirectXString, TCHAR *  CPUString, int *  CPUSpeed, double *  FreeMemorySize, double *  TotalMemorySize, TCHAR *  VideoDriverFileName, TCHAR *  VideoDriverString, double *  FreeVideoMemorySize, double *  TotalVideoMemorySize);
int  __stdcall dx_GetUseMMXFlag( void);
int  __stdcall dx_GetUseSSEFlag( void);
int  __stdcall dx_GetUseSSE2Flag( void);
int  __stdcall dx_GetWindowCloseFlag( void);
HINSTANCE __stdcall dx_GetTaskInstance( void );
int  __stdcall dx_GetUseWindowRgnFlag( void);
int __stdcall dx_GetWindowSizeChangeEnableFlag( int * FitScreen = NULL ) ;
double __stdcall dx_GetWindowSizeExtendRate( double * ExRateX = NULL , double * ExRateY = NULL ) ;
int  __stdcall dx_GetWindowSize( int *  Width, int *  Height);
int  __stdcall dx_GetWindowEdgeWidth( int *  LeftWidth, int *  RightWidth, int *  TopWidth, int *  BottomWidth);
int  __stdcall dx_GetWindowPosition( int *  x, int *  y);
int  __stdcall dx_GetWindowUserCloseFlag( int  StateResetFlag = FALSE);
int  __stdcall dx_GetNotDrawFlag( void);
int  __stdcall dx_GetPaintMessageFlag( void);
int  __stdcall dx_GetValidHiPerformanceCounter( void);
TCHAR __stdcall dx_GetInputSystemChar( int DeleteFlag ) ;
int  __stdcall dx_ChangeWindowMode( int  Flag);
int  __stdcall dx_SetUseCharSet( int  CharSet);
int  __stdcall dx_LoadPauseGraph( const TCHAR * FileName);
int  __stdcall dx_LoadPauseGraphWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_LoadPauseGraphFromMem( const void * MemImage, int  MemImageSize);
int __stdcall dx_SetActiveStateChangeCallBackFunction( int ( *CallBackFunction )( int ActiveState , void * UserData ) , void * UserData ) ;
int  __stdcall dx_SetWindowText( const TCHAR * WindowText);
int  __stdcall dx_SetWindowTextWithStrLen( const TCHAR * WindowText, size_t  WindowTextLength);
int  __stdcall dx_SetMainWindowText( const TCHAR * WindowText);
int  __stdcall dx_SetMainWindowTextWithStrLen( const TCHAR * WindowText, size_t  WindowTextLength);
int  __stdcall dx_SetMainWindowClassName( const TCHAR * ClassName);
int  __stdcall dx_SetMainWindowClassNameWithStrLen( const TCHAR * ClassName, size_t  ClassNameLength);
int  __stdcall dx_SetWindowIconID( int  ID);
int  __stdcall dx_SetWindowIconHandle( HICON  Icon);
int __stdcall dx_SetUseASyncChangeWindowModeFunction( int Flag , void ( *CallBackFunction )( void * ) , void * Data ) ;
int __stdcall dx_SetShutdownCallbackFunction( void ( *CallbackFunction )( void * ) , void * Data , const TCHAR * Message ) ;
int  __stdcall dx_SetWindowStyleMode( int  Mode);
int  __stdcall dx_SetWindowZOrder( int  ZType, int  WindowActivateFlag = TRUE);
int  __stdcall dx_SetWindowSizeChangeEnableFlag( int  Flag, int  FitScreen = TRUE);
int  __stdcall dx_SetWindowSizeExtendRate( double  ExRateX, double  ExRateY = -1.0);
int  __stdcall dx_SetWindowSize( int  Width, int  Height);
int  __stdcall dx_SetWindowMaxSize( int  MaxWidth, int  MaxHeight);
int  __stdcall dx_SetWindowMinSize( int  MinWidth, int  MinHeight);
int  __stdcall dx_SetWindowPosition( int  x, int  y);
int  __stdcall dx_SetSysCommandOffFlag( int  Flag, const TCHAR * HookDllPath = NULL);
int  __stdcall dx_SetSysCommandOffFlagWithStrLen( int  Flag, const TCHAR * HookDllPath = NULL, size_t  HookDllPathLength = 0);
int __stdcall dx_SetHookWinProc( WNDPROC WinProc ) ;
int  __stdcall dx_SetUseHookWinProcReturnValue( int  UseFlag);
int  __stdcall dx_SetDoubleStartValidFlag( int  Flag);
int  __stdcall dx_CheckDoubleStart( void);
int  __stdcall dx_AddMessageTakeOverWindow( HWND  Window);
int  __stdcall dx_SubMessageTakeOverWindow( HWND  Window);
int  __stdcall dx_SetWindowInitPosition( int  x, int  y);
int  __stdcall dx_SetNotWinFlag( int  Flag);
int  __stdcall dx_SetNotDrawFlag( int  Flag);
int  __stdcall dx_SetNotSoundFlag( int  Flag);
int  __stdcall dx_SetNotInputFlag( int  Flag);
int  __stdcall dx_SetDialogBoxHandle( HWND  WindowHandle);
int  __stdcall dx_SetWindowVisibleFlag( int  Flag);
int  __stdcall dx_SetWindowMinimizeFlag( int  Flag);
int  __stdcall dx_SetWindowUserCloseEnableFlag( int  Flag);
int  __stdcall dx_SetDxLibEndPostQuitMessageFlag( int  Flag);
int  __stdcall dx_SetUserWindow( HWND  WindowHandle);
int  __stdcall dx_SetUserChildWindow( HWND  WindowHandle);
int  __stdcall dx_SetUserWindowMessageProcessDXLibFlag( int  Flag);
int  __stdcall dx_SetUseFPUPreserveFlag( int  Flag);
int  __stdcall dx_SetValidMousePointerWindowOutClientAreaMoveFlag( int  Flag);
int  __stdcall dx_SetUseBackBufferTransColorFlag( int  Flag);
int  __stdcall dx_SetUseUpdateLayerdWindowFlag( int  Flag);
int __stdcall dx_SetResourceModule( HMODULE ResourceModule ) ;
int  __stdcall dx_SetUseDxLibWM_PAINTProcess( int  Flag);
int  __stdcall dx_SetDragFileValidFlag( int  Flag);
int  __stdcall dx_DragFileInfoClear( void);
int  __stdcall dx_GetDragFilePath( TCHAR *  FilePathBuffer);
int  __stdcall dx_GetDragFileNum( void);
HRGN __stdcall dx_CreateRgnFromGraph( int Width , int Height , const void * MaskData , int Pitch , int Byte ) ;
HRGN __stdcall dx_CreateRgnFromBaseImage( BASEIMAGE * BaseImage , int TransColorR , int TransColorG , int TransColorB ) ;
int  __stdcall dx_SetWindowRgnGraph( const TCHAR * FileName);
int  __stdcall dx_SetWindowRgnGraphWithStrLen( const TCHAR * FileName, size_t  FileNameLength);
int  __stdcall dx_UpdateTransColorWindowRgn( void);
int  __stdcall dx_SetupToolBar( const TCHAR * BitmapName, int  DivNum, int  ResourceID = -1);
int  __stdcall dx_SetupToolBarWithStrLen( const TCHAR * BitmapName, size_t  BitmapNameLength, int  DivNum, int  ResourceID = -1);
int  __stdcall dx_AddToolBarButton( int  Type, int  State, int  ImageIndex, int  ID);
int  __stdcall dx_AddToolBarSep( void);
int  __stdcall dx_GetToolBarButtonState( int  ID);
int  __stdcall dx_SetToolBarButtonState( int  ID, int  State);
int  __stdcall dx_DeleteAllToolBarButton( void);
int  __stdcall dx_SetUseMenuFlag( int  Flag);
int  __stdcall dx_SetUseKeyAccelFlag( int  Flag);
int  __stdcall dx_AddKeyAccel( const TCHAR * ItemName, int  ItemID, int  KeyCode, int  CtrlFlag, int  AltFlag, int  ShiftFlag);
int  __stdcall dx_AddKeyAccelWithStrLen( const TCHAR * ItemName, size_t  ItemNameLength, int  ItemID, int  KeyCode, int  CtrlFlag, int  AltFlag, int  ShiftFlag);
int  __stdcall dx_AddKeyAccel_Name( const TCHAR * ItemName, int  KeyCode, int  CtrlFlag, int  AltFlag, int  ShiftFlag);
int  __stdcall dx_AddKeyAccel_NameWithStrLen( const TCHAR * ItemName, size_t  ItemNameLength, int  KeyCode, int  CtrlFlag, int  AltFlag, int  ShiftFlag);
int  __stdcall dx_AddKeyAccel_ID( int  ItemID, int  KeyCode, int  CtrlFlag, int  AltFlag, int  ShiftFlag);
int  __stdcall dx_ClearKeyAccel( void);
int  __stdcall dx_AddMenuItem( int  AddType, const TCHAR * ItemName, int  ItemID, int  SeparatorFlag, const TCHAR * NewItemName = NULL, int  NewItemID = -1);
int  __stdcall dx_AddMenuItemWithStrLen( int  AddType, const TCHAR * ItemName, size_t  ItemNameLength, int  ItemID, int  SeparatorFlag, const TCHAR * NewItemName = NULL, size_t  NewItemNameLength = 0, int  NewItemID = -1);
int  __stdcall dx_DeleteMenuItem( const TCHAR * ItemName, int  ItemID);
int  __stdcall dx_DeleteMenuItemWithStrLen( const TCHAR * ItemName, size_t  ItemNameLength, int  ItemID);
int  __stdcall dx_CheckMenuItemSelect( const TCHAR * ItemName, int  ItemID);
int  __stdcall dx_CheckMenuItemSelectWithStrLen( const TCHAR * ItemName, size_t  ItemNameLength, int  ItemID);
int  __stdcall dx_SetMenuItemEnable( const TCHAR * ItemName, int  ItemID, int  EnableFlag);
int  __stdcall dx_SetMenuItemEnableWithStrLen( const TCHAR * ItemName, size_t  ItemNameLength, int  ItemID, int  EnableFlag);
int  __stdcall dx_SetMenuItemMark( const TCHAR * ItemName, int  ItemID, int  Mark);
int  __stdcall dx_SetMenuItemMarkWithStrLen( const TCHAR * ItemName, size_t  ItemNameLength, int  ItemID, int  Mark);
int  __stdcall dx_CheckMenuItemSelectAll( void);
int  __stdcall dx_AddMenuItem_Name( const TCHAR * ParentItemName, const TCHAR * NewItemName);
int  __stdcall dx_AddMenuItem_NameWithStrLen( const TCHAR * ParentItemName, size_t  ParentItemNameLength, const TCHAR * NewItemName, size_t  NewItemNameLength);
int  __stdcall dx_AddMenuLine_Name( const TCHAR * ParentItemName);
int  __stdcall dx_AddMenuLine_NameWithStrLen( const TCHAR * ParentItemName, size_t  ParentItemNameLength);
int  __stdcall dx_InsertMenuItem_Name( const TCHAR * ItemName, const TCHAR * NewItemName);
int  __stdcall dx_InsertMenuItem_NameWithStrLen( const TCHAR * ItemName, size_t  ItemNameLength, const TCHAR * NewItemName, size_t  NewItemNameLength);
int  __stdcall dx_InsertMenuLine_Name( const TCHAR * ItemName);
int  __stdcall dx_InsertMenuLine_NameWithStrLen( const TCHAR * ItemName, size_t  ItemNameLength);
int  __stdcall dx_DeleteMenuItem_Name( const TCHAR * ItemName);
int  __stdcall dx_DeleteMenuItem_NameWithStrLen( const TCHAR * ItemName, size_t  ItemNameLength);
int  __stdcall dx_CheckMenuItemSelect_Name( const TCHAR * ItemName);
int  __stdcall dx_CheckMenuItemSelect_NameWithStrLen( const TCHAR * ItemName, size_t  ItemNameLength);
int  __stdcall dx_SetMenuItemEnable_Name( const TCHAR * ItemName, int  EnableFlag);
int  __stdcall dx_SetMenuItemEnable_NameWithStrLen( const TCHAR * ItemName, size_t  ItemNameLength, int  EnableFlag);
int  __stdcall dx_SetMenuItemMark_Name( const TCHAR * ItemName, int  Mark);
int  __stdcall dx_SetMenuItemMark_NameWithStrLen( const TCHAR * ItemName, size_t  ItemNameLength, int  Mark);
int  __stdcall dx_AddMenuItem_ID( int  ParentItemID, const TCHAR * NewItemName, int  NewItemID = -1);
int  __stdcall dx_AddMenuItem_IDWithStrLen( int  ParentItemID, const TCHAR * NewItemName, size_t  NewItemNameLength, int  NewItemID = -1);
int  __stdcall dx_AddMenuLine_ID( int  ParentItemID);
int  __stdcall dx_InsertMenuItem_ID( int  ItemID, int  NewItemID);
int  __stdcall dx_InsertMenuLine_ID( int  ItemID, int  NewItemID);
int  __stdcall dx_DeleteMenuItem_ID( int  ItemID);
int  __stdcall dx_CheckMenuItemSelect_ID( int  ItemID);
int  __stdcall dx_SetMenuItemEnable_ID( int  ItemID, int  EnableFlag);
int  __stdcall dx_SetMenuItemMark_ID( int  ItemID, int  Mark);
int  __stdcall dx_DeleteMenuItemAll( void);
int  __stdcall dx_ClearMenuItemSelect( void);
int  __stdcall dx_GetMenuItemID( const TCHAR * ItemName);
int  __stdcall dx_GetMenuItemIDWithStrLen( const TCHAR * ItemName, size_t  ItemNameLength);
int  __stdcall dx_GetMenuItemName( int  ItemID, TCHAR *  NameBuffer);
int  __stdcall dx_LoadMenuResource( int  MenuResourceID);
int __stdcall dx_SetMenuItemSelectCallBackFunction( void ( *CallBackFunction )( const TCHAR * ItemName , int ItemID ) ) ;
int __stdcall dx_SetWindowMenu( int MenuID , int ( *MenuProc )( WORD ID ) ) ;
int  __stdcall dx_SetDisplayMenuFlag( int  Flag);
int  __stdcall dx_GetDisplayMenuFlag( void);
int  __stdcall dx_GetUseMenuFlag( void);
int  __stdcall dx_SetAutoMenuDisplayFlag( int  Flag);
int  __stdcall dx_GetWinSockLastError( void);
int  __stdcall dx_SetUseTSFFlag( int  UseFlag);
int  __stdcall dx_SetKeyExclusiveCooperativeLevelFlag( int  Flag);
int  __stdcall dx_SetKeyboardNotDirectInputFlag( int  Flag);
int  __stdcall dx_SetUseDirectInputFlag( int  Flag);
int  __stdcall dx_SetUseXInputFlag( int  Flag);
int  __stdcall dx_SetUseXboxControllerDirectInputFlag( int  Flag);
int __stdcall dx_GetJoypadGUID( int PadIndex , GUID * GuidInstanceBuffer , GUID * GuidProductBuffer = NULL ) ;
int  __stdcall dx_GetJoypadName( int  InputType, TCHAR *  InstanceNameBuffer, TCHAR *  ProductNameBuffer);
int  __stdcall dx_ConvertKeyCodeToVirtualKey( int  KeyCode);
int  __stdcall dx_ConvertVirtualKeyToKeyCode( int  VirtualKey);
int __stdcall dx_LoadGraphToResource( int ResourceID ) ;
int  __stdcall dx_LoadDivGraphToResource( int  ResourceID, int  AllNum, int  XNum, int  YNum, int  XSize, int  YSize, int *  HandleArray);
int  __stdcall dx_LoadDivGraphFToResource( int  ResourceID, int  AllNum, int  XNum, int  YNum, float  XSize, float  YSize, int *  HandleArray);
int __stdcall dx_LoadGraphToResource_2( const TCHAR * ResourceName , const TCHAR * ResourceType ) ;
int  __stdcall dx_LoadGraphToResourceWithStrLen( const TCHAR * ResourceName, size_t  ResourceNameLength, const TCHAR * ResourceType, size_t  ResourceTypeLength);
int  __stdcall dx_LoadDivGraphToResource_2( const TCHAR * ResourceName, const TCHAR * ResourceType, int  AllNum, int  XNum, int  YNum, int  XSize, int  YSize, int *  HandleArray);
int  __stdcall dx_LoadDivGraphToResourceWithStrLen( const TCHAR * ResourceName, size_t  ResourceNameLength, const TCHAR * ResourceType, size_t  ResourceTypeLength, int  AllNum, int  XNum, int  YNum, int  XSize, int  YSize, int *  HandleArray);
int  __stdcall dx_LoadDivGraphFToResource_2( const TCHAR * ResourceName, const TCHAR * ResourceType, int  AllNum, int  XNum, int  YNum, float  XSize, float  YSize, int *  HandleArray);
int  __stdcall dx_LoadDivGraphFToResourceWithStrLen( const TCHAR * ResourceName, size_t  ResourceNameLength, const TCHAR * ResourceType, size_t  ResourceTypeLength, int  AllNum, int  XNum, int  YNum, float  XSize, float  YSize, int *  HandleArray);
int  __stdcall dx_CreateGraphFromID3D11Texture2D( const void * pID3D11Texture2D);
const void * __stdcall dx_GetGraphID3D11Texture2D( int  GrHandle);
const void * __stdcall dx_GetGraphID3D11RenderTargetView( int  GrHandle);
const void * __stdcall dx_GetGraphID3D11DepthStencilView( int  GrHandle);
int  __stdcall dx_BltBackScreenToWindow( HWND  Window, int  ClientX, int  ClientY);
int  __stdcall dx_BltRectBackScreenToWindow( HWND  Window, RECT  BackScreenRect, RECT  WindowClientRect);
int  __stdcall dx_SetScreenFlipTargetWindow( HWND  TargetWindow, double  ScaleX = 1.0, double  ScaleY = 1.0);
int  __stdcall dx_GetDesktopScreenGraph( int  x1, int  y1, int  x2, int  y2, int  GrHandle, int  DestX = 0, int  DestY = 0);
void *  __stdcall dx_GetDesktopScreenGraphMemImage( int  x1, int  y1, int  x2, int  y2, int *  Width, int *  Height, int *  Stride, int  ColorBitDepth = 32);
int  __stdcall dx_SetMultiThreadFlag( int  Flag);
int  __stdcall dx_SetUseDirectDrawDeviceIndex( int  Index);
int  __stdcall dx_SetAeroDisableFlag( int  Flag);
int  __stdcall dx_SetUseDirect3D9Ex( int  Flag);
int  __stdcall dx_SetUseDirect3D11( int  Flag);
int  __stdcall dx_SetUseDirect3D11MinFeatureLevel( int  Level);
int  __stdcall dx_SetUseDirect3D11WARPDriver( int  Flag);
int  __stdcall dx_SetUseDirect3DVersion( int  Version);
int  __stdcall dx_GetUseDirect3DVersion( void);
int  __stdcall dx_GetUseDirect3D11FeatureLevel( void);
int  __stdcall dx_SetUseDirectDrawFlag( int  Flag);
int  __stdcall dx_SetUseGDIFlag( int  Flag);
int  __stdcall dx_GetUseGDIFlag( void);
int __stdcall dx_SetDDrawUseGuid( const GUID * Guid ) ;
const void * __stdcall dx_GetUseDDrawObj( void );
const GUID * __stdcall dx_GetDirectDrawDeviceGUID( int Number ) ;
int  __stdcall dx_GetDirectDrawDeviceDescription( int  Number, char *  StringBuffer);
int  __stdcall dx_GetDirectDrawDeviceNum( void);
const void * __stdcall dx_GetUseDirect3DDevice9( void);
const void * __stdcall dx_GetUseDirect3D9BackBufferSurface( void);
const void * __stdcall dx_GetUseDirect3D11Device( void);
const void * __stdcall dx_GetUseDirect3D11DeviceContext( void);
const void * __stdcall dx_GetUseDirect3D11BackBufferTexture2D( void);
const void * __stdcall dx_GetUseDirect3D11BackBufferRenderTargetView( void);
const void * __stdcall dx_GetUseDirect3D11DepthStencilTexture2D( void);
int  __stdcall dx_SetDrawScreen_ID3D11RenderTargetView( const void * pID3D11RenderTargetView, const void * pID3D11DepthStencilView = NULL);
int  __stdcall dx_RefreshDxLibDirect3DSetting( void);
int  __stdcall dx_SetUseMediaFoundationFlag( int  Flag);
int  __stdcall dx_ColorKaiseki( const void * PixelData, COLORDATA *  ColorData);
int __stdcall dx_BmpBltToMask( HBITMAP Bmp , int BmpPointX , int BmpPointY , int MaskHandle ) ;
HANDLE  __stdcall dx_AddFontFile( const TCHAR * FontFilePath);
HANDLE  __stdcall dx_AddFontFileWithStrLen( const TCHAR * FontFilePath, size_t  FontFilePathLength);
HANDLE  __stdcall dx_AddFontFileFromMem( const void * FontFileImage, int  FontFileImageSize);
int  __stdcall dx_RemoveFontFile( HANDLE  FontHandle);
int  __stdcall dx_CreateFontDataFile( const TCHAR * SaveFilePath, const TCHAR * FontName, int  Size, int  BitDepth, int  Thick, int  Italic = FALSE, int  CharSet = -1, const TCHAR * SaveCharaList = NULL);
int  __stdcall dx_CreateFontDataFileWithStrLen( const TCHAR * SaveFilePath, size_t  SaveFilePathLength, const TCHAR * FontName, size_t  FontNameLength, int  Size, int  BitDepth, int  Thick, int  Italic = FALSE, int  CharSet = -1, const TCHAR * SaveCharaList = NULL, size_t  SaveCharaListLength = 0);
HBITMAP __stdcall dx_CreateDIBGraph( const TCHAR * FileName , int ReverseFlag , COLORDATA * SrcColor ) ;
HBITMAP __stdcall dx_CreateDIBGraphWithStrLen( const TCHAR * FileName , size_t FileNameLength , int ReverseFlag , COLORDATA * SrcColor ) ;
HBITMAP __stdcall dx_CreateDIBGraphToMem( const BITMAPINFO * BmpInfo , const void * GraphData , int ReverseFlag , COLORDATA * SrcColor ) ;
int __stdcall dx_CreateDIBGraph_plus_Alpha( const TCHAR * FileName , HBITMAP * RGBBmp , HBITMAP * AlphaBmp , int ReverseFlag = FALSE , COLORDATA * SrcColor = NULL ) ;
int __stdcall dx_CreateDIBGraph_plus_AlphaWithStrLen( const TCHAR * FileName , size_t FileNameLength , HBITMAP * RGBBmp , HBITMAP * AlphaBmp , int ReverseFlag = FALSE , COLORDATA * SrcColor = NULL ) ;
HBITMAP __stdcall dx_CreateDIBGraphVer2( const TCHAR * FileName , const void * MemImage , int MemImageSize , int ImageType , int ReverseFlag , COLORDATA * SrcColor ) ;
HBITMAP __stdcall dx_CreateDIBGraphVer2WithStrLen( const TCHAR * FileName , size_t FileNameLength , const void * MemImage , int MemImageSize , int ImageType , int ReverseFlag , COLORDATA * SrcColor ) ;
int __stdcall dx_CreateDIBGraphVer2_plus_Alpha( const TCHAR * FileName , const void * MemImage , int MemImageSize , const void * AlphaImage , int AlphaImageSize , int ImageType , HBITMAP * RGBBmp , HBITMAP * AlphaBmp , int ReverseFlag , COLORDATA * SrcColor ) ;
int __stdcall dx_CreateDIBGraphVer2_plus_AlphaWithStrLen( const TCHAR * FileName , size_t FileNameLength , const void * MemImage , int MemImageSize , const void * AlphaImage , int AlphaImageSize , int ImageType , HBITMAP * RGBBmp , HBITMAP * AlphaBmp , int ReverseFlag , COLORDATA * SrcColor ) ;
int __stdcall dx_ConvBitmapToGraphImage( const BITMAPINFO * BmpInfo , void * GraphData , BASEIMAGE * GraphImage , int CopyFlag ) ;
int __stdcall dx_ConvGraphImageToBitmap( const BASEIMAGE * GraphImage , BITMAPINFO * BmpInfo , void * * GraphData , int CopyFlag , int FullColorConv = TRUE ) ;
int __stdcall dx_UpdateLayerdWindowForBaseImage( const BASEIMAGE * BaseImage ) ;
int __stdcall dx_UpdateLayerdWindowForBaseImageRect( const BASEIMAGE * BaseImage , int x1 , int y1 , int x2 , int y2 ) ;
int __stdcall dx_UpdateLayerdWindowForPremultipliedAlphaBaseImage( const BASEIMAGE * BaseImage ) ;
int __stdcall dx_UpdateLayerdWindowForPremultipliedAlphaBaseImageRect( const BASEIMAGE * BaseImage , int x1 , int y1 , int x2 , int y2 ) ;
int __stdcall dx_GetDesktopScreenBaseImage( int x1 , int y1 , int x2 , int y2 , BASEIMAGE * BaseImage , int DestX , int DestY ) ;
int  __stdcall dx_UpdateLayerdWindowForSoftImage( int  SIHandle);
int  __stdcall dx_UpdateLayerdWindowForSoftImageRect( int  SIHandle, int  x1, int  y1, int  x2, int  y2);
int  __stdcall dx_UpdateLayerdWindowForPremultipliedAlphaSoftImage( int  SIHandle);
int  __stdcall dx_UpdateLayerdWindowForPremultipliedAlphaSoftImageRect( int  SIHandle, int  x1, int  y1, int  x2, int  y2);
int  __stdcall dx_GetDesktopScreenSoftImage( int  x1, int  y1, int  x2, int  y2, int  SIHandle, int  DestX, int  DestY);
int  __stdcall dx_LoadSoundMemByResource( const TCHAR * ResourceName, const TCHAR * ResourceType, int  BufferNum = 1);
int  __stdcall dx_LoadSoundMemByResourceWithStrLen( const TCHAR * ResourceName, size_t  ResourceNameLength, const TCHAR * ResourceType, size_t  ResourceTypeLength, int  BufferNum = 1);
int  __stdcall dx_SetUseSoftwareMixingSoundFlag( int  Flag);
int  __stdcall dx_SetEnableXAudioFlag( int  Flag);
int  __stdcall dx_SetEnableWASAPIFlag( int  Flag, int  IsExclusive = TRUE, int  DevicePeriod = -1, int  SamplePerSec = 44100);
int  __stdcall dx_SetEnableASIOFlag( int  Flag, int  BufferSize = -1, int  SamplePerSec = 44100);
const void * __stdcall dx_GetDSoundObj( void);
int  __stdcall dx_LoadMusicMemByResource( const TCHAR * ResourceName, const TCHAR * ResourceType);
int  __stdcall dx_LoadMusicMemByResourceWithStrLen( const TCHAR * ResourceName, size_t  ResourceNameLength, const TCHAR * ResourceType, size_t  ResourceTypeLength);
int  __stdcall dx_PlayMusicByResource( const TCHAR * ResourceName, const TCHAR * ResourceType, int  PlayType);
int  __stdcall dx_PlayMusicByResourceWithStrLen( const TCHAR * ResourceName, size_t  ResourceNameLength, const TCHAR * ResourceType, size_t  ResourceTypeLength, int  PlayType);
}
